!function(){"use strict";try{if("undefined"!=typeof document){var t=document.createElement("style");t.appendChild(document.createTextNode('@import"https://fonts.googleapis.com/css2?family=Outfit:wght@400;500;600&family=Poppins:wght@400;500;600;700&display=swap";/*! tailwindcss v3.3.2 | MIT License | https://tailwindcss.com*/*,:after,:before{border:0 solid #e5e7eb;box-sizing:border-box}:after,:before{--tw-content:""}html{line-height:1.5;-webkit-text-size-adjust:100%;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;font-feature-settings:normal;font-variation-settings:normal;-moz-tab-size:4;-o-tab-size:4;tab-size:4}body{line-height:inherit;margin:0}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0}fieldset,legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{color:#9ca3af;opacity:1}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]{display:none}*,:after,:before{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgba(59,130,246,.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.wallie-fixed{position:fixed}.wallie-relative{position:relative}.wallie-inset-0{top:0;right:0;bottom:0;left:0}.wallie-z-10{z-index:10}.wallie-z-50{z-index:50}.wallie-mx-auto{margin-left:auto;margin-right:auto}.wallie--mt-1{margin-top:-.25rem}.wallie-mb-1{margin-bottom:.25rem}.wallie-ml-auto{margin-left:auto}.wallie-block{display:block}.wallie-inline-block{display:inline-block}.wallie-flex{display:flex}.wallie-hidden{display:none}.wallie-h-\\[19px\\]{height:19px}.wallie-h-screen{height:100vh}.wallie-min-h-full{min-height:100%}.wallie-w-5{width:1.25rem}.wallie-w-6{width:1.5rem}.wallie-w-\\[19px\\]{width:19px}.wallie-w-full{width:100%}.wallie-scale-100{--tw-scale-x:1;--tw-scale-y:1}.wallie-scale-100,.wallie-scale-95{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.wallie-scale-95{--tw-scale-x:.95;--tw-scale-y:.95}.wallie-transform{transform:translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.wallie-flex-row{flex-direction:row}.wallie-flex-col{flex-direction:column}.wallie-items-end{align-items:flex-end}.wallie-items-center{align-items:center}.wallie-justify-center{justify-content:center}.wallie-justify-between{justify-content:space-between}.wallie-space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-left:calc(.5rem*(1 - var(--tw-space-x-reverse)));margin-right:calc(.5rem*var(--tw-space-x-reverse))}.wallie-space-x-4>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-left:calc(1rem*(1 - var(--tw-space-x-reverse)));margin-right:calc(1rem*var(--tw-space-x-reverse))}.wallie-space-y-4>:not([hidden])~:not([hidden]){--tw-space-y-reverse:0;margin-bottom:calc(1rem*var(--tw-space-y-reverse));margin-top:calc(1rem*(1 - var(--tw-space-y-reverse)))}.wallie-overflow-hidden{overflow:hidden}.wallie-overflow-y-auto{overflow-y:auto}.wallie-break-all{word-break:break-all}.wallie-rounded-full{border-radius:9999px}.wallie-rounded-lg{border-radius:.5rem}.wallie-bg-black{--tw-bg-opacity:1;background-color:rgb(0 0 0/var(--tw-bg-opacity))}.wallie-bg-ord-blue-600{--tw-bg-opacity:1;background-color:rgb(23 30 45/var(--tw-bg-opacity))}.wallie-bg-ord-light-blue{--tw-bg-opacity:1;background-color:rgb(48 55 70/var(--tw-bg-opacity))}.wallie-bg-ord-light-blue-400{--tw-bg-opacity:1;background-color:rgb(73 82 102/var(--tw-bg-opacity))}.wallie-bg-ord-orange{--tw-bg-opacity:1;background-color:rgb(255 108 58/var(--tw-bg-opacity))}.wallie-bg-opacity-90{--tw-bg-opacity:.9}.wallie-p-1{padding:.25rem}.wallie-p-2{padding:.5rem}.wallie-p-4{padding:1rem}.wallie-p-8{padding:2rem}.wallie-px-1{padding-left:.25rem;padding-right:.25rem}.wallie-py-3{padding-bottom:.75rem;padding-top:.75rem}.wallie-pb-4{padding-bottom:1rem}.wallie-pr-2{padding-right:.5rem}.wallie-pr-3{padding-right:.75rem}.wallie-pt-4{padding-top:1rem}.wallie-text-left{text-align:left}.wallie-text-\\[21px\\]{font-size:21px}.wallie-text-lg{font-size:1.125rem;line-height:1.75rem}.wallie-text-sm{font-size:.875rem;line-height:1.25rem}.wallie-font-medium{font-weight:500}.wallie-leading-8{line-height:2rem}.wallie-text-ord-alert{--tw-text-opacity:1;color:rgb(248 242 94/var(--tw-text-opacity))}.wallie-text-ord-blue{--tw-text-opacity:1;color:rgb(17 22 33/var(--tw-text-opacity))}.wallie-text-ord-gray{--tw-text-opacity:1;color:rgb(137 138 149/var(--tw-text-opacity))}.wallie-text-ord-light-blue-400{--tw-text-opacity:1;color:rgb(73 82 102/var(--tw-text-opacity))}.wallie-text-ord-light-gray{--tw-text-opacity:1;color:rgb(217 213 210/var(--tw-text-opacity))}.wallie-opacity-0{opacity:0}.wallie-opacity-100{opacity:1}.wallie-transition-all{transition-duration:.15s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1)}.wallie-transition-opacity{transition-duration:.15s;transition-property:opacity;transition-timing-function:cubic-bezier(.4,0,.2,1)}.wallie-duration-100{transition-duration:.1s}.wallie-duration-200{transition-duration:.2s}.wallie-duration-300{transition-duration:.3s}.wallie-ease-in{transition-timing-function:cubic-bezier(.4,0,1,1)}.wallie-ease-out{transition-timing-function:cubic-bezier(0,0,.2,1)}body,html{font-family:Outfit,sans-serif;margin:0;padding:0;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;scroll-behavior:smooth}@media (min-width:640px){.sm\\:wallie-items-center{align-items:center}.sm\\:wallie-p-0{padding:0}}@media (min-width:768px){.md\\:wallie-block{display:block}.md\\:wallie-w-7{width:1.75rem}.md\\:wallie-w-8{width:2rem}.md\\:wallie-w-96{width:24rem}.md\\:wallie-space-x-2>:not([hidden])~:not([hidden]){--tw-space-x-reverse:0;margin-left:calc(.5rem*(1 - var(--tw-space-x-reverse)));margin-right:calc(.5rem*var(--tw-space-x-reverse))}.md\\:wallie-bg-opacity-75{--tw-bg-opacity:.75}.md\\:wallie-px-3{padding-left:.75rem}.md\\:wallie-pr-3,.md\\:wallie-px-3{padding-right:.75rem}.md\\:wallie-text-xl{font-size:1.25rem;line-height:1.75rem}}')),document.head.appendChild(t)}}catch(e){console.error("vite-plugin-css-injected-by-js",e)}}();
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key2, value3) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value: value3 }) : obj[key2] = value3;
var __publicField = (obj, key2, value3) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value3);
import * as C$3 from "react";
import C__default, { useState, useEffect, useCallback, createContext, useMemo, useContext, useLayoutEffect, useRef, forwardRef, Fragment, isValidElement, cloneElement, createElement, useReducer, createRef } from "react";
import { createPortal } from "react-dom";
function _mergeNamespaces(n2, m2) {
  for (var i2 = 0; i2 < m2.length; i2++) {
    const e2 = m2[i2];
    if (typeof e2 !== "string" && !Array.isArray(e2)) {
      for (const k2 in e2) {
        if (k2 !== "default" && !(k2 in n2)) {
          const d2 = Object.getOwnPropertyDescriptor(e2, k2);
          if (d2) {
            Object.defineProperty(n2, k2, d2.get ? d2 : {
              enumerable: true,
              get: () => e2[k2]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n2, Symbol.toStringTag, { value: "Module" }));
}
function getDefaultExportFromCjs$1(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var browser$c = { exports: {} };
var process = browser$c.exports = {};
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    if (typeof setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e2) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e2) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e2) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e3) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e2) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e3) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len2 = queue.length;
  while (len2) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len2) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len2 = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      args[i2 - 1] = arguments[i2];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};
function Item(fun, array2) {
  this.fun = fun;
  this.array = array2;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = "";
process.versions = {};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name2) {
  return [];
};
process.binding = function(name2) {
  throw new Error("process.binding is not supported");
};
process.cwd = function() {
  return "/";
};
process.chdir = function(dir) {
  throw new Error("process.chdir is not supported");
};
process.umask = function() {
  return 0;
};
var browserExports$1 = browser$c.exports;
const process$1 = /* @__PURE__ */ getDefaultExportFromCjs$1(browserExports$1);
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule) return n2;
  var f2 = n2.default;
  if (typeof f2 == "function") {
    var a2 = function a3() {
      if (this instanceof a3) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a2.prototype = f2.prototype;
  } else a2 = {};
  Object.defineProperty(a2, "__esModule", { value: true });
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a2, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a2;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_production_min = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var hasRequiredReactJsxRuntime_production_min;
function requireReactJsxRuntime_production_min() {
  if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
  hasRequiredReactJsxRuntime_production_min = 1;
  var f2 = C__default, k2 = Symbol.for("react.element"), l2 = Symbol.for("react.fragment"), m2 = Object.prototype.hasOwnProperty, n2 = f2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p2 = { key: true, ref: true, __self: true, __source: true };
  function q2(c2, a2, g2) {
    var b2, d2 = {}, e2 = null, h2 = null;
    void 0 !== g2 && (e2 = "" + g2);
    void 0 !== a2.key && (e2 = "" + a2.key);
    void 0 !== a2.ref && (h2 = a2.ref);
    for (b2 in a2) m2.call(a2, b2) && !p2.hasOwnProperty(b2) && (d2[b2] = a2[b2]);
    if (c2 && c2.defaultProps) for (b2 in a2 = c2.defaultProps, a2) void 0 === d2[b2] && (d2[b2] = a2[b2]);
    return { $$typeof: k2, type: c2, key: e2, ref: h2, props: d2, _owner: n2.current };
  }
  reactJsxRuntime_production_min.Fragment = l2;
  reactJsxRuntime_production_min.jsx = q2;
  reactJsxRuntime_production_min.jsxs = q2;
  return reactJsxRuntime_production_min;
}
var reactJsxRuntime_development = {};
var hasRequiredReactJsxRuntime_development;
function requireReactJsxRuntime_development() {
  if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
  hasRequiredReactJsxRuntime_development = 1;
  if (process$1.env.NODE_ENV !== "production") {
    (function() {
      var React = C__default;
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type2) {
        if (typeof type2 === "string" || typeof type2 === "function") {
          return true;
        }
        if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type2 === "object" && type2 !== null) {
          if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type2) {
        return type2.displayName || "Context";
      }
      function getComponentNameFromType(type2) {
        if (type2 == null) {
          return null;
        }
        {
          if (typeof type2.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type2 === "function") {
          return type2.displayName || type2.name || null;
        }
        if (typeof type2 === "string") {
          return type2;
        }
        switch (type2) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type2 === "object") {
          switch (type2.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type2;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type2;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type2, type2.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type2.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type2.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x2) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name2, source, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x2) {
              var match = x2.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name2;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s2 = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
              c2--;
            }
            for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
              if (sampleLines[s2] !== controlLines[c2]) {
                if (s2 !== 1 || c2 !== 1) {
                  do {
                    s2--;
                    c2--;
                    if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                      var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s2 >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name2 = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
        if (type2 == null) {
          return "";
        }
        if (typeof type2 === "function") {
          {
            return describeNativeComponentFrame(type2, shouldConstruct(type2));
          }
        }
        if (typeof type2 === "string") {
          return describeBuiltInComponentFrame(type2);
        }
        switch (type2) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type2 === "object") {
          switch (type2.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type2.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type2;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x2) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty2);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a2) {
        return isArrayImpl(a2);
      }
      function typeName2(value3) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type2 = hasToStringTag && value3[Symbol.toStringTag] || value3.constructor.name || "Object";
          return type2;
        }
      }
      function willCoercionThrow(value3) {
        {
          try {
            testStringCoercion(value3);
            return false;
          } catch (e2) {
            return true;
          }
        }
      }
      function testStringCoercion(value3) {
        return "" + value3;
      }
      function checkKeyStringCoercion(value3) {
        {
          if (willCoercionThrow(value3)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName2(value3));
            return testStringCoercion(value3);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty2.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty2.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self2) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type2, key2, ref2, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE,
          // Built-in properties that belong on the element
          type: type2,
          key: key2,
          ref: ref2,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type2, config, maybeKey, source, self2) {
        {
          var propName;
          var props = {};
          var key2 = null;
          var ref2 = null;
          if (maybeKey !== void 0) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key2 = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key2 = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref2 = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self2);
          }
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key2 || ref2) {
            var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
            if (key2) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref2) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type2, key2, ref2, self2, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement2(object3) {
        {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name2 = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name2) {
              return "\n\nCheck the render method of `" + name2 + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray(node2)) {
            for (var i2 = 0; i2 < node2.length; i2++) {
              var child = node2[i2];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type2 = element.type;
          if (type2 === null || type2 === void 0 || typeof type2 === "string") {
            return;
          }
          var propTypes;
          if (typeof type2 === "function") {
            propTypes = type2.propTypes;
          } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type2.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type2.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name2 = getComponentNameFromType(type2);
            checkPropTypes(propTypes, element.props, "prop", name2, element);
          } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type2);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys.length; i2++) {
            var key2 = keys[i2];
            if (key2 !== "children" && key2 !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      var didWarnAboutKeySpread = {};
      function jsxWithValidation(type2, props, key2, isStaticChildren, source, self2) {
        {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum();
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type2 === null) {
              typeString = "null";
            } else if (isArray(type2)) {
              typeString = "array";
            } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type2;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type2, props, key2, source, self2);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== void 0) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    validateChildKeys(children[i2], type2);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type2);
              }
            }
          }
          {
            if (hasOwnProperty2.call(props, "key")) {
              var componentName = getComponentNameFromType(type2);
              var keys = Object.keys(props).filter(function(k2) {
                return k2 !== "key";
              });
              var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
              if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
              }
            }
          }
          if (type2 === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      function jsxWithValidationStatic(type2, props, key2) {
        {
          return jsxWithValidation(type2, props, key2, true);
        }
      }
      function jsxWithValidationDynamic(type2, props, key2) {
        {
          return jsxWithValidation(type2, props, key2, false);
        }
      }
      var jsx = jsxWithValidationDynamic;
      var jsxs = jsxWithValidationStatic;
      reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
      reactJsxRuntime_development.jsx = jsx;
      reactJsxRuntime_development.jsxs = jsxs;
    })();
  }
  return reactJsxRuntime_development;
}
if (process$1.env.NODE_ENV === "production") {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}
var jsxRuntimeExports = jsxRuntime.exports;
function useHasMounted() {
  const [hasMounted, setHasMounted] = useState(false);
  useEffect(() => {
    setHasMounted(true);
  }, []);
  return hasMounted;
}
const KEY_PREFIX = "wallie";
function isBrowser() {
  return typeof window !== "undefined";
}
function getItemFromLocalStorage(_key) {
  if (!isBrowser()) {
    return null;
  }
  if (typeof window === "undefined") {
    console.warn(
      `Attempted to read local storage key ${_key} even though environment is not a browser.`
    );
  }
  const key2 = `${KEY_PREFIX}_${_key}`;
  try {
    const value3 = window.localStorage.getItem(key2);
    return value3 !== null && value3 !== void 0 ? JSON.parse(value3) : null;
  } catch (error) {
    console.error(`Error retrieving ${key2} from localStorage`, error);
    return null;
  }
}
function setItemToLocalStorage(_key, value3) {
  if (!isBrowser()) {
    return;
  }
  if (typeof window === "undefined") {
    console.warn(
      `Attempted to set local storage key ${_key} even though environment is not a browser.`
    );
  }
  const key2 = `${KEY_PREFIX}_${_key}`;
  try {
    if (value3) {
      window.localStorage.setItem(key2, JSON.stringify(value3));
    } else {
      window.localStorage.removeItem(key2);
    }
  } catch (error) {
    console.error(`Error saving ${key2} to localStorage`, error);
  }
}
function useLocalStorage(key2, initialValue, options = {}) {
  const { initializeWithValue = true } = options;
  const readValue = useCallback(() => {
    const value3 = getItemFromLocalStorage(key2);
    if (!value3) {
      setItemToLocalStorage(key2, initialValue);
      return initialValue;
    }
    return value3;
  }, [initialValue, key2]);
  const [state2, setInnerState] = useState(() => {
    if (initializeWithValue) {
      return readValue();
    }
    return initialValue;
  });
  const setState = useCallback(
    (newValue) => {
      setItemToLocalStorage(key2, newValue);
      setInnerState(newValue);
    },
    [key2]
  );
  useEffect(() => {
    setInnerState(readValue());
  }, [key2]);
  return [state2, setState];
}
var Network = /* @__PURE__ */ ((Network2) => {
  Network2["MAINNET"] = "mainnet";
  Network2["TESTNET"] = "testnet";
  Network2["SIGNET"] = "signet";
  return Network2;
})(Network || {});
var Wallet = /* @__PURE__ */ ((Wallet2) => {
  Wallet2["UNISAT"] = "unisat";
  Wallet2["XVERSE"] = "xverse";
  Wallet2["MAGICEDEN"] = "magiceden";
  Wallet2["LEATHER"] = "leather";
  Wallet2["OKX"] = "okx";
  return Wallet2;
})(Wallet || {});
const EMPTY_BIADDRESS_OBJECT = {
  payments: null,
  ordinals: null
};
const WallieContext = createContext(void 0);
const ADDRESS = "address";
const WALLET = "wallet";
const PUBLIC_KEY = "publicKey";
const FORMAT = "format";
function WallieProvider({
  children,
  initialNetwork,
  ssr = false
}) {
  if (!initialNetwork) {
    throw new Error("Initial network cannot be empty");
  }
  const [network, setNetwork] = useState(initialNetwork);
  const [address2, setAddress] = useLocalStorage(
    ADDRESS,
    EMPTY_BIADDRESS_OBJECT,
    { initializeWithValue: !ssr }
  );
  const [wallet, setWallet] = useLocalStorage(WALLET, null, {
    initializeWithValue: !ssr
  });
  const [publicKey, setPublicKey] = useLocalStorage(
    PUBLIC_KEY,
    EMPTY_BIADDRESS_OBJECT,
    { initializeWithValue: !ssr }
  );
  const [format, setFormat] = useLocalStorage(
    FORMAT,
    EMPTY_BIADDRESS_OBJECT,
    { initializeWithValue: !ssr }
  );
  const [isModalOpen, setIsModalOpen] = useState(false);
  const openModal = useCallback(() => setIsModalOpen(true), []);
  const closeModal = useCallback(() => setIsModalOpen(false), []);
  const disconnectWallet = useCallback(() => {
    setAddress(EMPTY_BIADDRESS_OBJECT);
    setPublicKey(EMPTY_BIADDRESS_OBJECT);
    setFormat(EMPTY_BIADDRESS_OBJECT);
    setWallet(null);
  }, [setAddress, setFormat, setPublicKey, setWallet]);
  const context = useMemo(
    () => ({
      address: address2,
      updateAddress: setAddress,
      publicKey,
      updatePublicKey: setPublicKey,
      network,
      updateNetwork: setNetwork,
      wallet,
      updateWallet: setWallet,
      isModalOpen,
      openModal,
      closeModal,
      format,
      updateFormat: setFormat,
      disconnectWallet
    }),
    [
      address2,
      setAddress,
      publicKey,
      setPublicKey,
      network,
      setNetwork,
      wallet,
      setWallet,
      isModalOpen,
      openModal,
      closeModal,
      format,
      setFormat,
      disconnectWallet
    ]
  );
  useEffect(() => {
    setNetwork(initialNetwork);
  }, [initialNetwork]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(WallieContext.Provider, { value: context, children });
}
function useWallie() {
  const context = useContext(WallieContext);
  if (!context) {
    throw new Error("useWallie must be used within WallieProvider");
  }
  return context;
}
var i$7 = Object.defineProperty;
var d$6 = (t2, e2, n2) => e2 in t2 ? i$7(t2, e2, { enumerable: true, configurable: true, writable: true, value: n2 }) : t2[e2] = n2;
var r$4 = (t2, e2, n2) => (d$6(t2, typeof e2 != "symbol" ? e2 + "" : e2, n2), n2);
let o$7 = class o2 {
  constructor() {
    r$4(this, "current", this.detect());
    r$4(this, "handoffState", "pending");
    r$4(this, "currentId", 0);
  }
  set(e2) {
    this.current !== e2 && (this.handoffState = "pending", this.currentId = 0, this.current = e2);
  }
  reset() {
    this.set(this.detect());
  }
  nextId() {
    return ++this.currentId;
  }
  get isServer() {
    return this.current === "server";
  }
  get isClient() {
    return this.current === "client";
  }
  detect() {
    return typeof window == "undefined" || typeof document == "undefined" ? "server" : "client";
  }
  handoff() {
    this.handoffState === "pending" && (this.handoffState = "complete");
  }
  get isHandoffComplete() {
    return this.handoffState === "complete";
  }
};
let s$a = new o$7();
let l$6 = (e2, f2) => {
  s$a.isServer ? useEffect(e2, f2) : useLayoutEffect(e2, f2);
};
function s$9(e2) {
  let r2 = useRef(e2);
  return l$6(() => {
    r2.current = e2;
  }, [e2]), r2;
}
let o$6 = function(t2) {
  let e2 = s$9(t2);
  return C__default.useCallback((...r2) => e2.current(...r2), [e2]);
};
function t$8(e2) {
  typeof queueMicrotask == "function" ? queueMicrotask(e2) : Promise.resolve().then(e2).catch((o3) => setTimeout(() => {
    throw o3;
  }));
}
function o$5() {
  let n2 = [], r2 = { addEventListener(e2, t2, s2, a2) {
    return e2.addEventListener(t2, s2, a2), r2.add(() => e2.removeEventListener(t2, s2, a2));
  }, requestAnimationFrame(...e2) {
    let t2 = requestAnimationFrame(...e2);
    return r2.add(() => cancelAnimationFrame(t2));
  }, nextFrame(...e2) {
    return r2.requestAnimationFrame(() => r2.requestAnimationFrame(...e2));
  }, setTimeout(...e2) {
    let t2 = setTimeout(...e2);
    return r2.add(() => clearTimeout(t2));
  }, microTask(...e2) {
    let t2 = { current: true };
    return t$8(() => {
      t2.current && e2[0]();
    }), r2.add(() => {
      t2.current = false;
    });
  }, style(e2, t2, s2) {
    let a2 = e2.style.getPropertyValue(t2);
    return Object.assign(e2.style, { [t2]: s2 }), this.add(() => {
      Object.assign(e2.style, { [t2]: a2 });
    });
  }, group(e2) {
    let t2 = o$5();
    return e2(t2), this.add(() => t2.dispose());
  }, add(e2) {
    return n2.push(e2), () => {
      let t2 = n2.indexOf(e2);
      if (t2 >= 0) for (let s2 of n2.splice(t2, 1)) s2();
    };
  }, dispose() {
    for (let e2 of n2.splice(0)) e2();
  } };
  return r2;
}
function p$4() {
  let [e2] = useState(o$5);
  return useEffect(() => () => e2.dispose(), [e2]), e2;
}
function s$8() {
  let r2 = typeof document == "undefined";
  return "useSyncExternalStore" in C$3 ? ((o3) => o3.useSyncExternalStore)(C$3)(() => () => {
  }, () => false, () => !r2) : false;
}
function l$5() {
  let r2 = s$8(), [e2, n2] = C$3.useState(s$a.isHandoffComplete);
  return e2 && s$a.isHandoffComplete === false && n2(false), C$3.useEffect(() => {
    e2 !== true && n2(true);
  }, [e2]), C$3.useEffect(() => s$a.handoff(), []), r2 ? false : e2;
}
var o$4;
let I$6 = (o$4 = C__default.useId) != null ? o$4 : function() {
  let n2 = l$5(), [e2, u2] = C__default.useState(n2 ? () => s$a.nextId() : null);
  return l$6(() => {
    e2 === null && u2(s$a.nextId());
  }, [e2]), e2 != null ? "" + e2 : void 0;
};
function u$7(r2, n2, ...a2) {
  if (r2 in n2) {
    let e2 = n2[r2];
    return typeof e2 == "function" ? e2(...a2) : e2;
  }
  let t2 = new Error(`Tried to handle "${r2}" but there is no handler defined. Only defined handlers are: ${Object.keys(n2).map((e2) => `"${e2}"`).join(", ")}.`);
  throw Error.captureStackTrace && Error.captureStackTrace(t2, u$7), t2;
}
function o$3(r2) {
  return s$a.isServer ? null : r2 instanceof Node ? r2.ownerDocument : r2 != null && r2.hasOwnProperty("current") && r2.current instanceof Node ? r2.current.ownerDocument : document;
}
let c$6 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map((e2) => `${e2}:not([tabindex='-1'])`).join(",");
var M$2 = ((n2) => (n2[n2.First = 1] = "First", n2[n2.Previous = 2] = "Previous", n2[n2.Next = 4] = "Next", n2[n2.Last = 8] = "Last", n2[n2.WrapAround = 16] = "WrapAround", n2[n2.NoScroll = 32] = "NoScroll", n2))(M$2 || {}), N$2 = ((o3) => (o3[o3.Error = 0] = "Error", o3[o3.Overflow = 1] = "Overflow", o3[o3.Success = 2] = "Success", o3[o3.Underflow = 3] = "Underflow", o3))(N$2 || {}), F$3 = ((t2) => (t2[t2.Previous = -1] = "Previous", t2[t2.Next = 1] = "Next", t2))(F$3 || {});
function f$7(e2 = document.body) {
  return e2 == null ? [] : Array.from(e2.querySelectorAll(c$6)).sort((r2, t2) => Math.sign((r2.tabIndex || Number.MAX_SAFE_INTEGER) - (t2.tabIndex || Number.MAX_SAFE_INTEGER)));
}
var T$2 = ((t2) => (t2[t2.Strict = 0] = "Strict", t2[t2.Loose = 1] = "Loose", t2))(T$2 || {});
function h$6(e2, r2 = 0) {
  var t2;
  return e2 === ((t2 = o$3(e2)) == null ? void 0 : t2.body) ? false : u$7(r2, { [0]() {
    return e2.matches(c$6);
  }, [1]() {
    let l2 = e2;
    for (; l2 !== null; ) {
      if (l2.matches(c$6)) return true;
      l2 = l2.parentElement;
    }
    return false;
  } });
}
function D$3(e2) {
  let r2 = o$3(e2);
  o$5().nextFrame(() => {
    r2 && !h$6(r2.activeElement, 0) && y$4(e2);
  });
}
var w$3 = ((t2) => (t2[t2.Keyboard = 0] = "Keyboard", t2[t2.Mouse = 1] = "Mouse", t2))(w$3 || {});
typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("keydown", (e2) => {
  e2.metaKey || e2.altKey || e2.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = "");
}, true), document.addEventListener("click", (e2) => {
  e2.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : e2.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = "");
}, true));
function y$4(e2) {
  e2 == null || e2.focus({ preventScroll: true });
}
let S$5 = ["textarea", "input"].join(",");
function H(e2) {
  var r2, t2;
  return (t2 = (r2 = e2 == null ? void 0 : e2.matches) == null ? void 0 : r2.call(e2, S$5)) != null ? t2 : false;
}
function I$5(e2, r2 = (t2) => t2) {
  return e2.slice().sort((t2, l2) => {
    let o3 = r2(t2), i2 = r2(l2);
    if (o3 === null || i2 === null) return 0;
    let n2 = o3.compareDocumentPosition(i2);
    return n2 & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : n2 & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0;
  });
}
function _$3(e2, r2) {
  return O$2(f$7(), r2, { relativeTo: e2 });
}
function O$2(e2, r2, { sorted: t2 = true, relativeTo: l2 = null, skipElements: o3 = [] } = {}) {
  let i2 = Array.isArray(e2) ? e2.length > 0 ? e2[0].ownerDocument : document : e2.ownerDocument, n2 = Array.isArray(e2) ? t2 ? I$5(e2) : e2 : f$7(e2);
  o3.length > 0 && n2.length > 1 && (n2 = n2.filter((s2) => !o3.includes(s2))), l2 = l2 != null ? l2 : i2.activeElement;
  let E2 = (() => {
    if (r2 & 5) return 1;
    if (r2 & 10) return -1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), x2 = (() => {
    if (r2 & 1) return 0;
    if (r2 & 2) return Math.max(0, n2.indexOf(l2)) - 1;
    if (r2 & 4) return Math.max(0, n2.indexOf(l2)) + 1;
    if (r2 & 8) return n2.length - 1;
    throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last");
  })(), p2 = r2 & 32 ? { preventScroll: true } : {}, d2 = 0, a2 = n2.length, u2;
  do {
    if (d2 >= a2 || d2 + a2 <= 0) return 0;
    let s2 = x2 + d2;
    if (r2 & 16) s2 = (s2 + a2) % a2;
    else {
      if (s2 < 0) return 3;
      if (s2 >= a2) return 1;
    }
    u2 = n2[s2], u2 == null || u2.focus(p2), d2 += E2;
  } while (u2 !== i2.activeElement);
  return r2 & 6 && H(u2) && u2.select(), 2;
}
function t$7() {
  return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0;
}
function i$6() {
  return /Android/gi.test(window.navigator.userAgent);
}
function n$4() {
  return t$7() || i$6();
}
function d$5(e2, r2, n2) {
  let o3 = s$9(r2);
  useEffect(() => {
    function t2(u2) {
      o3.current(u2);
    }
    return document.addEventListener(e2, t2, n2), () => document.removeEventListener(e2, t2, n2);
  }, [e2, n2]);
}
function s$7(e2, r2, n2) {
  let o3 = s$9(r2);
  useEffect(() => {
    function t2(i2) {
      o3.current(i2);
    }
    return window.addEventListener(e2, t2, n2), () => window.removeEventListener(e2, t2, n2);
  }, [e2, n2]);
}
function y$3(s2, m2, a2 = true) {
  let i2 = useRef(false);
  useEffect(() => {
    requestAnimationFrame(() => {
      i2.current = a2;
    });
  }, [a2]);
  function c2(e2, r2) {
    if (!i2.current || e2.defaultPrevented) return;
    let t2 = r2(e2);
    if (t2 === null || !t2.getRootNode().contains(t2) || !t2.isConnected) return;
    let E2 = function u2(n2) {
      return typeof n2 == "function" ? u2(n2()) : Array.isArray(n2) || n2 instanceof Set ? n2 : [n2];
    }(s2);
    for (let u2 of E2) {
      if (u2 === null) continue;
      let n2 = u2 instanceof HTMLElement ? u2 : u2.current;
      if (n2 != null && n2.contains(t2) || e2.composed && e2.composedPath().includes(n2)) return;
    }
    return !h$6(t2, T$2.Loose) && t2.tabIndex !== -1 && e2.preventDefault(), m2(e2, t2);
  }
  let o3 = useRef(null);
  d$5("pointerdown", (e2) => {
    var r2, t2;
    i2.current && (o3.current = ((t2 = (r2 = e2.composedPath) == null ? void 0 : r2.call(e2)) == null ? void 0 : t2[0]) || e2.target);
  }, true), d$5("mousedown", (e2) => {
    var r2, t2;
    i2.current && (o3.current = ((t2 = (r2 = e2.composedPath) == null ? void 0 : r2.call(e2)) == null ? void 0 : t2[0]) || e2.target);
  }, true), d$5("click", (e2) => {
    n$4() || o3.current && (c2(e2, () => o3.current), o3.current = null);
  }, true), d$5("touchend", (e2) => c2(e2, () => e2.target instanceof HTMLElement ? e2.target : null), true), s$7("blur", (e2) => c2(e2, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), true);
}
function n$3(...e2) {
  return useMemo(() => o$3(...e2), [...e2]);
}
function i$5(t2) {
  var n2;
  if (t2.type) return t2.type;
  let e2 = (n2 = t2.as) != null ? n2 : "button";
  if (typeof e2 == "string" && e2.toLowerCase() === "button") return "button";
}
function T$1(t2, e2) {
  let [n2, u2] = useState(() => i$5(t2));
  return l$6(() => {
    u2(i$5(t2));
  }, [t2.type, t2.as]), l$6(() => {
    n2 || e2.current && e2.current instanceof HTMLButtonElement && !e2.current.hasAttribute("type") && u2("button");
  }, [n2, e2]), n2;
}
let u$6 = Symbol();
function T(t2, n2 = true) {
  return Object.assign(t2, { [u$6]: n2 });
}
function y$2(...t2) {
  let n2 = useRef(t2);
  useEffect(() => {
    n2.current = t2;
  }, [t2]);
  let c2 = o$6((e2) => {
    for (let o3 of n2.current) o3 != null && (typeof o3 == "function" ? o3(e2) : o3.current = e2);
  });
  return t2.every((e2) => e2 == null || (e2 == null ? void 0 : e2[u$6])) ? void 0 : c2;
}
function t$6(e2) {
  return [e2.screenX, e2.screenY];
}
function u$5() {
  let e2 = useRef([-1, -1]);
  return { wasMoved(r2) {
    let n2 = t$6(r2);
    return e2.current[0] === n2[0] && e2.current[1] === n2[1] ? false : (e2.current = n2, true);
  }, update(r2) {
    e2.current = t$6(r2);
  } };
}
function F$2({ container: e2, accept: t2, walk: r2, enabled: c2 = true }) {
  let o3 = useRef(t2), l2 = useRef(r2);
  useEffect(() => {
    o3.current = t2, l2.current = r2;
  }, [t2, r2]), l$6(() => {
    if (!e2 || !c2) return;
    let n2 = o$3(e2);
    if (!n2) return;
    let f2 = o3.current, p2 = l2.current, d2 = Object.assign((i2) => f2(i2), { acceptNode: f2 }), u2 = n2.createTreeWalker(e2, NodeFilter.SHOW_ELEMENT, d2, false);
    for (; u2.nextNode(); ) p2(u2.currentNode);
  }, [e2, c2, o3, l2]);
}
function m$3(u2, t2) {
  let e2 = useRef([]), r2 = o$6(u2);
  useEffect(() => {
    let o3 = [...e2.current];
    for (let [n2, a2] of t2.entries()) if (e2.current[n2] !== a2) {
      let l2 = r2(t2, o3);
      return e2.current = t2, l2;
    }
  }, [r2, ...t2]);
}
function t$5(...r2) {
  return Array.from(new Set(r2.flatMap((n2) => typeof n2 == "string" ? n2.split(" ") : []))).filter(Boolean).join(" ");
}
var O$1 = ((n2) => (n2[n2.None = 0] = "None", n2[n2.RenderStrategy = 1] = "RenderStrategy", n2[n2.Static = 2] = "Static", n2))(O$1 || {}), v$2 = ((e2) => (e2[e2.Unmount = 0] = "Unmount", e2[e2.Hidden = 1] = "Hidden", e2))(v$2 || {});
function C$2({ ourProps: r2, theirProps: t2, slot: e2, defaultTag: n2, features: o3, visible: a2 = true, name: f2, mergeRefs: l2 }) {
  l2 = l2 != null ? l2 : k$1;
  let s2 = R(t2, r2);
  if (a2) return m$2(s2, e2, n2, f2, l2);
  let y2 = o3 != null ? o3 : 0;
  if (y2 & 2) {
    let { static: u2 = false, ...d2 } = s2;
    if (u2) return m$2(d2, e2, n2, f2, l2);
  }
  if (y2 & 1) {
    let { unmount: u2 = true, ...d2 } = s2;
    return u$7(u2 ? 0 : 1, { [0]() {
      return null;
    }, [1]() {
      return m$2({ ...d2, hidden: true, style: { display: "none" } }, e2, n2, f2, l2);
    } });
  }
  return m$2(s2, e2, n2, f2, l2);
}
function m$2(r2, t2 = {}, e2, n2, o3) {
  let { as: a2 = e2, children: f2, refName: l2 = "ref", ...s2 } = F$1(r2, ["unmount", "static"]), y2 = r2.ref !== void 0 ? { [l2]: r2.ref } : {}, u2 = typeof f2 == "function" ? f2(t2) : f2;
  "className" in s2 && s2.className && typeof s2.className == "function" && (s2.className = s2.className(t2));
  let d2 = {};
  if (t2) {
    let i2 = false, c2 = [];
    for (let [T2, p2] of Object.entries(t2)) typeof p2 == "boolean" && (i2 = true), p2 === true && c2.push(T2);
    i2 && (d2["data-headlessui-state"] = c2.join(" "));
  }
  if (a2 === Fragment && Object.keys(x$2(s2)).length > 0) {
    if (!isValidElement(u2) || Array.isArray(u2) && u2.length > 1) throw new Error(['Passing props on "Fragment"!', "", `The current component <${n2} /> is rendering a "Fragment".`, "However we need to passthrough the following props:", Object.keys(s2).map((p2) => `  - ${p2}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".', "Render a single element as the child so that we can forward the props onto that element."].map((p2) => `  - ${p2}`).join(`
`)].join(`
`));
    let i2 = u2.props, c2 = typeof (i2 == null ? void 0 : i2.className) == "function" ? (...p2) => t$5(i2 == null ? void 0 : i2.className(...p2), s2.className) : t$5(i2 == null ? void 0 : i2.className, s2.className), T2 = c2 ? { className: c2 } : {};
    return cloneElement(u2, Object.assign({}, R(u2.props, x$2(F$1(s2, ["ref"]))), d2, y2, { ref: o3(u2.ref, y2.ref) }, T2));
  }
  return createElement(a2, Object.assign({}, F$1(s2, ["ref"]), a2 !== Fragment && y2, a2 !== Fragment && d2), u2);
}
function k$1(...r2) {
  return r2.every((t2) => t2 == null) ? void 0 : (t2) => {
    for (let e2 of r2) e2 != null && (typeof e2 == "function" ? e2(t2) : e2.current = t2);
  };
}
function R(...r2) {
  if (r2.length === 0) return {};
  if (r2.length === 1) return r2[0];
  let t2 = {}, e2 = {};
  for (let o3 of r2) for (let a2 in o3) a2.startsWith("on") && typeof o3[a2] == "function" ? (e2[a2] != null || (e2[a2] = []), e2[a2].push(o3[a2])) : t2[a2] = o3[a2];
  if (t2.disabled || t2["aria-disabled"]) return Object.assign(t2, Object.fromEntries(Object.keys(e2).map((o3) => [o3, void 0])));
  for (let o3 in e2) Object.assign(t2, { [o3](a2, ...f2) {
    let l2 = e2[o3];
    for (let s2 of l2) {
      if ((a2 instanceof Event || (a2 == null ? void 0 : a2.nativeEvent) instanceof Event) && a2.defaultPrevented) return;
      s2(a2, ...f2);
    }
  } });
  return t2;
}
function U$3(r2) {
  var t2;
  return Object.assign(forwardRef(r2), { displayName: (t2 = r2.displayName) != null ? t2 : r2.name });
}
function x$2(r2) {
  let t2 = Object.assign({}, r2);
  for (let e2 in t2) t2[e2] === void 0 && delete t2[e2];
  return t2;
}
function F$1(r2, t2 = []) {
  let e2 = Object.assign({}, r2);
  for (let n2 of t2) n2 in e2 && delete e2[n2];
  return e2;
}
let p$3 = "div";
var s$6 = ((e2) => (e2[e2.None = 1] = "None", e2[e2.Focusable = 2] = "Focusable", e2[e2.Hidden = 4] = "Hidden", e2))(s$6 || {});
function l$4(d2, o3) {
  var n2;
  let { features: t2 = 1, ...e2 } = d2, r2 = { ref: o3, "aria-hidden": (t2 & 2) === 2 ? true : (n2 = e2["aria-hidden"]) != null ? n2 : void 0, hidden: (t2 & 4) === 4 ? true : void 0, style: { position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0", ...(t2 & 4) === 4 && (t2 & 2) !== 2 && { display: "none" } } };
  return C$2({ ourProps: r2, theirProps: e2, slot: {}, defaultTag: p$3, name: "Hidden" });
}
let u$4 = U$3(l$4);
let n$2 = createContext(null);
n$2.displayName = "OpenClosedContext";
var d$4 = ((e2) => (e2[e2.Open = 1] = "Open", e2[e2.Closed = 2] = "Closed", e2[e2.Closing = 4] = "Closing", e2[e2.Opening = 8] = "Opening", e2))(d$4 || {});
function u$3() {
  return useContext(n$2);
}
function s$5({ value: o3, children: r2 }) {
  return C__default.createElement(n$2.Provider, { value: o3 }, r2);
}
function t$4(n2) {
  function e2() {
    document.readyState !== "loading" && (n2(), document.removeEventListener("DOMContentLoaded", e2));
  }
  typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("DOMContentLoaded", e2), e2());
}
let t$3 = [];
t$4(() => {
  function e2(n2) {
    n2.target instanceof HTMLElement && n2.target !== document.body && t$3[0] !== n2.target && (t$3.unshift(n2.target), t$3 = t$3.filter((r2) => r2 != null && r2.isConnected), t$3.splice(10));
  }
  window.addEventListener("click", e2, { capture: true }), window.addEventListener("mousedown", e2, { capture: true }), window.addEventListener("focus", e2, { capture: true }), document.body.addEventListener("click", e2, { capture: true }), document.body.addEventListener("mousedown", e2, { capture: true }), document.body.addEventListener("focus", e2, { capture: true });
});
function r$3(n2) {
  let e2 = n2.parentElement, l2 = null;
  for (; e2 && !(e2 instanceof HTMLFieldSetElement); ) e2 instanceof HTMLLegendElement && (l2 = e2), e2 = e2.parentElement;
  let t2 = (e2 == null ? void 0 : e2.getAttribute("disabled")) === "";
  return t2 && i$4(l2) ? false : t2;
}
function i$4(n2) {
  if (!n2) return false;
  let e2 = n2.previousElementSibling;
  for (; e2 !== null; ) {
    if (e2 instanceof HTMLLegendElement) return false;
    e2 = e2.previousElementSibling;
  }
  return true;
}
function u$2(l2) {
  throw new Error("Unexpected object: " + l2);
}
var c$5 = ((i2) => (i2[i2.First = 0] = "First", i2[i2.Previous = 1] = "Previous", i2[i2.Next = 2] = "Next", i2[i2.Last = 3] = "Last", i2[i2.Specific = 4] = "Specific", i2[i2.Nothing = 5] = "Nothing", i2))(c$5 || {});
function f$6(l2, n2) {
  let t2 = n2.resolveItems();
  if (t2.length <= 0) return null;
  let r2 = n2.resolveActiveIndex(), s2 = r2 != null ? r2 : -1;
  switch (l2.focus) {
    case 0: {
      for (let e2 = 0; e2 < t2.length; ++e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;
      return r2;
    }
    case 1: {
      for (let e2 = s2 - 1; e2 >= 0; --e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;
      return r2;
    }
    case 2: {
      for (let e2 = s2 + 1; e2 < t2.length; ++e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;
      return r2;
    }
    case 3: {
      for (let e2 = t2.length - 1; e2 >= 0; --e2) if (!n2.resolveDisabled(t2[e2], e2, t2)) return e2;
      return r2;
    }
    case 4: {
      for (let e2 = 0; e2 < t2.length; ++e2) if (n2.resolveId(t2[e2], e2, t2) === l2.id) return e2;
      return r2;
    }
    case 5:
      return null;
    default:
      u$2(l2);
  }
}
var o$2 = ((r2) => (r2.Space = " ", r2.Enter = "Enter", r2.Escape = "Escape", r2.Backspace = "Backspace", r2.Delete = "Delete", r2.ArrowLeft = "ArrowLeft", r2.ArrowUp = "ArrowUp", r2.ArrowRight = "ArrowRight", r2.ArrowDown = "ArrowDown", r2.Home = "Home", r2.End = "End", r2.PageUp = "PageUp", r2.PageDown = "PageDown", r2.Tab = "Tab", r2))(o$2 || {});
function E$1(n2, e2, a2, t2) {
  let i2 = s$9(a2);
  useEffect(() => {
    n2 = n2 != null ? n2 : window;
    function r2(o3) {
      i2.current(o3);
    }
    return n2.addEventListener(e2, r2, t2), () => n2.removeEventListener(e2, r2, t2);
  }, [n2, e2, t2]);
}
function f$5() {
  let e2 = useRef(false);
  return l$6(() => (e2.current = true, () => {
    e2.current = false;
  }), []), e2;
}
function c$4(t2) {
  let r2 = o$6(t2), e2 = useRef(false);
  useEffect(() => (e2.current = false, () => {
    e2.current = true, t$8(() => {
      e2.current && r2();
    });
  }), [r2]);
}
var s$4 = ((r2) => (r2[r2.Forwards = 0] = "Forwards", r2[r2.Backwards = 1] = "Backwards", r2))(s$4 || {});
function n$1() {
  let e2 = useRef(0);
  return s$7("keydown", (o3) => {
    o3.key === "Tab" && (e2.current = o3.shiftKey ? 1 : 0);
  }, true), e2;
}
function P(t2) {
  if (!t2) return /* @__PURE__ */ new Set();
  if (typeof t2 == "function") return new Set(t2());
  let n2 = /* @__PURE__ */ new Set();
  for (let e2 of t2.current) e2.current instanceof HTMLElement && n2.add(e2.current);
  return n2;
}
let X = "div";
var _$2 = ((r2) => (r2[r2.None = 1] = "None", r2[r2.InitialFocus = 2] = "InitialFocus", r2[r2.TabLock = 4] = "TabLock", r2[r2.FocusLock = 8] = "FocusLock", r2[r2.RestoreFocus = 16] = "RestoreFocus", r2[r2.All = 30] = "All", r2))(_$2 || {});
function z$1(t2, n2) {
  let e2 = useRef(null), o3 = y$2(e2, n2), { initialFocus: l2, containers: c2, features: r2 = 30, ...s2 } = t2;
  l$5() || (r2 = 1);
  let i2 = n$3(e2);
  Y({ ownerDocument: i2 }, Boolean(r2 & 16));
  let u2 = Z({ ownerDocument: i2, container: e2, initialFocus: l2 }, Boolean(r2 & 2));
  $({ ownerDocument: i2, container: e2, containers: c2, previousActiveElement: u2 }, Boolean(r2 & 8));
  let y2 = n$1(), R2 = o$6((a2) => {
    let m2 = e2.current;
    if (!m2) return;
    ((B) => B())(() => {
      u$7(y2.current, { [s$4.Forwards]: () => {
        O$2(m2, M$2.First, { skipElements: [a2.relatedTarget] });
      }, [s$4.Backwards]: () => {
        O$2(m2, M$2.Last, { skipElements: [a2.relatedTarget] });
      } });
    });
  }), h2 = p$4(), H2 = useRef(false), j2 = { ref: o3, onKeyDown(a2) {
    a2.key == "Tab" && (H2.current = true, h2.requestAnimationFrame(() => {
      H2.current = false;
    }));
  }, onBlur(a2) {
    let m2 = P(c2);
    e2.current instanceof HTMLElement && m2.add(e2.current);
    let T2 = a2.relatedTarget;
    T2 instanceof HTMLElement && T2.dataset.headlessuiFocusGuard !== "true" && (S$4(m2, T2) || (H2.current ? O$2(e2.current, u$7(y2.current, { [s$4.Forwards]: () => M$2.Next, [s$4.Backwards]: () => M$2.Previous }) | M$2.WrapAround, { relativeTo: a2.target }) : a2.target instanceof HTMLElement && y$4(a2.target)));
  } };
  return C__default.createElement(C__default.Fragment, null, Boolean(r2 & 4) && C__default.createElement(u$4, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: R2, features: s$6.Focusable }), C$2({ ourProps: j2, theirProps: s2, defaultTag: X, name: "FocusTrap" }), Boolean(r2 & 4) && C__default.createElement(u$4, { as: "button", type: "button", "data-headlessui-focus-guard": true, onFocus: R2, features: s$6.Focusable }));
}
let D$2 = U$3(z$1), de$1 = Object.assign(D$2, { features: _$2 });
function Q(t2 = true) {
  let n2 = useRef(t$3.slice());
  return m$3(([e2], [o3]) => {
    o3 === true && e2 === false && t$8(() => {
      n2.current.splice(0);
    }), o3 === false && e2 === true && (n2.current = t$3.slice());
  }, [t2, t$3, n2]), o$6(() => {
    var e2;
    return (e2 = n2.current.find((o3) => o3 != null && o3.isConnected)) != null ? e2 : null;
  });
}
function Y({ ownerDocument: t2 }, n2) {
  let e2 = Q(n2);
  m$3(() => {
    n2 || (t2 == null ? void 0 : t2.activeElement) === (t2 == null ? void 0 : t2.body) && y$4(e2());
  }, [n2]), c$4(() => {
    n2 && y$4(e2());
  });
}
function Z({ ownerDocument: t2, container: n2, initialFocus: e2 }, o3) {
  let l2 = useRef(null), c2 = f$5();
  return m$3(() => {
    if (!o3) return;
    let r2 = n2.current;
    r2 && t$8(() => {
      if (!c2.current) return;
      let s2 = t2 == null ? void 0 : t2.activeElement;
      if (e2 != null && e2.current) {
        if ((e2 == null ? void 0 : e2.current) === s2) {
          l2.current = s2;
          return;
        }
      } else if (r2.contains(s2)) {
        l2.current = s2;
        return;
      }
      e2 != null && e2.current ? y$4(e2.current) : O$2(r2, M$2.First) === N$2.Error && console.warn("There are no focusable elements inside the <FocusTrap />"), l2.current = t2 == null ? void 0 : t2.activeElement;
    });
  }, [o3]), l2;
}
function $({ ownerDocument: t2, container: n2, containers: e2, previousActiveElement: o3 }, l2) {
  let c2 = f$5();
  E$1(t2 == null ? void 0 : t2.defaultView, "focus", (r2) => {
    if (!l2 || !c2.current) return;
    let s2 = P(e2);
    n2.current instanceof HTMLElement && s2.add(n2.current);
    let i2 = o3.current;
    if (!i2) return;
    let u2 = r2.target;
    u2 && u2 instanceof HTMLElement ? S$4(s2, u2) ? (o3.current = u2, y$4(u2)) : (r2.preventDefault(), r2.stopPropagation(), y$4(i2)) : y$4(o3.current);
  }, true);
}
function S$4(t2, n2) {
  for (let e2 of t2) if (e2.contains(n2)) return true;
  return false;
}
let e$1 = createContext(false);
function a$6() {
  return useContext(e$1);
}
function l$3(o3) {
  return C__default.createElement(e$1.Provider, { value: o3.force }, o3.children);
}
function F(p2) {
  let n2 = a$6(), l2 = useContext(_$1), e2 = n$3(p2), [a2, o3] = useState(() => {
    if (!n2 && l2 !== null || s$a.isServer) return null;
    let t2 = e2 == null ? void 0 : e2.getElementById("headlessui-portal-root");
    if (t2) return t2;
    if (e2 === null) return null;
    let r2 = e2.createElement("div");
    return r2.setAttribute("id", "headlessui-portal-root"), e2.body.appendChild(r2);
  });
  return useEffect(() => {
    a2 !== null && (e2 != null && e2.body.contains(a2) || e2 == null || e2.body.appendChild(a2));
  }, [a2, e2]), useEffect(() => {
    n2 || l2 !== null && o3(l2.current);
  }, [l2, o3, n2]), a2;
}
let U$2 = Fragment;
function N$1(p2, n2) {
  let l2 = p2, e2 = useRef(null), a2 = y$2(T((u2) => {
    e2.current = u2;
  }), n2), o3 = n$3(e2), t2 = F(e2), [r2] = useState(() => {
    var u2;
    return s$a.isServer ? null : (u2 = o3 == null ? void 0 : o3.createElement("div")) != null ? u2 : null;
  }), i2 = useContext(f$4), v2 = l$5();
  return l$6(() => {
    !t2 || !r2 || t2.contains(r2) || (r2.setAttribute("data-headlessui-portal", ""), t2.appendChild(r2));
  }, [t2, r2]), l$6(() => {
    if (r2 && i2) return i2.register(r2);
  }, [i2, r2]), c$4(() => {
    var u2;
    !t2 || !r2 || (r2 instanceof Node && t2.contains(r2) && t2.removeChild(r2), t2.childNodes.length <= 0 && ((u2 = t2.parentElement) == null || u2.removeChild(t2)));
  }), v2 ? !t2 || !r2 ? null : createPortal(C$2({ ourProps: { ref: a2 }, theirProps: l2, defaultTag: U$2, name: "Portal" }), r2) : null;
}
let S$3 = Fragment, _$1 = createContext(null);
function j(p2, n2) {
  let { target: l2, ...e2 } = p2, o3 = { ref: y$2(n2) };
  return C__default.createElement(_$1.Provider, { value: l2 }, C$2({ ourProps: o3, theirProps: e2, defaultTag: S$3, name: "Popover.Group" }));
}
let f$4 = createContext(null);
function ee() {
  let p2 = useContext(f$4), n2 = useRef([]), l2 = o$6((o3) => (n2.current.push(o3), p2 && p2.register(o3), () => e2(o3))), e2 = o$6((o3) => {
    let t2 = n2.current.indexOf(o3);
    t2 !== -1 && n2.current.splice(t2, 1), p2 && p2.unregister(o3);
  }), a2 = useMemo(() => ({ register: l2, unregister: e2, portals: n2 }), [l2, e2, n2]);
  return [n2, useMemo(() => function({ children: t2 }) {
    return C__default.createElement(f$4.Provider, { value: a2 }, t2);
  }, [a2])];
}
let D$1 = U$3(N$1), I$4 = U$3(j), te = Object.assign(D$1, { Group: I$4 });
function i$3(e2, t2) {
  return e2 === t2 && (e2 !== 0 || 1 / e2 === 1 / t2) || e2 !== e2 && t2 !== t2;
}
const d$3 = typeof Object.is == "function" ? Object.is : i$3, { useState: u$1, useEffect: h$5, useLayoutEffect: f$3, useDebugValue: p$2 } = C$3;
function y$1(e2, t2, c2) {
  const a2 = t2(), [{ inst: n2 }, o3] = u$1({ inst: { value: a2, getSnapshot: t2 } });
  return f$3(() => {
    n2.value = a2, n2.getSnapshot = t2, r$2(n2) && o3({ inst: n2 });
  }, [e2, a2, t2]), h$5(() => (r$2(n2) && o3({ inst: n2 }), e2(() => {
    r$2(n2) && o3({ inst: n2 });
  })), [e2]), p$2(a2), a2;
}
function r$2(e2) {
  const t2 = e2.getSnapshot, c2 = e2.value;
  try {
    const a2 = t2();
    return !d$3(c2, a2);
  } catch {
    return true;
  }
}
function t$2(r2, e2, n2) {
  return e2();
}
const r$1 = typeof window != "undefined" && typeof window.document != "undefined" && typeof window.document.createElement != "undefined", s$3 = !r$1, c$3 = s$3 ? t$2 : y$1, a$5 = "useSyncExternalStore" in C$3 ? ((n2) => n2.useSyncExternalStore)(C$3) : c$3;
function S$2(t2) {
  return a$5(t2.subscribe, t2.getSnapshot, t2.getSnapshot);
}
function a$4(o3, r2) {
  let t2 = o3(), n2 = /* @__PURE__ */ new Set();
  return { getSnapshot() {
    return t2;
  }, subscribe(e2) {
    return n2.add(e2), () => n2.delete(e2);
  }, dispatch(e2, ...s2) {
    let i2 = r2[e2].call(t2, ...s2);
    i2 && (t2 = i2, n2.forEach((c2) => c2()));
  } };
}
function c$2() {
  let o3;
  return { before({ doc: e2 }) {
    var l2;
    let n2 = e2.documentElement;
    o3 = ((l2 = e2.defaultView) != null ? l2 : window).innerWidth - n2.clientWidth;
  }, after({ doc: e2, d: n2 }) {
    let t2 = e2.documentElement, l2 = t2.clientWidth - t2.offsetWidth, r2 = o3 - l2;
    n2.style(t2, "paddingRight", `${r2}px`);
  } };
}
function d$2() {
  return t$7() ? { before({ doc: r2, d: l2, meta: c2 }) {
    function o3(a2) {
      return c2.containers.flatMap((n2) => n2()).some((n2) => n2.contains(a2));
    }
    l2.microTask(() => {
      var s2;
      if (window.getComputedStyle(r2.documentElement).scrollBehavior !== "auto") {
        let t2 = o$5();
        t2.style(r2.documentElement, "scrollBehavior", "auto"), l2.add(() => l2.microTask(() => t2.dispose()));
      }
      let a2 = (s2 = window.scrollY) != null ? s2 : window.pageYOffset, n2 = null;
      l2.addEventListener(r2, "click", (t2) => {
        if (t2.target instanceof HTMLElement) try {
          let e2 = t2.target.closest("a");
          if (!e2) return;
          let { hash: f2 } = new URL(e2.href), i2 = r2.querySelector(f2);
          i2 && !o3(i2) && (n2 = i2);
        } catch {
        }
      }, true), l2.addEventListener(r2, "touchstart", (t2) => {
        if (t2.target instanceof HTMLElement) if (o3(t2.target)) {
          let e2 = t2.target;
          for (; e2.parentElement && o3(e2.parentElement); ) e2 = e2.parentElement;
          l2.style(e2, "overscrollBehavior", "contain");
        } else l2.style(t2.target, "touchAction", "none");
      }), l2.addEventListener(r2, "touchmove", (t2) => {
        if (t2.target instanceof HTMLElement) if (o3(t2.target)) {
          let e2 = t2.target;
          for (; e2.parentElement && e2.dataset.headlessuiPortal !== "" && !(e2.scrollHeight > e2.clientHeight || e2.scrollWidth > e2.clientWidth); ) e2 = e2.parentElement;
          e2.dataset.headlessuiPortal === "" && t2.preventDefault();
        } else t2.preventDefault();
      }, { passive: false }), l2.add(() => {
        var e2;
        let t2 = (e2 = window.scrollY) != null ? e2 : window.pageYOffset;
        a2 !== t2 && window.scrollTo(0, a2), n2 && n2.isConnected && (n2.scrollIntoView({ block: "nearest" }), n2 = null);
      });
    });
  } } : {};
}
function l$2() {
  return { before({ doc: e2, d: o3 }) {
    o3.style(e2.documentElement, "overflow", "hidden");
  } };
}
function m$1(e2) {
  let n2 = {};
  for (let t2 of e2) Object.assign(n2, t2(n2));
  return n2;
}
let a$3 = a$4(() => /* @__PURE__ */ new Map(), { PUSH(e2, n2) {
  var o3;
  let t2 = (o3 = this.get(e2)) != null ? o3 : { doc: e2, count: 0, d: o$5(), meta: /* @__PURE__ */ new Set() };
  return t2.count++, t2.meta.add(n2), this.set(e2, t2), this;
}, POP(e2, n2) {
  let t2 = this.get(e2);
  return t2 && (t2.count--, t2.meta.delete(n2)), this;
}, SCROLL_PREVENT({ doc: e2, d: n2, meta: t2 }) {
  let o3 = { doc: e2, d: n2, meta: m$1(t2) }, c2 = [d$2(), c$2(), l$2()];
  c2.forEach(({ before: r2 }) => r2 == null ? void 0 : r2(o3)), c2.forEach(({ after: r2 }) => r2 == null ? void 0 : r2(o3));
}, SCROLL_ALLOW({ d: e2 }) {
  e2.dispose();
}, TEARDOWN({ doc: e2 }) {
  this.delete(e2);
} });
a$3.subscribe(() => {
  let e2 = a$3.getSnapshot(), n2 = /* @__PURE__ */ new Map();
  for (let [t2] of e2) n2.set(t2, t2.documentElement.style.overflow);
  for (let t2 of e2.values()) {
    let o3 = n2.get(t2.doc) === "hidden", c2 = t2.count !== 0;
    (c2 && !o3 || !c2 && o3) && a$3.dispatch(t2.count > 0 ? "SCROLL_PREVENT" : "SCROLL_ALLOW", t2), t2.count === 0 && a$3.dispatch("TEARDOWN", t2);
  }
});
function p$1(e2, r2, n2) {
  let f2 = S$2(a$3), o3 = e2 ? f2.get(e2) : void 0, i2 = o3 ? o3.count > 0 : false;
  return l$6(() => {
    if (!(!e2 || !r2)) return a$3.dispatch("PUSH", e2, n2), () => a$3.dispatch("POP", e2, n2);
  }, [r2, e2]), i2;
}
let u = /* @__PURE__ */ new Map(), t$1 = /* @__PURE__ */ new Map();
function b$4(r2, l2 = true) {
  l$6(() => {
    var o3;
    if (!l2) return;
    let e2 = typeof r2 == "function" ? r2() : r2.current;
    if (!e2) return;
    function a2() {
      var d2;
      if (!e2) return;
      let i2 = (d2 = t$1.get(e2)) != null ? d2 : 1;
      if (i2 === 1 ? t$1.delete(e2) : t$1.set(e2, i2 - 1), i2 !== 1) return;
      let n2 = u.get(e2);
      n2 && (n2["aria-hidden"] === null ? e2.removeAttribute("aria-hidden") : e2.setAttribute("aria-hidden", n2["aria-hidden"]), e2.inert = n2.inert, u.delete(e2));
    }
    let f2 = (o3 = t$1.get(e2)) != null ? o3 : 0;
    return t$1.set(e2, f2 + 1), f2 !== 0 || (u.set(e2, { "aria-hidden": e2.getAttribute("aria-hidden"), inert: e2.inert }), e2.setAttribute("aria-hidden", "true"), e2.inert = true), a2;
  }, [r2, l2]);
}
function N({ defaultContainers: o3 = [], portals: r2, mainTreeNodeRef: u2 } = {}) {
  var f2;
  let t2 = useRef((f2 = u2 == null ? void 0 : u2.current) != null ? f2 : null), l2 = n$3(t2), c2 = o$6(() => {
    var i2, s2, a2;
    let n2 = [];
    for (let e2 of o3) e2 !== null && (e2 instanceof HTMLElement ? n2.push(e2) : "current" in e2 && e2.current instanceof HTMLElement && n2.push(e2.current));
    if (r2 != null && r2.current) for (let e2 of r2.current) n2.push(e2);
    for (let e2 of (i2 = l2 == null ? void 0 : l2.querySelectorAll("html > *, body > *")) != null ? i2 : []) e2 !== document.body && e2 !== document.head && e2 instanceof HTMLElement && e2.id !== "headlessui-portal-root" && (e2.contains(t2.current) || e2.contains((a2 = (s2 = t2.current) == null ? void 0 : s2.getRootNode()) == null ? void 0 : a2.host) || n2.some((L) => e2.contains(L)) || n2.push(e2));
    return n2;
  });
  return { resolveContainers: c2, contains: o$6((n2) => c2().some((i2) => i2.contains(n2))), mainTreeNodeRef: t2, MainTreeNode: useMemo(() => function() {
    return u2 != null ? null : C__default.createElement(u$4, { features: s$6.Hidden, ref: t2 });
  }, [t2, u2]) };
}
let a$2 = createContext(() => {
});
a$2.displayName = "StackContext";
var s$2 = ((e2) => (e2[e2.Add = 0] = "Add", e2[e2.Remove = 1] = "Remove", e2))(s$2 || {});
function x$1() {
  return useContext(a$2);
}
function b$3({ children: i2, onUpdate: r2, type: e2, element: n2, enabled: u2 }) {
  let l2 = x$1(), o3 = o$6((...t2) => {
    r2 == null || r2(...t2), l2(...t2);
  });
  return l$6(() => {
    let t2 = u2 === void 0 || u2 === true;
    return t2 && o3(0, e2, n2), () => {
      t2 && o3(1, e2, n2);
    };
  }, [o3, e2, n2, u2]), C__default.createElement(a$2.Provider, { value: o3 }, i2);
}
let d$1 = createContext(null);
function f$2() {
  let r2 = useContext(d$1);
  if (r2 === null) {
    let t2 = new Error("You used a <Description /> component, but it is not inside a relevant parent.");
    throw Error.captureStackTrace && Error.captureStackTrace(t2, f$2), t2;
  }
  return r2;
}
function w$2() {
  let [r2, t2] = useState([]);
  return [r2.length > 0 ? r2.join(" ") : void 0, useMemo(() => function(e2) {
    let i2 = o$6((s2) => (t2((o3) => [...o3, s2]), () => t2((o3) => {
      let p2 = o3.slice(), c2 = p2.indexOf(s2);
      return c2 !== -1 && p2.splice(c2, 1), p2;
    }))), n2 = useMemo(() => ({ register: i2, slot: e2.slot, name: e2.name, props: e2.props }), [i2, e2.slot, e2.name, e2.props]);
    return C__default.createElement(d$1.Provider, { value: n2 }, e2.children);
  }, [t2])];
}
let I$3 = "p";
function S$1(r2, t2) {
  let a2 = I$6(), { id: e2 = `headlessui-description-${a2}`, ...i2 } = r2, n2 = f$2(), s2 = y$2(t2);
  l$6(() => n2.register(e2), [e2, n2.register]);
  let o3 = { ref: s2, ...n2.props, id: e2 };
  return C$2({ ourProps: o3, theirProps: i2, slot: n2.slot || {}, defaultTag: I$3, name: n2.name || "Description" });
}
let h$4 = U$3(S$1), G = Object.assign(h$4, {});
var Me$1 = ((r2) => (r2[r2.Open = 0] = "Open", r2[r2.Closed = 1] = "Closed", r2))(Me$1 || {}), we = ((e2) => (e2[e2.SetTitleId = 0] = "SetTitleId", e2))(we || {});
let He$1 = { [0](o3, e2) {
  return o3.titleId === e2.id ? o3 : { ...o3, titleId: e2.id };
} }, I$2 = createContext(null);
I$2.displayName = "DialogContext";
function b$2(o3) {
  let e2 = useContext(I$2);
  if (e2 === null) {
    let r2 = new Error(`<${o3} /> is missing a parent <Dialog /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(r2, b$2), r2;
  }
  return e2;
}
function Be(o3, e2, r2 = () => [document.body]) {
  p$1(o3, e2, (i2) => {
    var n2;
    return { containers: [...(n2 = i2.containers) != null ? n2 : [], r2] };
  });
}
function Ge(o3, e2) {
  return u$7(e2.type, He$1, o3, e2);
}
let Ne$1 = "div", Ue = O$1.RenderStrategy | O$1.Static;
function We(o3, e2) {
  let r2 = I$6(), { id: i2 = `headlessui-dialog-${r2}`, open: n2, onClose: l2, initialFocus: s2, role: a2 = "dialog", __demoMode: T2 = false, ...m2 } = o3, [M2, f2] = useState(0), U2 = useRef(false);
  a2 = function() {
    return a2 === "dialog" || a2 === "alertdialog" ? a2 : (U2.current || (U2.current = true, console.warn(`Invalid role [${a2}] passed to <Dialog />. Only \`dialog\` and and \`alertdialog\` are supported. Using \`dialog\` instead.`)), "dialog");
  }();
  let E2 = u$3();
  n2 === void 0 && E2 !== null && (n2 = (E2 & d$4.Open) === d$4.Open);
  let D2 = useRef(null), ee$1 = y$2(D2, e2), g2 = n$3(D2), W = o3.hasOwnProperty("open") || E2 !== null, $2 = o3.hasOwnProperty("onClose");
  if (!W && !$2) throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component.");
  if (!W) throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop.");
  if (!$2) throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop.");
  if (typeof n2 != "boolean") throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${n2}`);
  if (typeof l2 != "function") throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${l2}`);
  let p2 = n2 ? 0 : 1, [h2, te$1] = useReducer(Ge, { titleId: null, descriptionId: null, panelRef: createRef() }), P2 = o$6(() => l2(false)), Y2 = o$6((t2) => te$1({ type: 0, id: t2 })), S2 = l$5() ? T2 ? false : p2 === 0 : false, x2 = M2 > 1, j2 = useContext(I$2) !== null, [oe, re] = ee(), ne = { get current() {
    var t2;
    return (t2 = h2.panelRef.current) != null ? t2 : D2.current;
  } }, { resolveContainers: w2, mainTreeNodeRef: L, MainTreeNode: le2 } = N({ portals: oe, defaultContainers: [ne] }), ae2 = x2 ? "parent" : "leaf", J = E2 !== null ? (E2 & d$4.Closing) === d$4.Closing : false, ie = /* @__PURE__ */ (() => j2 || J ? false : S2)(), se2 = useCallback(() => {
    var t2, c2;
    return (c2 = Array.from((t2 = g2 == null ? void 0 : g2.querySelectorAll("body > *")) != null ? t2 : []).find((d2) => d2.id === "headlessui-portal-root" ? false : d2.contains(L.current) && d2 instanceof HTMLElement)) != null ? c2 : null;
  }, [L]);
  b$4(se2, ie);
  let pe = /* @__PURE__ */ (() => x2 ? true : S2)(), de2 = useCallback(() => {
    var t2, c2;
    return (c2 = Array.from((t2 = g2 == null ? void 0 : g2.querySelectorAll("[data-headlessui-portal]")) != null ? t2 : []).find((d2) => d2.contains(L.current) && d2 instanceof HTMLElement)) != null ? c2 : null;
  }, [L]);
  b$4(de2, pe);
  let ue2 = /* @__PURE__ */ (() => !(!S2 || x2))();
  y$3(w2, (t2) => {
    t2.preventDefault(), P2();
  }, ue2);
  let fe2 = /* @__PURE__ */ (() => !(x2 || p2 !== 0))();
  E$1(g2 == null ? void 0 : g2.defaultView, "keydown", (t2) => {
    fe2 && (t2.defaultPrevented || t2.key === o$2.Escape && (t2.preventDefault(), t2.stopPropagation(), P2()));
  });
  let ge2 = /* @__PURE__ */ (() => !(J || p2 !== 0 || j2))();
  Be(g2, ge2, w2), useEffect(() => {
    if (p2 !== 0 || !D2.current) return;
    let t2 = new ResizeObserver((c2) => {
      for (let d2 of c2) {
        let F2 = d2.target.getBoundingClientRect();
        F2.x === 0 && F2.y === 0 && F2.width === 0 && F2.height === 0 && P2();
      }
    });
    return t2.observe(D2.current), () => t2.disconnect();
  }, [p2, D2, P2]);
  let [Te2, ce] = w$2(), De2 = useMemo(() => [{ dialogState: p2, close: P2, setTitleId: Y2 }, h2], [p2, h2, P2, Y2]), X2 = useMemo(() => ({ open: p2 === 0 }), [p2]), me2 = { ref: ee$1, id: i2, role: a2, "aria-modal": p2 === 0 ? true : void 0, "aria-labelledby": h2.titleId, "aria-describedby": Te2 };
  return C__default.createElement(b$3, { type: "Dialog", enabled: p2 === 0, element: D2, onUpdate: o$6((t2, c2) => {
    c2 === "Dialog" && u$7(t2, { [s$2.Add]: () => f2((d2) => d2 + 1), [s$2.Remove]: () => f2((d2) => d2 - 1) });
  }) }, C__default.createElement(l$3, { force: true }, C__default.createElement(te, null, C__default.createElement(I$2.Provider, { value: De2 }, C__default.createElement(te.Group, { target: D2 }, C__default.createElement(l$3, { force: false }, C__default.createElement(ce, { slot: X2, name: "Dialog.Description" }, C__default.createElement(de$1, { initialFocus: s2, containers: w2, features: S2 ? u$7(ae2, { parent: de$1.features.RestoreFocus, leaf: de$1.features.All & ~de$1.features.FocusLock }) : de$1.features.None }, C__default.createElement(re, null, C$2({ ourProps: me2, theirProps: m2, slot: X2, defaultTag: Ne$1, features: Ue, visible: p2 === 0, name: "Dialog" }))))))))), C__default.createElement(le2, null));
}
let $e = "div";
function Ye(o3, e2) {
  let r2 = I$6(), { id: i2 = `headlessui-dialog-overlay-${r2}`, ...n2 } = o3, [{ dialogState: l2, close: s2 }] = b$2("Dialog.Overlay"), a2 = y$2(e2), T2 = o$6((f2) => {
    if (f2.target === f2.currentTarget) {
      if (r$3(f2.currentTarget)) return f2.preventDefault();
      f2.preventDefault(), f2.stopPropagation(), s2();
    }
  }), m2 = useMemo(() => ({ open: l2 === 0 }), [l2]);
  return C$2({ ourProps: { ref: a2, id: i2, "aria-hidden": true, onClick: T2 }, theirProps: n2, slot: m2, defaultTag: $e, name: "Dialog.Overlay" });
}
let je = "div";
function Je(o3, e2) {
  let r2 = I$6(), { id: i2 = `headlessui-dialog-backdrop-${r2}`, ...n2 } = o3, [{ dialogState: l2 }, s2] = b$2("Dialog.Backdrop"), a2 = y$2(e2);
  useEffect(() => {
    if (s2.panelRef.current === null) throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing.");
  }, [s2.panelRef]);
  let T2 = useMemo(() => ({ open: l2 === 0 }), [l2]);
  return C__default.createElement(l$3, { force: true }, C__default.createElement(te, null, C$2({ ourProps: { ref: a2, id: i2, "aria-hidden": true }, theirProps: n2, slot: T2, defaultTag: je, name: "Dialog.Backdrop" })));
}
let Xe = "div";
function Ke(o3, e2) {
  let r2 = I$6(), { id: i2 = `headlessui-dialog-panel-${r2}`, ...n2 } = o3, [{ dialogState: l2 }, s2] = b$2("Dialog.Panel"), a2 = y$2(e2, s2.panelRef), T2 = useMemo(() => ({ open: l2 === 0 }), [l2]), m2 = o$6((f2) => {
    f2.stopPropagation();
  });
  return C$2({ ourProps: { ref: a2, id: i2, onClick: m2 }, theirProps: n2, slot: T2, defaultTag: Xe, name: "Dialog.Panel" });
}
let Ve = "h2";
function qe$2(o3, e2) {
  let r2 = I$6(), { id: i2 = `headlessui-dialog-title-${r2}`, ...n2 } = o3, [{ dialogState: l2, setTitleId: s2 }] = b$2("Dialog.Title"), a2 = y$2(e2);
  useEffect(() => (s2(i2), () => s2(null)), [i2, s2]);
  let T2 = useMemo(() => ({ open: l2 === 0 }), [l2]);
  return C$2({ ourProps: { ref: a2, id: i2 }, theirProps: n2, slot: T2, defaultTag: Ve, name: "Dialog.Title" });
}
let ze = U$3(We), Qe = U$3(Je), Ze = U$3(Ke), et = U$3(Ye), tt = U$3(qe$2), _t = Object.assign(ze, { Backdrop: Qe, Panel: Ze, Overlay: et, Title: tt, Description: G });
let a$1 = /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g;
function o$1(e2) {
  var r2, i2;
  let n2 = (r2 = e2.innerText) != null ? r2 : "", t2 = e2.cloneNode(true);
  if (!(t2 instanceof HTMLElement)) return n2;
  let u2 = false;
  for (let f2 of t2.querySelectorAll('[hidden],[aria-hidden],[role="img"]')) f2.remove(), u2 = true;
  let l2 = u2 ? (i2 = t2.innerText) != null ? i2 : "" : n2;
  return a$1.test(l2) && (l2 = l2.replace(a$1, "")), l2;
}
function g$2(e2) {
  let n2 = e2.getAttribute("aria-label");
  if (typeof n2 == "string") return n2.trim();
  let t2 = e2.getAttribute("aria-labelledby");
  if (t2) {
    let u2 = t2.split(" ").map((l2) => {
      let r2 = document.getElementById(l2);
      if (r2) {
        let i2 = r2.getAttribute("aria-label");
        return typeof i2 == "string" ? i2.trim() : o$1(r2).trim();
      }
      return null;
    }).filter(Boolean);
    if (u2.length > 0) return u2.join(", ");
  }
  return o$1(e2).trim();
}
function s$1(c2) {
  let t2 = useRef(""), r2 = useRef("");
  return o$6(() => {
    let e2 = c2.current;
    if (!e2) return "";
    let u2 = e2.innerText;
    if (t2.current === u2) return r2.current;
    let n2 = g$2(e2).trim().toLowerCase();
    return t2.current = u2, r2.current = n2, n2;
  });
}
var me = ((r2) => (r2[r2.Open = 0] = "Open", r2[r2.Closed = 1] = "Closed", r2))(me || {}), de = ((r2) => (r2[r2.Pointer = 0] = "Pointer", r2[r2.Other = 1] = "Other", r2))(de || {}), fe = ((a2) => (a2[a2.OpenMenu = 0] = "OpenMenu", a2[a2.CloseMenu = 1] = "CloseMenu", a2[a2.GoToItem = 2] = "GoToItem", a2[a2.Search = 3] = "Search", a2[a2.ClearSearch = 4] = "ClearSearch", a2[a2.RegisterItem = 5] = "RegisterItem", a2[a2.UnregisterItem = 6] = "UnregisterItem", a2))(fe || {});
function w$1(e2, u2 = (r2) => r2) {
  let r2 = e2.activeItemIndex !== null ? e2.items[e2.activeItemIndex] : null, s2 = I$5(u2(e2.items.slice()), (t2) => t2.dataRef.current.domRef.current), i2 = r2 ? s2.indexOf(r2) : null;
  return i2 === -1 && (i2 = null), { items: s2, activeItemIndex: i2 };
}
let Te = { [1](e2) {
  return e2.menuState === 1 ? e2 : { ...e2, activeItemIndex: null, menuState: 1 };
}, [0](e2) {
  return e2.menuState === 0 ? e2 : { ...e2, __demoMode: false, menuState: 0 };
}, [2]: (e2, u2) => {
  var i2;
  let r2 = w$1(e2), s2 = f$6(u2, { resolveItems: () => r2.items, resolveActiveIndex: () => r2.activeItemIndex, resolveId: (t2) => t2.id, resolveDisabled: (t2) => t2.dataRef.current.disabled });
  return { ...e2, ...r2, searchQuery: "", activeItemIndex: s2, activationTrigger: (i2 = u2.trigger) != null ? i2 : 1 };
}, [3]: (e2, u2) => {
  let s2 = e2.searchQuery !== "" ? 0 : 1, i2 = e2.searchQuery + u2.value.toLowerCase(), o3 = (e2.activeItemIndex !== null ? e2.items.slice(e2.activeItemIndex + s2).concat(e2.items.slice(0, e2.activeItemIndex + s2)) : e2.items).find((l2) => {
    var m2;
    return ((m2 = l2.dataRef.current.textValue) == null ? void 0 : m2.startsWith(i2)) && !l2.dataRef.current.disabled;
  }), a2 = o3 ? e2.items.indexOf(o3) : -1;
  return a2 === -1 || a2 === e2.activeItemIndex ? { ...e2, searchQuery: i2 } : { ...e2, searchQuery: i2, activeItemIndex: a2, activationTrigger: 1 };
}, [4](e2) {
  return e2.searchQuery === "" ? e2 : { ...e2, searchQuery: "", searchActiveItemIndex: null };
}, [5]: (e2, u2) => {
  let r2 = w$1(e2, (s2) => [...s2, { id: u2.id, dataRef: u2.dataRef }]);
  return { ...e2, ...r2 };
}, [6]: (e2, u2) => {
  let r2 = w$1(e2, (s2) => {
    let i2 = s2.findIndex((t2) => t2.id === u2.id);
    return i2 !== -1 && s2.splice(i2, 1), s2;
  });
  return { ...e2, ...r2, activationTrigger: 1 };
} }, U$1 = createContext(null);
U$1.displayName = "MenuContext";
function C$1(e2) {
  let u2 = useContext(U$1);
  if (u2 === null) {
    let r2 = new Error(`<${e2} /> is missing a parent <Menu /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(r2, C$1), r2;
  }
  return u2;
}
function ye$1(e2, u2) {
  return u$7(u2.type, Te, e2, u2);
}
let Ie = Fragment;
function Me(e2, u2) {
  let { __demoMode: r2 = false, ...s2 } = e2, i2 = useReducer(ye$1, { __demoMode: r2, menuState: r2 ? 0 : 1, buttonRef: createRef(), itemsRef: createRef(), items: [], searchQuery: "", activeItemIndex: null, activationTrigger: 1 }), [{ menuState: t2, itemsRef: o3, buttonRef: a2 }, l2] = i2, m2 = y$2(u2);
  y$3([a2, o3], (g2, R2) => {
    var p2;
    l2({ type: 1 }), h$6(R2, T$2.Loose) || (g2.preventDefault(), (p2 = a2.current) == null || p2.focus());
  }, t2 === 0);
  let I2 = o$6(() => {
    l2({ type: 1 });
  }), A2 = useMemo(() => ({ open: t2 === 0, close: I2 }), [t2, I2]), f2 = { ref: m2 };
  return C__default.createElement(U$1.Provider, { value: i2 }, C__default.createElement(s$5, { value: u$7(t2, { [0]: d$4.Open, [1]: d$4.Closed }) }, C$2({ ourProps: f2, theirProps: s2, slot: A2, defaultTag: Ie, name: "Menu" })));
}
let ge = "button";
function Re$1(e2, u2) {
  var R2;
  let r2 = I$6(), { id: s2 = `headlessui-menu-button-${r2}`, ...i2 } = e2, [t2, o3] = C$1("Menu.Button"), a2 = y$2(t2.buttonRef, u2), l2 = p$4(), m2 = o$6((p2) => {
    switch (p2.key) {
      case o$2.Space:
      case o$2.Enter:
      case o$2.ArrowDown:
        p2.preventDefault(), p2.stopPropagation(), o3({ type: 0 }), l2.nextFrame(() => o3({ type: 2, focus: c$5.First }));
        break;
      case o$2.ArrowUp:
        p2.preventDefault(), p2.stopPropagation(), o3({ type: 0 }), l2.nextFrame(() => o3({ type: 2, focus: c$5.Last }));
        break;
    }
  }), I2 = o$6((p2) => {
    switch (p2.key) {
      case o$2.Space:
        p2.preventDefault();
        break;
    }
  }), A2 = o$6((p2) => {
    if (r$3(p2.currentTarget)) return p2.preventDefault();
    e2.disabled || (t2.menuState === 0 ? (o3({ type: 1 }), l2.nextFrame(() => {
      var M2;
      return (M2 = t2.buttonRef.current) == null ? void 0 : M2.focus({ preventScroll: true });
    })) : (p2.preventDefault(), o3({ type: 0 })));
  }), f2 = useMemo(() => ({ open: t2.menuState === 0 }), [t2]), g2 = { ref: a2, id: s2, type: T$1(e2, t2.buttonRef), "aria-haspopup": "menu", "aria-controls": (R2 = t2.itemsRef.current) == null ? void 0 : R2.id, "aria-expanded": t2.menuState === 0, onKeyDown: m2, onKeyUp: I2, onClick: A2 };
  return C$2({ ourProps: g2, theirProps: i2, slot: f2, defaultTag: ge, name: "Menu.Button" });
}
let Ae = "div", be = O$1.RenderStrategy | O$1.Static;
function Ee(e2, u2) {
  var M2, b2;
  let r2 = I$6(), { id: s2 = `headlessui-menu-items-${r2}`, ...i2 } = e2, [t2, o3] = C$1("Menu.Items"), a2 = y$2(t2.itemsRef, u2), l2 = n$3(t2.itemsRef), m2 = p$4(), I2 = u$3(), A2 = (() => I2 !== null ? (I2 & d$4.Open) === d$4.Open : t2.menuState === 0)();
  useEffect(() => {
    let n2 = t2.itemsRef.current;
    n2 && t2.menuState === 0 && n2 !== (l2 == null ? void 0 : l2.activeElement) && n2.focus({ preventScroll: true });
  }, [t2.menuState, t2.itemsRef, l2]), F$2({ container: t2.itemsRef.current, enabled: t2.menuState === 0, accept(n2) {
    return n2.getAttribute("role") === "menuitem" ? NodeFilter.FILTER_REJECT : n2.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;
  }, walk(n2) {
    n2.setAttribute("role", "none");
  } });
  let f2 = o$6((n2) => {
    var E2, x2;
    switch (m2.dispose(), n2.key) {
      case o$2.Space:
        if (t2.searchQuery !== "") return n2.preventDefault(), n2.stopPropagation(), o3({ type: 3, value: n2.key });
      case o$2.Enter:
        if (n2.preventDefault(), n2.stopPropagation(), o3({ type: 1 }), t2.activeItemIndex !== null) {
          let { dataRef: S2 } = t2.items[t2.activeItemIndex];
          (x2 = (E2 = S2.current) == null ? void 0 : E2.domRef.current) == null || x2.click();
        }
        D$3(t2.buttonRef.current);
        break;
      case o$2.ArrowDown:
        return n2.preventDefault(), n2.stopPropagation(), o3({ type: 2, focus: c$5.Next });
      case o$2.ArrowUp:
        return n2.preventDefault(), n2.stopPropagation(), o3({ type: 2, focus: c$5.Previous });
      case o$2.Home:
      case o$2.PageUp:
        return n2.preventDefault(), n2.stopPropagation(), o3({ type: 2, focus: c$5.First });
      case o$2.End:
      case o$2.PageDown:
        return n2.preventDefault(), n2.stopPropagation(), o3({ type: 2, focus: c$5.Last });
      case o$2.Escape:
        n2.preventDefault(), n2.stopPropagation(), o3({ type: 1 }), o$5().nextFrame(() => {
          var S2;
          return (S2 = t2.buttonRef.current) == null ? void 0 : S2.focus({ preventScroll: true });
        });
        break;
      case o$2.Tab:
        n2.preventDefault(), n2.stopPropagation(), o3({ type: 1 }), o$5().nextFrame(() => {
          _$3(t2.buttonRef.current, n2.shiftKey ? M$2.Previous : M$2.Next);
        });
        break;
      default:
        n2.key.length === 1 && (o3({ type: 3, value: n2.key }), m2.setTimeout(() => o3({ type: 4 }), 350));
        break;
    }
  }), g2 = o$6((n2) => {
    switch (n2.key) {
      case o$2.Space:
        n2.preventDefault();
        break;
    }
  }), R2 = useMemo(() => ({ open: t2.menuState === 0 }), [t2]), p2 = { "aria-activedescendant": t2.activeItemIndex === null || (M2 = t2.items[t2.activeItemIndex]) == null ? void 0 : M2.id, "aria-labelledby": (b2 = t2.buttonRef.current) == null ? void 0 : b2.id, id: s2, onKeyDown: f2, onKeyUp: g2, role: "menu", tabIndex: 0, ref: a2 };
  return C$2({ ourProps: p2, theirProps: i2, slot: R2, defaultTag: Ae, features: be, visible: A2, name: "Menu.Items" });
}
let Se$1 = Fragment;
function xe$1(e2, u2) {
  let r2 = I$6(), { id: s2 = `headlessui-menu-item-${r2}`, disabled: i2 = false, ...t2 } = e2, [o3, a2] = C$1("Menu.Item"), l2 = o3.activeItemIndex !== null ? o3.items[o3.activeItemIndex].id === s2 : false, m2 = useRef(null), I2 = y$2(u2, m2);
  l$6(() => {
    if (o3.__demoMode || o3.menuState !== 0 || !l2 || o3.activationTrigger === 0) return;
    let T2 = o$5();
    return T2.requestAnimationFrame(() => {
      var P2, B;
      (B = (P2 = m2.current) == null ? void 0 : P2.scrollIntoView) == null || B.call(P2, { block: "nearest" });
    }), T2.dispose;
  }, [o3.__demoMode, m2, l2, o3.menuState, o3.activationTrigger, o3.activeItemIndex]);
  let A2 = s$1(m2), f2 = useRef({ disabled: i2, domRef: m2, get textValue() {
    return A2();
  } });
  l$6(() => {
    f2.current.disabled = i2;
  }, [f2, i2]), l$6(() => (a2({ type: 5, id: s2, dataRef: f2 }), () => a2({ type: 6, id: s2 })), [f2, s2]);
  let g2 = o$6(() => {
    a2({ type: 1 });
  }), R2 = o$6((T2) => {
    if (i2) return T2.preventDefault();
    a2({ type: 1 }), D$3(o3.buttonRef.current);
  }), p2 = o$6(() => {
    if (i2) return a2({ type: 2, focus: c$5.Nothing });
    a2({ type: 2, focus: c$5.Specific, id: s2 });
  }), M2 = u$5(), b2 = o$6((T2) => M2.update(T2)), n2 = o$6((T2) => {
    M2.wasMoved(T2) && (i2 || l2 || a2({ type: 2, focus: c$5.Specific, id: s2, trigger: 0 }));
  }), E2 = o$6((T2) => {
    M2.wasMoved(T2) && (i2 || l2 && a2({ type: 2, focus: c$5.Nothing }));
  }), x2 = useMemo(() => ({ active: l2, disabled: i2, close: g2 }), [l2, i2, g2]);
  return C$2({ ourProps: { id: s2, ref: I2, role: "menuitem", tabIndex: i2 === true ? void 0 : -1, "aria-disabled": i2 === true ? true : void 0, disabled: void 0, onClick: R2, onFocus: p2, onPointerEnter: b2, onMouseEnter: b2, onPointerMove: n2, onMouseMove: n2, onPointerLeave: E2, onMouseLeave: E2 }, theirProps: t2, slot: x2, defaultTag: Se$1, name: "Menu.Item" });
}
let Pe$1 = U$3(Me), ve = U$3(Re$1), he = U$3(Ee), De$1 = U$3(xe$1), qe$1 = Object.assign(Pe$1, { Button: ve, Items: he, Item: De$1 });
function c$1(a2 = 0) {
  let [l2, r2] = useState(a2), t2 = f$5(), o3 = useCallback((e2) => {
    t2.current && r2((u2) => u2 | e2);
  }, [l2, t2]), m2 = useCallback((e2) => Boolean(l2 & e2), [l2]), s2 = useCallback((e2) => {
    t2.current && r2((u2) => u2 & ~e2);
  }, [r2, t2]), g2 = useCallback((e2) => {
    t2.current && r2((u2) => u2 ^ e2);
  }, [r2]);
  return { flags: l2, addFlag: o3, hasFlag: m2, removeFlag: s2, toggleFlag: g2 };
}
function l$1(r2) {
  let e2 = { called: false };
  return (...t2) => {
    if (!e2.called) return e2.called = true, r2(...t2);
  };
}
function g$1(t2, ...e2) {
  t2 && e2.length > 0 && t2.classList.add(...e2);
}
function v$1(t2, ...e2) {
  t2 && e2.length > 0 && t2.classList.remove(...e2);
}
function b$1(t2, e2) {
  let n2 = o$5();
  if (!t2) return n2.dispose;
  let { transitionDuration: m2, transitionDelay: a2 } = getComputedStyle(t2), [u2, p2] = [m2, a2].map((l2) => {
    let [r2 = 0] = l2.split(",").filter(Boolean).map((i2) => i2.includes("ms") ? parseFloat(i2) : parseFloat(i2) * 1e3).sort((i2, T2) => T2 - i2);
    return r2;
  }), o3 = u2 + p2;
  if (o3 !== 0) {
    n2.group((r2) => {
      r2.setTimeout(() => {
        e2(), r2.dispose();
      }, o3), r2.addEventListener(t2, "transitionrun", (i2) => {
        i2.target === i2.currentTarget && r2.dispose();
      });
    });
    let l2 = n2.addEventListener(t2, "transitionend", (r2) => {
      r2.target === r2.currentTarget && (e2(), l2());
    });
  } else e2();
  return n2.add(() => e2()), n2.dispose;
}
function M$1(t2, e2, n2, m2) {
  let a2 = n2 ? "enter" : "leave", u2 = o$5(), p2 = m2 !== void 0 ? l$1(m2) : () => {
  };
  a2 === "enter" && (t2.removeAttribute("hidden"), t2.style.display = "");
  let o3 = u$7(a2, { enter: () => e2.enter, leave: () => e2.leave }), l2 = u$7(a2, { enter: () => e2.enterTo, leave: () => e2.leaveTo }), r2 = u$7(a2, { enter: () => e2.enterFrom, leave: () => e2.leaveFrom });
  return v$1(t2, ...e2.base, ...e2.enter, ...e2.enterTo, ...e2.enterFrom, ...e2.leave, ...e2.leaveFrom, ...e2.leaveTo, ...e2.entered), g$1(t2, ...e2.base, ...o3, ...r2), u2.nextFrame(() => {
    v$1(t2, ...e2.base, ...o3, ...r2), g$1(t2, ...e2.base, ...o3, ...l2), b$1(t2, () => (v$1(t2, ...e2.base, ...o3), g$1(t2, ...e2.base, ...e2.entered), p2()));
  }), u2.dispose;
}
function D({ immediate: t2, container: s2, direction: n2, classes: u2, onStart: a2, onStop: c2 }) {
  let l2 = f$5(), d2 = p$4(), e2 = s$9(n2);
  l$6(() => {
    t2 && (e2.current = "enter");
  }, [t2]), l$6(() => {
    let r2 = o$5();
    d2.add(r2.dispose);
    let i2 = s2.current;
    if (i2 && e2.current !== "idle" && l2.current) return r2.dispose(), a2.current(e2.current), r2.add(M$1(i2, u2.current, e2.current === "enter", () => {
      r2.dispose(), c2.current(e2.current);
    })), r2.dispose;
  }, [n2]);
}
function S(t2 = "") {
  return t2.split(/\s+/).filter((n2) => n2.length > 1);
}
let I$1 = createContext(null);
I$1.displayName = "TransitionContext";
var Se = ((r2) => (r2.Visible = "visible", r2.Hidden = "hidden", r2))(Se || {});
function ye() {
  let t2 = useContext(I$1);
  if (t2 === null) throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
  return t2;
}
function xe() {
  let t2 = useContext(M);
  if (t2 === null) throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.");
  return t2;
}
let M = createContext(null);
M.displayName = "NestingContext";
function U(t2) {
  return "children" in t2 ? U(t2.children) : t2.current.filter(({ el: n2 }) => n2.current !== null).filter(({ state: n2 }) => n2 === "visible").length > 0;
}
function se(t2, n2) {
  let r2 = s$9(t2), s2 = useRef([]), R2 = f$5(), D2 = p$4(), p2 = o$6((i2, e2 = v$2.Hidden) => {
    let a2 = s2.current.findIndex(({ el: o3 }) => o3 === i2);
    a2 !== -1 && (u$7(e2, { [v$2.Unmount]() {
      s2.current.splice(a2, 1);
    }, [v$2.Hidden]() {
      s2.current[a2].state = "hidden";
    } }), D2.microTask(() => {
      var o3;
      !U(s2) && R2.current && ((o3 = r2.current) == null || o3.call(r2));
    }));
  }), x2 = o$6((i2) => {
    let e2 = s2.current.find(({ el: a2 }) => a2 === i2);
    return e2 ? e2.state !== "visible" && (e2.state = "visible") : s2.current.push({ el: i2, state: "visible" }), () => p2(i2, v$2.Unmount);
  }), h2 = useRef([]), v2 = useRef(Promise.resolve()), u2 = useRef({ enter: [], leave: [], idle: [] }), g2 = o$6((i2, e2, a2) => {
    h2.current.splice(0), n2 && (n2.chains.current[e2] = n2.chains.current[e2].filter(([o3]) => o3 !== i2)), n2 == null || n2.chains.current[e2].push([i2, new Promise((o3) => {
      h2.current.push(o3);
    })]), n2 == null || n2.chains.current[e2].push([i2, new Promise((o3) => {
      Promise.all(u2.current[e2].map(([f2, N2]) => N2)).then(() => o3());
    })]), e2 === "enter" ? v2.current = v2.current.then(() => n2 == null ? void 0 : n2.wait.current).then(() => a2(e2)) : a2(e2);
  }), d2 = o$6((i2, e2, a2) => {
    Promise.all(u2.current[e2].splice(0).map(([o3, f2]) => f2)).then(() => {
      var o3;
      (o3 = h2.current.shift()) == null || o3();
    }).then(() => a2(e2));
  });
  return useMemo(() => ({ children: s2, register: x2, unregister: p2, onStart: g2, onStop: d2, wait: v2, chains: u2 }), [x2, p2, s2, g2, d2, u2, v2]);
}
function Ne() {
}
let Pe = ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave"];
function ae(t2) {
  var r2;
  let n2 = {};
  for (let s2 of Pe) n2[s2] = (r2 = t2[s2]) != null ? r2 : Ne;
  return n2;
}
function Re(t2) {
  let n2 = useRef(ae(t2));
  return useEffect(() => {
    n2.current = ae(t2);
  }, [t2]), n2;
}
let De = "div", le = O$1.RenderStrategy;
function He(t2, n2) {
  var Q2, Y2;
  let { beforeEnter: r2, afterEnter: s2, beforeLeave: R2, afterLeave: D$12, enter: p2, enterFrom: x2, enterTo: h2, entered: v2, leave: u2, leaveFrom: g2, leaveTo: d2, ...i2 } = t2, e2 = useRef(null), a2 = y$2(e2, n2), o3 = (Q2 = i2.unmount) == null || Q2 ? v$2.Unmount : v$2.Hidden, { show: f2, appear: N2, initial: T2 } = ye(), [l2, j2] = useState(f2 ? "visible" : "hidden"), z2 = xe(), { register: L, unregister: O2 } = z2;
  useEffect(() => L(e2), [L, e2]), useEffect(() => {
    if (o3 === v$2.Hidden && e2.current) {
      if (f2 && l2 !== "visible") {
        j2("visible");
        return;
      }
      return u$7(l2, { ["hidden"]: () => O2(e2), ["visible"]: () => L(e2) });
    }
  }, [l2, e2, L, O2, f2, o3]);
  let k2 = s$9({ base: S(i2.className), enter: S(p2), enterFrom: S(x2), enterTo: S(h2), entered: S(v2), leave: S(u2), leaveFrom: S(g2), leaveTo: S(d2) }), V = Re({ beforeEnter: r2, afterEnter: s2, beforeLeave: R2, afterLeave: D$12 }), G2 = l$5();
  useEffect(() => {
    if (G2 && l2 === "visible" && e2.current === null) throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?");
  }, [e2, l2, G2]);
  let Te2 = T2 && !N2, K = N2 && f2 && T2, de2 = /* @__PURE__ */ (() => !G2 || Te2 ? "idle" : f2 ? "enter" : "leave")(), H2 = c$1(0), fe2 = o$6((C2) => u$7(C2, { enter: () => {
    H2.addFlag(d$4.Opening), V.current.beforeEnter();
  }, leave: () => {
    H2.addFlag(d$4.Closing), V.current.beforeLeave();
  }, idle: () => {
  } })), me2 = o$6((C2) => u$7(C2, { enter: () => {
    H2.removeFlag(d$4.Opening), V.current.afterEnter();
  }, leave: () => {
    H2.removeFlag(d$4.Closing), V.current.afterLeave();
  }, idle: () => {
  } })), w2 = se(() => {
    j2("hidden"), O2(e2);
  }, z2), B = useRef(false);
  D({ immediate: K, container: e2, classes: k2, direction: de2, onStart: s$9((C2) => {
    B.current = true, w2.onStart(e2, C2, fe2);
  }), onStop: s$9((C2) => {
    B.current = false, w2.onStop(e2, C2, me2), C2 === "leave" && !U(w2) && (j2("hidden"), O2(e2));
  }) });
  let P2 = i2, ce = { ref: a2 };
  return K ? P2 = { ...P2, className: t$5(i2.className, ...k2.current.enter, ...k2.current.enterFrom) } : B.current && (P2.className = t$5(i2.className, (Y2 = e2.current) == null ? void 0 : Y2.className), P2.className === "" && delete P2.className), C__default.createElement(M.Provider, { value: w2 }, C__default.createElement(s$5, { value: u$7(l2, { ["visible"]: d$4.Open, ["hidden"]: d$4.Closed }) | H2.flags }, C$2({ ourProps: ce, theirProps: P2, defaultTag: De, features: le, visible: l2 === "visible", name: "Transition.Child" })));
}
function Fe(t2, n2) {
  let { show: r2, appear: s2 = false, unmount: R2 = true, ...D2 } = t2, p2 = useRef(null), x2 = y$2(p2, n2);
  l$5();
  let h2 = u$3();
  if (r2 === void 0 && h2 !== null && (r2 = (h2 & d$4.Open) === d$4.Open), ![true, false].includes(r2)) throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop.");
  let [v2, u2] = useState(r2 ? "visible" : "hidden"), g2 = se(() => {
    u2("hidden");
  }), [d2, i2] = useState(true), e2 = useRef([r2]);
  l$6(() => {
    d2 !== false && e2.current[e2.current.length - 1] !== r2 && (e2.current.push(r2), i2(false));
  }, [e2, r2]);
  let a2 = useMemo(() => ({ show: r2, appear: s2, initial: d2 }), [r2, s2, d2]);
  useEffect(() => {
    if (r2) u2("visible");
    else if (!U(g2)) u2("hidden");
    else {
      let T2 = p2.current;
      if (!T2) return;
      let l2 = T2.getBoundingClientRect();
      l2.x === 0 && l2.y === 0 && l2.width === 0 && l2.height === 0 && u2("hidden");
    }
  }, [r2, g2]);
  let o3 = { unmount: R2 }, f2 = o$6(() => {
    var T2;
    d2 && i2(false), (T2 = t2.beforeEnter) == null || T2.call(t2);
  }), N2 = o$6(() => {
    var T2;
    d2 && i2(false), (T2 = t2.beforeLeave) == null || T2.call(t2);
  });
  return C__default.createElement(M.Provider, { value: g2 }, C__default.createElement(I$1.Provider, { value: a2 }, C$2({ ourProps: { ...o3, as: Fragment, children: C__default.createElement(ue, { ref: x2, ...o3, ...D2, beforeEnter: f2, beforeLeave: N2 }) }, theirProps: {}, defaultTag: Fragment, features: le, visible: v2 === "visible", name: "Transition" })));
}
function _e(t2, n2) {
  let r2 = useContext(I$1) !== null, s2 = u$3() !== null;
  return C__default.createElement(C__default.Fragment, null, !r2 && s2 ? C__default.createElement(q, { ref: n2, ...t2 }) : C__default.createElement(ue, { ref: n2, ...t2 }));
}
let q = U$3(Fe), ue = U$3(He), Le = U$3(_e), qe = Object.assign(q, { Child: Le, Root: q });
const ChevronDownIcon = "data:image/svg+xml,%3csvg%20width='20'%20height='20'%20viewBox='0%200%2020%2020'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M5%207.5L10%2012.5L15%207.5'%20stroke='white'%20stroke-width='2'%20stroke-linecap='round'%20stroke-linejoin='round'/%3e%3c/svg%3e";
const LeatherWalletIcon = "data:image/svg+xml,%3csvg%20width='32'%20height='32'%20viewBox='0%200%2032%2032'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M14.2692%206.04835H10.6729C7.79592%2012.2004%2012.4577%2014.8894%2015.1483%2015.4648L13.9495%2019.3884C12.7348%2018.4467%2010.7795%2018.0282%209.79384%2017.8974C5.55824%2017.662%204.20118%2020.7103%204.03982%2021.9779C3.72015%2024.4889%205.31849%2026.9215%209.07459%2026.9215C12.0795%2026.9215%2014.3758%2025.2998%2015.1483%2024.4889C18.0892%2027%2020.7958%2027.1569%2021.7814%2026.9215C26.7043%2026.5449%2027.5621%2022.004%2027.3756%2019.7807H24.1789C23.4117%2025.8072%2019.0642%2023.338%2016.9864%2021.3501L18.6646%2015.7002C30.0128%2013.1892%2029.9329%204.322%2024.1789%204.00811C19.5757%203.75701%2016.8265%209.39643%2016.0274%2012.2475C12.1914%2011.6198%2013.2569%207.85317%2014.2692%206.04835Z'%20fill='white'/%3e%3cpath%20d='M19.5437%2012.2475C19.9699%2010.6258%2021.7814%206.99461%2023.7793%207.2254C26.4965%207.53927%2022.6605%2011.5413%2019.5437%2012.2475Z'%20fill='%23303746'/%3e%3cpath%20d='M12.8307%2022.2918C11.7918%2021.2716%208.03567%2020.0946%207.31642%2022.2918C7.00817%2023.2334%209.47418%2024.8813%2012.8307%2022.2918Z'%20fill='%23303746'/%3e%3c/svg%3e";
const LogoutIcon = "data:image/svg+xml,%3csvg%20width='20'%20height='20'%20viewBox='0%200%2020%2020'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M7.5%2017.5H4.16667C3.72464%2017.5%203.30072%2017.3244%202.98816%2017.0118C2.67559%2016.6993%202.5%2016.2754%202.5%2015.8333V4.16667C2.5%203.72464%202.67559%203.30072%202.98816%202.98816C3.30072%202.67559%203.72464%202.5%204.16667%202.5H7.5'%20stroke='white'%20stroke-width='1.5'%20stroke-linecap='round'%20stroke-linejoin='round'/%3e%3cpath%20d='M13.333%2014.1667L17.4997%2010L13.333%205.83337'%20stroke='white'%20stroke-width='1.5'%20stroke-linecap='round'%20stroke-linejoin='round'/%3e%3cpath%20d='M17.5%2010H7.5'%20stroke='white'%20stroke-width='1.5'%20stroke-linecap='round'%20stroke-linejoin='round'/%3e%3c/svg%3e";
const MagicEdenWalletIcon = "data:image/svg+xml,%3csvg%20width='32'%20height='32'%20viewBox='0%200%2032%2032'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M21.403%2011.0761L22.9233%2012.9126C23.0973%2013.1219%2023.2486%2013.2846%2023.3167%2013.3853C23.7705%2013.8503%2024.0277%2014.478%2024.0277%2015.1289C23.9823%2015.8961%2023.4982%2016.423%2023.0444%2016.9887L21.9779%2018.2673L21.4257%2018.9338C21.403%2018.957%2021.3954%2018.988%2021.3879%2019.019C21.3803%2019.05%2021.3879%2019.081%2021.403%2019.1043C21.4181%2019.1353%2021.4332%2019.1585%2021.4635%2019.174C21.4862%2019.1895%2021.5165%2019.1973%2021.5467%2019.1973H27.0986C27.9458%2019.1973%2029.0123%2019.9257%2028.9518%2021.0338C28.9518%2021.5375%2028.7476%2022.018%2028.3996%2022.3744C28.0441%2022.7309%2027.5676%2022.9324%2027.0684%2022.9324H18.3699C17.795%2022.9324%2016.2595%2022.9944%2015.8284%2021.6538C15.7376%2021.3748%2015.7225%2021.0726%2015.7906%2020.7858C15.9192%2020.3596%2016.1158%2019.9567%2016.373%2019.6002C16.8117%2018.9338%2017.2807%2018.2751%2017.7496%2017.6319C18.3547%2016.7872%2018.9674%2015.9736%2019.5801%2015.1134C19.6028%2015.0824%2019.6103%2015.0514%2019.6103%2015.0127C19.6103%2014.9739%2019.5952%2014.9429%2019.5801%2014.9119L17.3714%2012.254C17.3563%2012.2385%2017.3412%2012.223%2017.3185%2012.2075C17.2958%2012.1997%2017.2731%2012.192%2017.2504%2012.192C17.2277%2012.192%2017.205%2012.1997%2017.1823%2012.2075C17.1596%2012.2152%2017.1445%2012.2307%2017.1294%2012.254C16.5394%2013.0599%2013.945%2016.6323%2013.3928%2017.3607C12.8406%2018.0814%2011.4791%2018.1279%2010.7228%2017.3607L7.26605%2013.8581C7.24335%2013.8348%207.2131%2013.8193%207.18284%2013.8116C7.15259%2013.8038%207.12233%2013.8116%207.09208%2013.8193C7.06182%2013.8348%207.03913%2013.8503%207.024%2013.8813C7.00887%2013.9045%206.99374%2013.9355%207.00131%2013.9665V20.7006C7.00887%2021.181%206.87272%2021.646%206.60042%2022.0412C6.32812%2022.4364%205.94993%2022.7309%205.50365%2022.8936C5.21623%2022.9944%204.91367%2023.0254%204.61868%2022.9789C4.32368%2022.9324%204.03626%2022.8239%203.79421%2022.6456C3.5446%2022.4674%203.34794%2022.2349%203.21179%2021.9637C3.07564%2021.6925%203%2021.3903%203%2021.0881V8.97605C3.02269%208.54209%203.17397%208.12364%203.44627%207.77492C3.71857%207.43396%204.08164%207.18598%204.49765%207.06974C4.85316%206.97675%205.23135%206.97675%205.58686%207.06974C5.94236%207.17048%206.26761%207.35646%206.53235%207.62769L11.8498%2012.9979C11.8649%2013.0134%2011.8876%2013.0289%2011.9027%2013.0366C11.9254%2013.0444%2011.9481%2013.0444%2011.9708%2013.0444C11.9935%2013.0444%2012.0162%2013.0366%2012.0313%2013.0211C12.054%2013.0134%2012.0691%2012.9979%2012.0843%2012.9746L15.8586%207.69743C16.0326%207.48045%2016.252%207.30997%2016.5016%207.19373C16.7512%207.07749%2017.0235%207.00775%2017.2958%207.00775H27.1137C27.386%207.00775%2027.6508%207.06974%2027.8928%207.17823C28.1349%207.29447%2028.3542%207.4572%2028.5358%207.65868C28.7097%207.86016%2028.8459%208.10039%2028.9215%208.36386C28.9972%208.62733%2029.0199%208.89856%2028.982%209.16978C28.914%209.63473%2028.6795%2010.0609%2028.324%2010.3632C27.9685%2010.6654%2027.5146%2010.8359%2027.0457%2010.8281H21.5467C21.5165%2010.8281%2021.4938%2010.8359%2021.4711%2010.8514C21.4484%2010.8669%2021.4257%2010.8901%2021.4181%2010.9134C21.403%2010.9366%2021.403%2010.9676%2021.403%2010.9908C21.3803%2011.0218%2021.3879%2011.0528%2021.403%2011.0761Z'%20fill='url(%23paint0_linear_3119_13568)'/%3e%3cdefs%3e%3clinearGradient%20id='paint0_linear_3119_13568'%20x1='4.08333'%20y1='11'%20x2='29'%20y2='11'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20stop-color='%23EF2690'/%3e%3cstop%20offset='1'%20stop-color='%23AB27FE'/%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e";
const OKXWalletIcon = "data:image/svg+xml,%3csvg%20width='32'%20height='32'%20viewBox='0%200%2032%2032'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20fill-rule='evenodd'%20clip-rule='evenodd'%20d='M11.8444%205H5.48893C5.21893%205%205%205.21883%205%205.48892V11.8444C5%2012.1144%205.21893%2012.3334%205.48893%2012.3334H11.8444C12.1145%2012.3334%2012.3334%2012.1144%2012.3334%2011.8444V5.48892C12.3334%205.21883%2012.1145%205%2011.8444%205ZM19.1807%2012.3336H12.8252C12.5552%2012.3336%2012.3363%2012.5524%2012.3363%2012.8224V19.178C12.3363%2019.448%2012.5552%2019.6669%2012.8252%2019.6669H19.1807C19.4507%2019.6669%2019.6697%2019.448%2019.6697%2019.178V12.8224C19.6697%2012.5524%2019.4507%2012.3336%2019.1807%2012.3336ZM20.1556%205.00001H26.5112C26.7812%205.00001%2027%205.21884%2027%205.48893V11.8444C27%2012.1144%2026.7812%2012.3334%2026.5112%2012.3334H20.1556C19.8856%2012.3334%2019.6666%2012.1144%2019.6666%2011.8444V5.48893C19.6666%205.21884%2019.8856%205.00001%2020.1556%205.00001ZM11.8445%2019.6665H5.48895C5.21895%2019.6665%205.00002%2019.8853%205.00002%2020.1553V26.511C5.00002%2026.781%205.21895%2026.9999%205.48895%2026.9999H11.8445C12.1146%2026.9999%2012.3334%2026.781%2012.3334%2026.511V20.1553C12.3334%2019.8853%2012.1146%2019.6665%2011.8445%2019.6665ZM20.1556%2019.6665H26.5112C26.7812%2019.6665%2027%2019.8853%2027%2020.1553V26.511C27%2026.781%2026.7812%2026.9999%2026.5112%2026.9999H20.1556C19.8856%2026.9999%2019.6666%2026.781%2019.6666%2026.511V20.1553C19.6666%2019.8853%2019.8856%2019.6665%2020.1556%2019.6665Z'%20fill='white'/%3e%3c/svg%3e";
const UnisatWalletIcon = "data:image/svg+xml,%3csvg%20width='32'%20height='32'%20viewBox='0%200%2032%2032'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M20.2892%204.87219L26.2505%2010.3415C26.7579%2010.8061%2027.0077%2011.2762%2026.9998%2011.7498C26.992%2012.2235%2026.7737%2012.6553%2026.3469%2013.047C25.9004%2013.457%2025.4185%2013.6647%2024.9032%2013.6738C24.3879%2013.6811%2023.8766%2013.4515%2023.3691%2012.9869L17.2721%207.39369C16.5798%206.75785%2015.9111%206.30785%2015.268%206.04367C14.6248%205.7795%2013.9482%205.73759%2013.2402%205.91978C12.5302%206.10015%2011.769%206.56473%2010.9528%207.31171C9.82782%208.34472%209.29089%209.31397%209.34596%2010.2195C9.40103%2011.1249%209.9596%2012.065%2011.0197%2013.0361L17.1659%2018.6767C17.6792%2019.1467%2017.931%2019.6168%2017.9231%2020.0832C17.9152%2020.5514%2017.695%2020.9832%2017.2603%2021.3822C16.8276%2021.7794%2016.3497%2021.9871%2015.8305%2022.0035C15.3112%2022.0199%2014.794%2021.7921%2014.2826%2021.3221L8.32127%2015.8528C7.35164%2014.9637%206.65146%2014.122%206.22074%2013.3276C5.79001%2012.5333%205.62874%2011.6351%205.74084%2010.633C5.84115%209.77491%206.13813%208.94413%206.63376%208.13885C7.12743%207.33357%207.83547%206.51008%208.75396%205.66654C9.84749%204.66268%2010.8919%203.89384%2011.887%203.3582C12.8803%202.82256%2013.842%202.52559%2014.7704%202.46365C15.7006%202.4017%2016.6172%202.57296%2017.5239%202.97742C18.4305%203.38188%2019.351%204.01226%2020.2872%204.87219H20.2892Z'%20fill='url(%23paint0_linear_3119_13572)'/%3e%3cpath%20d='M10.9371%2026.9408L4.97771%2021.4714C4.47027%2021.005%204.22049%2020.5368%204.22836%2020.0631C4.23623%2019.5894%204.45454%2019.1576%204.88133%2018.7659C5.32779%2018.356%205.80966%2018.1483%206.32495%2018.1392C6.84025%2018.1319%207.35162%2018.3596%207.85905%2018.826L13.9541%2024.4193C14.6484%2025.0551%2015.3151%2025.5051%2015.9583%2025.7693C16.6014%2026.0335%2017.278%2026.0735%2017.988%2025.8932C18.698%2025.7128%2019.4591%2025.2482%2020.2754%2024.4994C21.4004%2023.4664%2021.9373%2022.4972%2021.8822%2021.5917C21.8272%2020.6862%2021.2686%2019.7461%2020.2085%2018.7732L16.9338%2015.7944C16.4205%2015.3244%2016.1687%2014.8543%2016.1766%2014.3879C16.1845%2013.9197%2016.4047%2013.4879%2016.8394%2013.0889C17.2721%2012.6917%2017.75%2012.484%2018.2692%2012.4676C18.7885%2012.4512%2019.3057%2012.679%2019.8171%2013.149L22.905%2015.9566C23.8746%2016.8457%2024.5748%2017.6874%2025.0055%2018.4817C25.4362%2019.2761%2025.5975%2020.1743%2025.4854%2021.1763C25.3851%2022.0344%2025.0881%2022.8652%2024.5925%2023.6705C24.0988%2024.4757%2023.3908%2025.2992%2022.4723%2026.1428C21.3787%2027.1466%2020.3344%2027.9155%2019.3392%2028.4511C18.344%2028.9868%2017.3822%2029.2856%2016.4519%2029.3475C15.5216%2029.4094%2014.6051%2029.2382%2013.6984%2028.8337C12.7917%2028.4293%2011.8713%2027.7989%2010.9351%2026.9389L10.9371%2026.9408Z'%20fill='url(%23paint1_linear_3119_13572)'/%3e%3cpath%20d='M14.6543%2012.8284C15.8633%2012.8284%2016.8433%2011.9205%2016.8433%2010.8006C16.8433%209.6807%2015.8633%208.77284%2014.6543%208.77284C13.4453%208.77284%2012.4653%209.6807%2012.4653%2010.8006C12.4653%2011.9205%2013.4453%2012.8284%2014.6543%2012.8284Z'%20fill='url(%23paint2_radial_3119_13572)'/%3e%3cdefs%3e%3clinearGradient%20id='paint0_linear_3119_13572'%20x1='25.27'%20y1='8.05866'%20x2='7.28614'%20y2='16.6864'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20stop-color='%23201C1B'/%3e%3cstop%20offset='0.36'%20stop-color='%2377390D'/%3e%3cstop%20offset='0.67'%20stop-color='%23EA8101'/%3e%3cstop%20offset='1'%20stop-color='%23F4B852'/%3e%3c/linearGradient%3e%3clinearGradient%20id='paint1_linear_3119_13572'%20x1='6.4668'%20y1='23.9797'%20x2='27.5911'%20y2='17.1926'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20stop-color='%231F1D1C'/%3e%3cstop%20offset='0.37'%20stop-color='%2377390D'/%3e%3cstop%20offset='0.67'%20stop-color='%23EA8101'/%3e%3cstop%20offset='1'%20stop-color='%23F4FB52'/%3e%3c/linearGradient%3e%3cradialGradient%20id='paint2_radial_3119_13572'%20cx='0'%20cy='0'%20r='1'%20gradientUnits='userSpaceOnUse'%20gradientTransform='translate(14.6543%2010.8024)%20scale(2.18903%202.02777)'%3e%3cstop%20stop-color='%23F4B852'/%3e%3cstop%20offset='0.33'%20stop-color='%23EA8101'/%3e%3cstop%20offset='0.64'%20stop-color='%2377390D'/%3e%3cstop%20offset='1'%20stop-color='%23211C1D'/%3e%3c/radialGradient%3e%3c/defs%3e%3c/svg%3e";
const XverseWalletIcon = "data:image/svg+xml,%3csvg%20width='32'%20height='32'%20viewBox='0%200%2032%2032'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M27.0042%2026.6428V22.6649C27.0042%2022.5072%2026.9416%2022.3568%2026.8298%2022.245L9.90453%205.31965C9.79276%205.20788%209.64232%205.14521%209.4846%205.14521H5.50684C5.31046%205.14521%205.15063%205.30503%205.15063%205.50141V9.19714C5.15063%209.35487%205.21331%209.50528%205.32508%209.61706L11.4004%2015.6923C11.5393%2015.8313%2011.5393%2016.0569%2011.4004%2016.1959L5.25509%2022.3411C5.18824%2022.4079%205.15063%2022.4988%205.15063%2022.5929V26.6428C5.15063%2026.839%205.31046%2026.999%205.50684%2026.999H12.1535C12.3499%2026.999%2012.5097%2026.839%2012.5097%2026.6428V24.2569C12.5097%2024.1629%2012.5473%2024.072%2012.6142%2024.0051L15.9108%2020.7084C16.0498%2020.5695%2016.2754%2020.5695%2016.4144%2020.7084L22.5314%2026.8256C22.6432%2026.9373%2022.7936%2027%2022.9513%2027H26.647C26.8434%2027%2027.0032%2026.8401%2027.0032%2026.6438L27.0042%2026.6428Z'%20fill='white'/%3e%3cpath%20d='M18.1379%2010.413H21.467C21.6644%2010.413%2021.8253%2010.5739%2021.8253%2010.7713V14.1003C21.8253%2014.42%2022.2118%2014.5799%2022.4374%2014.3531L27.0043%209.77894C27.0711%209.71207%2027.1088%209.62121%2027.1088%209.52614V5.52017C27.1088%205.32275%2026.9488%205.16188%2026.7504%205.16188L22.6849%205.15666C22.5899%205.15666%2022.4991%205.19426%2022.4311%205.26112L17.8841%209.80087C17.6585%2010.0265%2017.8182%2010.413%2018.1369%2010.413H18.1379Z'%20fill='%23EE7A30'/%3e%3c/svg%3e";
function truncateMiddle(value3, frontStringToKeep = 4, backStringToKeep = 5) {
  if (value3.length <= frontStringToKeep + backStringToKeep) {
    return value3;
  }
  const front = value3.slice(0, frontStringToKeep);
  const back = value3.slice(value3.length - backStringToKeep);
  return `${front}...${back}`;
}
const WALLET_TO_ICON = {
  [Wallet.XVERSE]: XverseWalletIcon,
  [Wallet.MAGICEDEN]: MagicEdenWalletIcon,
  [Wallet.UNISAT]: UnisatWalletIcon,
  [Wallet.LEATHER]: LeatherWalletIcon,
  [Wallet.OKX]: OKXWalletIcon
};
const NETWORK_DISPLAY_NAME = {
  [Network.MAINNET]: "Mainnet",
  [Network.TESTNET]: "Testnet",
  [Network.SIGNET]: "Signet"
};
function PostConnectButton({
  address: address2,
  network,
  onViewProfile,
  onChangeWallet,
  onDisconnectWallet
}) {
  const { wallet } = useWallie();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    qe$1,
    {
      as: "section",
      className: "wallie-relative wallie-inline-block wallie-text-left",
      children: ({ open }) => /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs(qe$1.Button, { children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "wallet-identifier-container", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "img",
            {
              src: WALLET_TO_ICON[wallet],
              alt: `${wallet} is connected`
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { className: "address-container", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "address", children: truncateMiddle(address2) }),
            /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { className: "network-container", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "status-indicator" }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "network", children: NETWORK_DISPLAY_NAME[network] ?? network })
            ] })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "img",
            {
              src: ChevronDownIcon,
              className: `dropdown-button ${open ? "close-dropdown-button" : "expand-dropdown-button"}`,
              alt: "ord connect dropdown"
            }
          )
        ] }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          qe,
          {
            as: Fragment,
            enter: "transition ease-out duration-100",
            enterFrom: "transform opacity-0 scale-95",
            enterTo: "transform opacity-100 scale-100",
            leave: "transition ease-in duration-75",
            leaveFrom: "transform opacity-100 scale-100",
            leaveTo: "transform opacity-0 scale-95",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(qe$1.Items, { className: "ord-wallet-connection-dropdown", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                qe$1.Item,
                {
                  as: "button",
                  className: "dropdown-button",
                  onClick: () => onViewProfile == null ? void 0 : onViewProfile(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: "View profile" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "value", children: truncateMiddle(address2) })
                  ]
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                qe$1.Item,
                {
                  as: "button",
                  className: "dropdown-button",
                  onClick: () => onChangeWallet == null ? void 0 : onChangeWallet(),
                  children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "change-wallet-label", children: "Change wallet" })
                }
              ),
              /* @__PURE__ */ jsxRuntimeExports.jsx("hr", { className: "horizontal-separator" }),
              /* @__PURE__ */ jsxRuntimeExports.jsxs(
                qe$1.Item,
                {
                  as: "button",
                  className: "dropdown-button",
                  onClick: () => onDisconnectWallet == null ? void 0 : onDisconnectWallet(),
                  children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "label", children: "Disconnect wallet" }),
                    /* @__PURE__ */ jsxRuntimeExports.jsx("img", { src: LogoutIcon, className: "logout-icon", alt: "logout" })
                  ]
                }
              )
            ] })
          }
        )
      ] })
    }
  );
}
const WalletIcon = "data:image/svg+xml,%3csvg%20viewBox='0%200%2030%2030'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%20%3e%3cpath%20d='M9%206.25C7.61929%206.25%206.5%207.36929%206.5%208.75V21.25C6.5%2022.6308%207.61929%2023.75%209%2023.75H25C26.3808%2023.75%2027.5%2022.6308%2027.5%2021.25V18.75H23.75C21.6789%2018.75%2020%2017.0711%2020%2015C20%2012.9289%2021.6789%2011.25%2023.75%2011.25H27.5V8.75C27.5%207.36929%2026.3808%206.25%2025%206.25H9Z'%20fill='%231C2033'%20/%3e%3cpath%20d='M25%2015C25%2015.6904%2024.4404%2016.25%2023.75%2016.25C23.0596%2016.25%2022.5%2015.6904%2022.5%2015C22.5%2014.3096%2023.0596%2013.75%2023.75%2013.75C24.4404%2013.75%2025%2014.3096%2025%2015Z'%20fill='%231C2033'%20/%3e%3c/svg%3e";
function PreConnectButton({
  openModal,
  disabled,
  connectButton = "Wallet Connect",
  connectButtonComponent
}) {
  if (connectButtonComponent) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx("button", { onClick: openModal, "aria-label": "Connect Button", type: "button", className: "wallie-w-full", children: connectButtonComponent });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "button",
    {
      type: "button",
      onClick: openModal,
      disabled,
      className: "wallie-bg-ord-orange wallie-rounded-full wallie-flex wallie-flex-row md:wallie-space-x-2 wallie-items-center wallie-p-1 wallie-pr-2 wallie-px-1 md:wallie-pr-3 md:wallie-px-3",
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "wallie-w-6 md:wallie-w-7", src: WalletIcon, alt: "" }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "wallie-hidden md:wallie-block wallie-text-ord-blue wallie-mb-1 wallie-pr-2", children: connectButton })
      ]
    }
  );
}
const CloseModalIcon = "data:image/svg+xml,%3csvg%20width='19'%20height='19'%20viewBox='0%200%2019%2019'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20fill-rule='evenodd'%20clip-rule='evenodd'%20d='M4.07844%204.07811C4.25659%203.90001%204.49818%203.79996%204.75009%203.79996C5.002%203.79996%205.24359%203.90001%205.42174%204.07811L9.50009%208.15646L13.5784%204.07811C13.6661%203.98738%2013.7709%203.915%2013.8868%203.86521C14.0027%203.81542%2014.1274%203.78922%2014.2535%203.78812C14.3796%203.78703%2014.5047%203.81106%2014.6215%203.85883C14.7382%203.9066%2014.8443%203.97714%2014.9335%204.06633C15.0227%204.15553%2015.0933%204.2616%2015.141%204.37835C15.1888%204.4951%2015.2128%204.6202%2015.2117%204.74634C15.2106%204.87248%2015.1844%204.99714%2015.1346%205.11304C15.0848%205.22895%2015.0125%205.33378%2014.9217%205.42141L10.8434%209.49976L14.9217%2013.5781C15.0948%2013.7573%2015.1905%2013.9973%2015.1884%2014.2463C15.1862%2014.4954%2015.0863%2014.7337%2014.9102%2014.9098C14.734%2015.086%2014.4958%2015.1859%2014.2467%2015.1881C13.9976%2015.1902%2013.7576%2015.0945%2013.5784%2014.9214L9.50009%2010.8431L5.42174%2014.9214C5.24257%2015.0945%205.0026%2015.1902%204.75351%2015.1881C4.50442%2015.1859%204.26615%2015.086%204.09001%2014.9098C3.91387%2014.7337%203.81396%2014.4954%203.8118%2014.2463C3.80964%2013.9973%203.90539%2013.7573%204.07844%2013.5781L8.15679%209.49976L4.07844%205.42141C3.90034%205.24326%203.80029%205.00167%203.80029%204.74976C3.80029%204.49785%203.90034%204.25626%204.07844%204.07811Z'%20fill='%23D9D5D2'/%3e%3c/svg%3e";
var buffer$1 = {};
var base64Js$1 = {};
base64Js$1.byteLength = byteLength$1;
base64Js$1.toByteArray = toByteArray$1;
base64Js$1.fromByteArray = fromByteArray$1;
var lookup$1 = [];
var revLookup$1 = [];
var Arr$1 = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i$2 = 0, len$1 = code$1.length; i$2 < len$1; ++i$2) {
  lookup$1[i$2] = code$1[i$2];
  revLookup$1[code$1.charCodeAt(i$2)] = i$2;
}
revLookup$1["-".charCodeAt(0)] = 62;
revLookup$1["_".charCodeAt(0)] = 63;
function getLens$1(b64) {
  var len2 = b64.length;
  if (len2 % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1) validLen = len2;
  var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength$1(b64) {
  var lens = getLens$1(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength$1(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray$1(b64) {
  var tmp;
  var lens = getLens$1(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr$1(_byteLength$1(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i2;
  for (i2 = 0; i2 < len2; i2 += 4) {
    tmp = revLookup$1[b64.charCodeAt(i2)] << 18 | revLookup$1[b64.charCodeAt(i2 + 1)] << 12 | revLookup$1[b64.charCodeAt(i2 + 2)] << 6 | revLookup$1[b64.charCodeAt(i2 + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup$1[b64.charCodeAt(i2)] << 2 | revLookup$1[b64.charCodeAt(i2 + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup$1[b64.charCodeAt(i2)] << 10 | revLookup$1[b64.charCodeAt(i2 + 1)] << 4 | revLookup$1[b64.charCodeAt(i2 + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64$1(num) {
  return lookup$1[num >> 18 & 63] + lookup$1[num >> 12 & 63] + lookup$1[num >> 6 & 63] + lookup$1[num & 63];
}
function encodeChunk$1(uint8, start, end) {
  var tmp;
  var output2 = [];
  for (var i2 = start; i2 < end; i2 += 3) {
    tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
    output2.push(tripletToBase64$1(tmp));
  }
  return output2.join("");
}
function fromByteArray$1(uint8) {
  var tmp;
  var len2 = uint8.length;
  var extraBytes = len2 % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
    parts.push(encodeChunk$1(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len2 - 1];
    parts.push(
      lookup$1[tmp >> 2] + lookup$1[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
    parts.push(
      lookup$1[tmp >> 10] + lookup$1[tmp >> 4 & 63] + lookup$1[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
var ieee754 = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {
  var e2, m2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i2 = isLE ? nBytes - 1 : 0;
  var d2 = isLE ? -1 : 1;
  var s2 = buffer2[offset + i2];
  i2 += d2;
  e2 = s2 & (1 << -nBits) - 1;
  s2 >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e2 = e2 * 256 + buffer2[offset + i2], i2 += d2, nBits -= 8) {
  }
  m2 = e2 & (1 << -nBits) - 1;
  e2 >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m2 = m2 * 256 + buffer2[offset + i2], i2 += d2, nBits -= 8) {
  }
  if (e2 === 0) {
    e2 = 1 - eBias;
  } else if (e2 === eMax) {
    return m2 ? NaN : (s2 ? -1 : 1) * Infinity;
  } else {
    m2 = m2 + Math.pow(2, mLen);
    e2 = e2 - eBias;
  }
  return (s2 ? -1 : 1) * m2 * Math.pow(2, e2 - mLen);
};
ieee754.write = function(buffer2, value3, offset, isLE, mLen, nBytes) {
  var e2, m2, c2;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i2 = isLE ? 0 : nBytes - 1;
  var d2 = isLE ? 1 : -1;
  var s2 = value3 < 0 || value3 === 0 && 1 / value3 < 0 ? 1 : 0;
  value3 = Math.abs(value3);
  if (isNaN(value3) || value3 === Infinity) {
    m2 = isNaN(value3) ? 1 : 0;
    e2 = eMax;
  } else {
    e2 = Math.floor(Math.log(value3) / Math.LN2);
    if (value3 * (c2 = Math.pow(2, -e2)) < 1) {
      e2--;
      c2 *= 2;
    }
    if (e2 + eBias >= 1) {
      value3 += rt / c2;
    } else {
      value3 += rt * Math.pow(2, 1 - eBias);
    }
    if (value3 * c2 >= 2) {
      e2++;
      c2 /= 2;
    }
    if (e2 + eBias >= eMax) {
      m2 = 0;
      e2 = eMax;
    } else if (e2 + eBias >= 1) {
      m2 = (value3 * c2 - 1) * Math.pow(2, mLen);
      e2 = e2 + eBias;
    } else {
      m2 = value3 * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e2 = 0;
    }
  }
  for (; mLen >= 8; buffer2[offset + i2] = m2 & 255, i2 += d2, m2 /= 256, mLen -= 8) {
  }
  e2 = e2 << mLen | m2;
  eLen += mLen;
  for (; eLen > 0; buffer2[offset + i2] = e2 & 255, i2 += d2, e2 /= 256, eLen -= 8) {
  }
  buffer2[offset + i2 - d2] |= s2 * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(exports2) {
  const base64 = base64Js$1;
  const ieee754$1 = ieee754;
  const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
  exports2.Buffer = Buffer2;
  exports2.SlowBuffer = SlowBuffer2;
  exports2.INSPECT_MAX_BYTES = 50;
  const K_MAX_LENGTH = 2147483647;
  exports2.kMaxLength = K_MAX_LENGTH;
  const { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
  Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
  if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
    console.error(
      "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
    );
  }
  function typedArraySupport() {
    try {
      const arr = new GlobalUint8Array(1);
      const proto = { foo: function() {
        return 42;
      } };
      Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
      Object.setPrototypeOf(arr, proto);
      return arr.foo() === 42;
    } catch (e2) {
      return false;
    }
  }
  Object.defineProperty(Buffer2.prototype, "parent", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this)) return void 0;
      return this.buffer;
    }
  });
  Object.defineProperty(Buffer2.prototype, "offset", {
    enumerable: true,
    get: function() {
      if (!Buffer2.isBuffer(this)) return void 0;
      return this.byteOffset;
    }
  });
  function createBuffer(length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"');
    }
    const buf = new GlobalUint8Array(length);
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function Buffer2(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      if (typeof encodingOrOffset === "string") {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      }
      return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
  }
  Buffer2.poolSize = 8192;
  function from(value3, encodingOrOffset, length) {
    if (typeof value3 === "string") {
      return fromString(value3, encodingOrOffset);
    }
    if (GlobalArrayBuffer.isView(value3)) {
      return fromArrayView(value3);
    }
    if (value3 == null) {
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value3
      );
    }
    if (isInstance(value3, GlobalArrayBuffer) || value3 && isInstance(value3.buffer, GlobalArrayBuffer)) {
      return fromArrayBuffer(value3, encodingOrOffset, length);
    }
    if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value3, GlobalSharedArrayBuffer) || value3 && isInstance(value3.buffer, GlobalSharedArrayBuffer))) {
      return fromArrayBuffer(value3, encodingOrOffset, length);
    }
    if (typeof value3 === "number") {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    }
    const valueOf = value3.valueOf && value3.valueOf();
    if (valueOf != null && valueOf !== value3) {
      return Buffer2.from(valueOf, encodingOrOffset, length);
    }
    const b2 = fromObject(value3);
    if (b2) return b2;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value3[Symbol.toPrimitive] === "function") {
      return Buffer2.from(value3[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    }
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value3
    );
  }
  Buffer2.from = function(value3, encodingOrOffset, length) {
    return from(value3, encodingOrOffset, length);
  };
  Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
  Object.setPrototypeOf(Buffer2, GlobalUint8Array);
  function assertSize(size) {
    if (typeof size !== "number") {
      throw new TypeError('"size" argument must be of type number');
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }
  }
  function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(size);
    }
    if (fill !== void 0) {
      return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    }
    return createBuffer(size);
  }
  Buffer2.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
  };
  function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
  }
  Buffer2.allocUnsafe = function(size) {
    return allocUnsafe(size);
  };
  Buffer2.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
  };
  function fromString(string2, encoding) {
    if (typeof encoding !== "string" || encoding === "") {
      encoding = "utf8";
    }
    if (!Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    const length = byteLength2(string2, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string2, encoding);
    if (actual !== length) {
      buf = buf.slice(0, actual);
    }
    return buf;
  }
  function fromArrayLike(array2) {
    const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
    const buf = createBuffer(length);
    for (let i2 = 0; i2 < length; i2 += 1) {
      buf[i2] = array2[i2] & 255;
    }
    return buf;
  }
  function fromArrayView(arrayView) {
    if (isInstance(arrayView, GlobalUint8Array)) {
      const copy = new GlobalUint8Array(arrayView);
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
  }
  function fromArrayBuffer(array2, byteOffset, length) {
    if (byteOffset < 0 || array2.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds');
    }
    if (array2.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds');
    }
    let buf;
    if (byteOffset === void 0 && length === void 0) {
      buf = new GlobalUint8Array(array2);
    } else if (length === void 0) {
      buf = new GlobalUint8Array(array2, byteOffset);
    } else {
      buf = new GlobalUint8Array(array2, byteOffset, length);
    }
    Object.setPrototypeOf(buf, Buffer2.prototype);
    return buf;
  }
  function fromObject(obj) {
    if (Buffer2.isBuffer(obj)) {
      const len2 = checked(obj.length) | 0;
      const buf = createBuffer(len2);
      if (buf.length === 0) {
        return buf;
      }
      obj.copy(buf, 0, 0, len2);
      return buf;
    }
    if (obj.length !== void 0) {
      if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }
  function checked(length) {
    if (length >= K_MAX_LENGTH) {
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    }
    return length | 0;
  }
  function SlowBuffer2(length) {
    if (+length != length) {
      length = 0;
    }
    return Buffer2.alloc(+length);
  }
  Buffer2.isBuffer = function isBuffer(b2) {
    return b2 != null && b2._isBuffer === true && b2 !== Buffer2.prototype;
  };
  Buffer2.compare = function compare2(a2, b2) {
    if (isInstance(a2, GlobalUint8Array)) a2 = Buffer2.from(a2, a2.offset, a2.byteLength);
    if (isInstance(b2, GlobalUint8Array)) b2 = Buffer2.from(b2, b2.offset, b2.byteLength);
    if (!Buffer2.isBuffer(a2) || !Buffer2.isBuffer(b2)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    }
    if (a2 === b2) return 0;
    let x2 = a2.length;
    let y2 = b2.length;
    for (let i2 = 0, len2 = Math.min(x2, y2); i2 < len2; ++i2) {
      if (a2[i2] !== b2[i2]) {
        x2 = a2[i2];
        y2 = b2[i2];
        break;
      }
    }
    if (x2 < y2) return -1;
    if (y2 < x2) return 1;
    return 0;
  };
  Buffer2.isEncoding = function isEncoding(encoding) {
    switch (String(encoding).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return true;
      default:
        return false;
    }
  };
  Buffer2.concat = function concat(list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    if (list.length === 0) {
      return Buffer2.alloc(0);
    }
    let i2;
    if (length === void 0) {
      length = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        length += list[i2].length;
      }
    }
    const buffer2 = Buffer2.allocUnsafe(length);
    let pos = 0;
    for (i2 = 0; i2 < list.length; ++i2) {
      let buf = list[i2];
      if (isInstance(buf, GlobalUint8Array)) {
        if (pos + buf.length > buffer2.length) {
          if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
          buf.copy(buffer2, pos);
        } else {
          GlobalUint8Array.prototype.set.call(
            buffer2,
            buf,
            pos
          );
        }
      } else if (!Buffer2.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      } else {
        buf.copy(buffer2, pos);
      }
      pos += buf.length;
    }
    return buffer2;
  };
  function byteLength2(string2, encoding) {
    if (Buffer2.isBuffer(string2)) {
      return string2.length;
    }
    if (GlobalArrayBuffer.isView(string2) || isInstance(string2, GlobalArrayBuffer)) {
      return string2.byteLength;
    }
    if (typeof string2 !== "string") {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
      );
    }
    const len2 = string2.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len2 === 0) return 0;
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "ascii":
        case "latin1":
        case "binary":
          return len2;
        case "utf8":
        case "utf-8":
          return utf8ToBytes(string2).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return len2 * 2;
        case "hex":
          return len2 >>> 1;
        case "base64":
          return base64ToBytes(string2).length;
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string2).length;
          }
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.byteLength = byteLength2;
  function slowToString(encoding, start, end) {
    let loweredCase = false;
    if (start === void 0 || start < 0) {
      start = 0;
    }
    if (start > this.length) {
      return "";
    }
    if (end === void 0 || end > this.length) {
      end = this.length;
    }
    if (end <= 0) {
      return "";
    }
    end >>>= 0;
    start >>>= 0;
    if (end <= start) {
      return "";
    }
    if (!encoding) encoding = "utf8";
    while (true) {
      switch (encoding) {
        case "hex":
          return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
          return utf8Slice(this, start, end);
        case "ascii":
          return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
          return latin1Slice(this, start, end);
        case "base64":
          return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return utf16leSlice(this, start, end);
        default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = (encoding + "").toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer2.prototype._isBuffer = true;
  function swap(b2, n2, m2) {
    const i2 = b2[n2];
    b2[n2] = b2[m2];
    b2[m2] = i2;
  }
  Buffer2.prototype.swap16 = function swap16() {
    const len2 = this.length;
    if (len2 % 2 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    }
    for (let i2 = 0; i2 < len2; i2 += 2) {
      swap(this, i2, i2 + 1);
    }
    return this;
  };
  Buffer2.prototype.swap32 = function swap32() {
    const len2 = this.length;
    if (len2 % 4 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    }
    for (let i2 = 0; i2 < len2; i2 += 4) {
      swap(this, i2, i2 + 3);
      swap(this, i2 + 1, i2 + 2);
    }
    return this;
  };
  Buffer2.prototype.swap64 = function swap64() {
    const len2 = this.length;
    if (len2 % 8 !== 0) {
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    }
    for (let i2 = 0; i2 < len2; i2 += 8) {
      swap(this, i2, i2 + 7);
      swap(this, i2 + 1, i2 + 6);
      swap(this, i2 + 2, i2 + 5);
      swap(this, i2 + 3, i2 + 4);
    }
    return this;
  };
  Buffer2.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
  };
  Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
  Buffer2.prototype.equals = function equals(b2) {
    if (!Buffer2.isBuffer(b2)) throw new TypeError("Argument must be a Buffer");
    if (this === b2) return true;
    return Buffer2.compare(this, b2) === 0;
  };
  Buffer2.prototype.inspect = function inspect() {
    let str = "";
    const max = exports2.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
  };
  if (customInspectSymbol) {
    Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
  }
  Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, GlobalUint8Array)) {
      target = Buffer2.from(target, target.offset, target.byteLength);
    }
    if (!Buffer2.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
      );
    }
    if (start === void 0) {
      start = 0;
    }
    if (end === void 0) {
      end = target ? target.length : 0;
    }
    if (thisStart === void 0) {
      thisStart = 0;
    }
    if (thisEnd === void 0) {
      thisEnd = this.length;
    }
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError("out of range index");
    }
    if (thisStart >= thisEnd && start >= end) {
      return 0;
    }
    if (thisStart >= thisEnd) {
      return -1;
    }
    if (start >= end) {
      return 1;
    }
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x2 = thisEnd - thisStart;
    let y2 = end - start;
    const len2 = Math.min(x2, y2);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for (let i2 = 0; i2 < len2; ++i2) {
      if (thisCopy[i2] !== targetCopy[i2]) {
        x2 = thisCopy[i2];
        y2 = targetCopy[i2];
        break;
      }
    }
    if (x2 < y2) return -1;
    if (y2 < x2) return 1;
    return 0;
  };
  function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
    if (buffer2.length === 0) return -1;
    if (typeof byteOffset === "string") {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 2147483647) {
      byteOffset = 2147483647;
    } else if (byteOffset < -2147483648) {
      byteOffset = -2147483648;
    }
    byteOffset = +byteOffset;
    if (numberIsNaN(byteOffset)) {
      byteOffset = dir ? 0 : buffer2.length - 1;
    }
    if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;
    if (byteOffset >= buffer2.length) {
      if (dir) return -1;
      else byteOffset = buffer2.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1;
    }
    if (typeof val === "string") {
      val = Buffer2.from(val, encoding);
    }
    if (Buffer2.isBuffer(val)) {
      if (val.length === 0) {
        return -1;
      }
      return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
      val = val & 255;
      if (typeof GlobalUint8Array.prototype.indexOf === "function") {
        if (dir) {
          return GlobalUint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
        } else {
          return GlobalUint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
        }
      }
      return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
  }
  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== void 0) {
      encoding = String(encoding).toLowerCase();
      if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
        if (arr.length < 2 || val.length < 2) {
          return -1;
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }
    function read(buf, i3) {
      if (indexSize === 1) {
        return buf[i3];
      } else {
        return buf.readUInt16BE(i3 * indexSize);
      }
    }
    let i2;
    if (dir) {
      let foundIndex = -1;
      for (i2 = byteOffset; i2 < arrLength; i2++) {
        if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
          if (foundIndex === -1) foundIndex = i2;
          if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
          if (foundIndex !== -1) i2 -= i2 - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i2 = byteOffset; i2 >= 0; i2--) {
        let found = true;
        for (let j2 = 0; j2 < valLength; j2++) {
          if (read(arr, i2 + j2) !== read(val, j2)) {
            found = false;
            break;
          }
        }
        if (found) return i2;
      }
    }
    return -1;
  }
  Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
  };
  Buffer2.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
  };
  Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
  };
  function hexWrite(buf, string2, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }
    const strLen = string2.length;
    if (length > strLen / 2) {
      length = strLen / 2;
    }
    let i2;
    for (i2 = 0; i2 < length; ++i2) {
      const parsed = parseInt(string2.substr(i2 * 2, 2), 16);
      if (numberIsNaN(parsed)) return i2;
      buf[offset + i2] = parsed;
    }
    return i2;
  }
  function utf8Write(buf, string2, offset, length) {
    return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length);
  }
  function asciiWrite(buf, string2, offset, length) {
    return blitBuffer(asciiToBytes(string2), buf, offset, length);
  }
  function base64Write(buf, string2, offset, length) {
    return blitBuffer(base64ToBytes(string2), buf, offset, length);
  }
  function ucs2Write(buf, string2, offset, length) {
    return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
  }
  Buffer2.prototype.write = function write(string2, offset, length, encoding) {
    if (offset === void 0) {
      encoding = "utf8";
      length = this.length;
      offset = 0;
    } else if (length === void 0 && typeof offset === "string") {
      encoding = offset;
      length = this.length;
      offset = 0;
    } else if (isFinite(offset)) {
      offset = offset >>> 0;
      if (isFinite(length)) {
        length = length >>> 0;
        if (encoding === void 0) encoding = "utf8";
      } else {
        encoding = length;
        length = void 0;
      }
    } else {
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    }
    const remaining = this.length - offset;
    if (length === void 0 || length > remaining) length = remaining;
    if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
      throw new RangeError("Attempt to write outside buffer bounds");
    }
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for (; ; ) {
      switch (encoding) {
        case "hex":
          return hexWrite(this, string2, offset, length);
        case "utf8":
        case "utf-8":
          return utf8Write(this, string2, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
          return asciiWrite(this, string2, offset, length);
        case "base64":
          return base64Write(this, string2, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return ucs2Write(this, string2, offset, length);
        default:
          if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
          encoding = ("" + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };
  Buffer2.prototype.toJSON = function toJSON() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf);
    } else {
      return base64.fromByteArray(buf.slice(start, end));
    }
  }
  function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i2 = start;
    while (i2 < end) {
      const firstByte = buf[i2];
      let codePoint = null;
      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
      if (i2 + bytesPerSequence <= end) {
        let secondByte, thirdByte, fourthByte, tempCodePoint;
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 128) {
              codePoint = firstByte;
            }
            break;
          case 2:
            secondByte = buf[i2 + 1];
            if ((secondByte & 192) === 128) {
              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
              if (tempCodePoint > 127) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 3:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                codePoint = tempCodePoint;
              }
            }
            break;
          case 4:
            secondByte = buf[i2 + 1];
            thirdByte = buf[i2 + 2];
            fourthByte = buf[i2 + 3];
            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                codePoint = tempCodePoint;
              }
            }
        }
      }
      if (codePoint === null) {
        codePoint = 65533;
        bytesPerSequence = 1;
      } else if (codePoint > 65535) {
        codePoint -= 65536;
        res.push(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      res.push(codePoint);
      i2 += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
  }
  const MAX_ARGUMENTS_LENGTH = 4096;
  function decodeCodePointsArray(codePoints) {
    const len2 = codePoints.length;
    if (len2 <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints);
    }
    let res = "";
    let i2 = 0;
    while (i2 < len2) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res;
  }
  function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2] & 127);
    }
    return ret;
  }
  function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for (let i2 = start; i2 < end; ++i2) {
      ret += String.fromCharCode(buf[i2]);
    }
    return ret;
  }
  function hexSlice(buf, start, end) {
    const len2 = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len2) end = len2;
    let out = "";
    for (let i2 = start; i2 < end; ++i2) {
      out += hexSliceLookupTable[buf[i2]];
    }
    return out;
  }
  function utf16leSlice(buf, start, end) {
    const bytes2 = buf.slice(start, end);
    let res = "";
    for (let i2 = 0; i2 < bytes2.length - 1; i2 += 2) {
      res += String.fromCharCode(bytes2[i2] + bytes2[i2 + 1] * 256);
    }
    return res;
  }
  Buffer2.prototype.slice = function slice(start, end) {
    const len2 = this.length;
    start = ~~start;
    end = end === void 0 ? len2 : ~~end;
    if (start < 0) {
      start += len2;
      if (start < 0) start = 0;
    } else if (start > len2) {
      start = len2;
    }
    if (end < 0) {
      end += len2;
      if (end < 0) end = 0;
    } else if (end > len2) {
      end = len2;
    }
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    Object.setPrototypeOf(newBuf, Buffer2.prototype);
    return newBuf;
  };
  function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
  }
  Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      checkOffset(offset, byteLength3, this.length);
    }
    let val = this[offset + --byteLength3];
    let mul = 1;
    while (byteLength3 > 0 && (mul *= 256)) {
      val += this[offset + --byteLength3] * mul;
    }
    return val;
  };
  Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
  };
  Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
  };
  Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
  };
  Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
  };
  Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
  };
  Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
  });
  Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
  });
  Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i2 = 0;
    while (++i2 < byteLength3 && (mul *= 256)) {
      val += this[offset + i2] * mul;
    }
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let i2 = byteLength3;
    let mul = 1;
    let val = this[offset + --i2];
    while (i2 > 0 && (mul *= 256)) {
      val += this[offset + --i2] * mul;
    }
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
  };
  Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
  };
  Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
  };
  Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
  };
  Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
  };
  Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
  });
  Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
  });
  Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, true, 23, 4);
  };
  Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754$1.read(this, offset, false, 23, 4);
  };
  Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, true, 52, 8);
  };
  Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754$1.read(this, offset, false, 52, 8);
  };
  function checkInt(buf, value3, offset, ext, max, min) {
    if (!Buffer2.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value3 > max || value3 < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
  }
  Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value3, offset, byteLength3, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value3, offset, byteLength3, maxBytes, 0);
    }
    let mul = 1;
    let i2 = 0;
    this[offset] = value3 & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      this[offset + i2] = value3 / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value3, offset, byteLength3, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) {
      const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
      checkInt(this, value3, offset, byteLength3, maxBytes, 0);
    }
    let i2 = byteLength3 - 1;
    let mul = 1;
    this[offset + i2] = value3 & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      this[offset + i2] = value3 / mul & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 1, 255, 0);
    this[offset] = value3 & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 2, 65535, 0);
    this[offset] = value3 & 255;
    this[offset + 1] = value3 >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 2, 65535, 0);
    this[offset] = value3 >>> 8;
    this[offset + 1] = value3 & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 4, 4294967295, 0);
    this[offset + 3] = value3 >>> 24;
    this[offset + 2] = value3 >>> 16;
    this[offset + 1] = value3 >>> 8;
    this[offset] = value3 & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 4, 4294967295, 0);
    this[offset] = value3 >>> 24;
    this[offset + 1] = value3 >>> 16;
    this[offset + 2] = value3 >>> 8;
    this[offset + 3] = value3 & 255;
    return offset + 4;
  };
  function wrtBigUInt64LE(buf, value3, offset, min, max) {
    checkIntBI(value3, min, max, buf, offset, 7);
    let lo = Number(value3 & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value3 >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
  }
  function wrtBigUInt64BE(buf, value3, offset, min, max) {
    checkIntBI(value3, min, max, buf, offset, 7);
    let lo = Number(value3 & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value3 >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
  }
  Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value3, offset = 0) {
    return wrtBigUInt64LE(this, value3, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value3, offset = 0) {
    return wrtBigUInt64BE(this, value3, offset, BigInt(0), BigInt("0xffffffffffffffff"));
  });
  Buffer2.prototype.writeIntLE = function writeIntLE(value3, offset, byteLength3, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value3, offset, byteLength3, limit - 1, -limit);
    }
    let i2 = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value3 & 255;
    while (++i2 < byteLength3 && (mul *= 256)) {
      if (value3 < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value3 / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeIntBE = function writeIntBE(value3, offset, byteLength3, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) {
      const limit = Math.pow(2, 8 * byteLength3 - 1);
      checkInt(this, value3, offset, byteLength3, limit - 1, -limit);
    }
    let i2 = byteLength3 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i2] = value3 & 255;
    while (--i2 >= 0 && (mul *= 256)) {
      if (value3 < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
        sub = 1;
      }
      this[offset + i2] = (value3 / mul >> 0) - sub & 255;
    }
    return offset + byteLength3;
  };
  Buffer2.prototype.writeInt8 = function writeInt8(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 1, 127, -128);
    if (value3 < 0) value3 = 255 + value3 + 1;
    this[offset] = value3 & 255;
    return offset + 1;
  };
  Buffer2.prototype.writeInt16LE = function writeInt16LE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 2, 32767, -32768);
    this[offset] = value3 & 255;
    this[offset + 1] = value3 >>> 8;
    return offset + 2;
  };
  Buffer2.prototype.writeInt16BE = function writeInt16BE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 2, 32767, -32768);
    this[offset] = value3 >>> 8;
    this[offset + 1] = value3 & 255;
    return offset + 2;
  };
  Buffer2.prototype.writeInt32LE = function writeInt32LE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 4, 2147483647, -2147483648);
    this[offset] = value3 & 255;
    this[offset + 1] = value3 >>> 8;
    this[offset + 2] = value3 >>> 16;
    this[offset + 3] = value3 >>> 24;
    return offset + 4;
  };
  Buffer2.prototype.writeInt32BE = function writeInt32BE(value3, offset, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value3, offset, 4, 2147483647, -2147483648);
    if (value3 < 0) value3 = 4294967295 + value3 + 1;
    this[offset] = value3 >>> 24;
    this[offset + 1] = value3 >>> 16;
    this[offset + 2] = value3 >>> 8;
    this[offset + 3] = value3 & 255;
    return offset + 4;
  };
  Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value3, offset = 0) {
    return wrtBigUInt64LE(this, value3, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value3, offset = 0) {
    return wrtBigUInt64BE(this, value3, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function checkIEEE754(buf, value3, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
  }
  function writeFloat(buf, value3, offset, littleEndian, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value3, offset, 4);
    }
    ieee754$1.write(buf, value3, offset, littleEndian, 23, 4);
    return offset + 4;
  }
  Buffer2.prototype.writeFloatLE = function writeFloatLE(value3, offset, noAssert) {
    return writeFloat(this, value3, offset, true, noAssert);
  };
  Buffer2.prototype.writeFloatBE = function writeFloatBE(value3, offset, noAssert) {
    return writeFloat(this, value3, offset, false, noAssert);
  };
  function writeDouble(buf, value3, offset, littleEndian, noAssert) {
    value3 = +value3;
    offset = offset >>> 0;
    if (!noAssert) {
      checkIEEE754(buf, value3, offset, 8);
    }
    ieee754$1.write(buf, value3, offset, littleEndian, 52, 8);
    return offset + 8;
  }
  Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value3, offset, noAssert) {
    return writeDouble(this, value3, offset, true, noAssert);
  };
  Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value3, offset, noAssert) {
    return writeDouble(this, value3, offset, false, noAssert);
  };
  Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    if (targetStart < 0) {
      throw new RangeError("targetStart out of bounds");
    }
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }
    const len2 = end - start;
    if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
      this.copyWithin(targetStart, start, end);
    } else {
      GlobalUint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      );
    }
    return len2;
  };
  Buffer2.prototype.fill = function fill(val, start, end, encoding) {
    if (typeof val === "string") {
      if (typeof start === "string") {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === "string") {
        encoding = end;
        end = this.length;
      }
      if (encoding !== void 0 && typeof encoding !== "string") {
        throw new TypeError("encoding must be a string");
      }
      if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      if (val.length === 1) {
        const code2 = val.charCodeAt(0);
        if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
          val = code2;
        }
      }
    } else if (typeof val === "number") {
      val = val & 255;
    } else if (typeof val === "boolean") {
      val = Number(val);
    }
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError("Out of range index");
    }
    if (end <= start) {
      return this;
    }
    start = start >>> 0;
    end = end === void 0 ? this.length : end >>> 0;
    if (!val) val = 0;
    let i2;
    if (typeof val === "number") {
      for (i2 = start; i2 < end; ++i2) {
        this[i2] = val;
      }
    } else {
      const bytes2 = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
      const len2 = bytes2.length;
      if (len2 === 0) {
        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
      }
      for (i2 = 0; i2 < end - start; ++i2) {
        this[i2 + start] = bytes2[i2 % len2];
      }
    }
    return this;
  };
  const errors2 = {};
  function E2(sym, getMessage, Base) {
    errors2[sym] = class NodeError extends Base {
      constructor() {
        super();
        Object.defineProperty(this, "message", {
          value: getMessage.apply(this, arguments),
          writable: true,
          configurable: true
        });
        this.name = `${this.name} [${sym}]`;
        this.stack;
        delete this.name;
      }
      get code() {
        return sym;
      }
      set code(value3) {
        Object.defineProperty(this, "code", {
          configurable: true,
          enumerable: true,
          value: value3,
          writable: true
        });
      }
      toString() {
        return `${this.name} [${sym}]: ${this.message}`;
      }
    };
  }
  E2(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(name2) {
      if (name2) {
        return `${name2} is outside of buffer bounds`;
      }
      return "Attempt to access memory outside buffer bounds";
    },
    RangeError
  );
  E2(
    "ERR_INVALID_ARG_TYPE",
    function(name2, actual) {
      return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
    },
    TypeError
  );
  E2(
    "ERR_OUT_OF_RANGE",
    function(str, range2, input) {
      let msg = `The value of "${str}" is out of range.`;
      let received = input;
      if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
        received = addNumericalSeparator(String(input));
      } else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
          received = addNumericalSeparator(received);
        }
        received += "n";
      }
      msg += ` It must be ${range2}. Received ${received}`;
      return msg;
    },
    RangeError
  );
  function addNumericalSeparator(val) {
    let res = "";
    let i2 = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for (; i2 >= start + 4; i2 -= 3) {
      res = `_${val.slice(i2 - 3, i2)}${res}`;
    }
    return `${val.slice(0, i2)}${res}`;
  }
  function checkBounds(buf, offset, byteLength3) {
    validateNumber(offset, "offset");
    if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
      boundsError(offset, buf.length - (byteLength3 + 1));
    }
  }
  function checkIntBI(value3, min, max, buf, offset, byteLength3) {
    if (value3 > max || value3 < min) {
      const n2 = typeof min === "bigint" ? "n" : "";
      let range2;
      {
        if (min === 0 || min === BigInt(0)) {
          range2 = `>= 0${n2} and < 2${n2} ** ${(byteLength3 + 1) * 8}${n2}`;
        } else {
          range2 = `>= -(2${n2} ** ${(byteLength3 + 1) * 8 - 1}${n2}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n2}`;
        }
      }
      throw new errors2.ERR_OUT_OF_RANGE("value", range2, value3);
    }
    checkBounds(buf, offset, byteLength3);
  }
  function validateNumber(value3, name2) {
    if (typeof value3 !== "number") {
      throw new errors2.ERR_INVALID_ARG_TYPE(name2, "number", value3);
    }
  }
  function boundsError(value3, length, type2) {
    if (Math.floor(value3) !== value3) {
      validateNumber(value3, type2);
      throw new errors2.ERR_OUT_OF_RANGE("offset", "an integer", value3);
    }
    if (length < 0) {
      throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
    }
    throw new errors2.ERR_OUT_OF_RANGE(
      "offset",
      `>= ${0} and <= ${length}`,
      value3
    );
  }
  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
  function base64clean(str) {
    str = str.split("=")[0];
    str = str.trim().replace(INVALID_BASE64_RE, "");
    if (str.length < 2) return "";
    while (str.length % 4 !== 0) {
      str = str + "=";
    }
    return str;
  }
  function utf8ToBytes(string2, units) {
    units = units || Infinity;
    let codePoint;
    const length = string2.length;
    let leadSurrogate = null;
    const bytes2 = [];
    for (let i2 = 0; i2 < length; ++i2) {
      codePoint = string2.charCodeAt(i2);
      if (codePoint > 55295 && codePoint < 57344) {
        if (!leadSurrogate) {
          if (codePoint > 56319) {
            if ((units -= 3) > -1) bytes2.push(239, 191, 189);
            continue;
          } else if (i2 + 1 === length) {
            if ((units -= 3) > -1) bytes2.push(239, 191, 189);
            continue;
          }
          leadSurrogate = codePoint;
          continue;
        }
        if (codePoint < 56320) {
          if ((units -= 3) > -1) bytes2.push(239, 191, 189);
          leadSurrogate = codePoint;
          continue;
        }
        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
      } else if (leadSurrogate) {
        if ((units -= 3) > -1) bytes2.push(239, 191, 189);
      }
      leadSurrogate = null;
      if (codePoint < 128) {
        if ((units -= 1) < 0) break;
        bytes2.push(codePoint);
      } else if (codePoint < 2048) {
        if ((units -= 2) < 0) break;
        bytes2.push(
          codePoint >> 6 | 192,
          codePoint & 63 | 128
        );
      } else if (codePoint < 65536) {
        if ((units -= 3) < 0) break;
        bytes2.push(
          codePoint >> 12 | 224,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else if (codePoint < 1114112) {
        if ((units -= 4) < 0) break;
        bytes2.push(
          codePoint >> 18 | 240,
          codePoint >> 12 & 63 | 128,
          codePoint >> 6 & 63 | 128,
          codePoint & 63 | 128
        );
      } else {
        throw new Error("Invalid code point");
      }
    }
    return bytes2;
  }
  function asciiToBytes(str) {
    const byteArray = [];
    for (let i2 = 0; i2 < str.length; ++i2) {
      byteArray.push(str.charCodeAt(i2) & 255);
    }
    return byteArray;
  }
  function utf16leToBytes(str, units) {
    let c2, hi, lo;
    const byteArray = [];
    for (let i2 = 0; i2 < str.length; ++i2) {
      if ((units -= 2) < 0) break;
      c2 = str.charCodeAt(i2);
      hi = c2 >> 8;
      lo = c2 % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }
    return byteArray;
  }
  function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
  }
  function blitBuffer(src2, dst, offset, length) {
    let i2;
    for (i2 = 0; i2 < length; ++i2) {
      if (i2 + offset >= dst.length || i2 >= src2.length) break;
      dst[i2 + offset] = src2[i2];
    }
    return i2;
  }
  function isInstance(obj, type2) {
    return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;
  }
  function numberIsNaN(obj) {
    return obj !== obj;
  }
  const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for (let i2 = 0; i2 < 16; ++i2) {
      const i16 = i2 * 16;
      for (let j2 = 0; j2 < 16; ++j2) {
        table[i16 + j2] = alphabet[i2] + alphabet[j2];
      }
    }
    return table;
  }();
  function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
  }
  function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
  }
})(buffer$1);
const Buffer$3 = buffer$1.Buffer;
const Blob$1 = buffer$1.Blob;
const BlobOptions = buffer$1.BlobOptions;
const Buffer$1$1 = buffer$1.Buffer;
const File = buffer$1.File;
const FileOptions = buffer$1.FileOptions;
const INSPECT_MAX_BYTES = buffer$1.INSPECT_MAX_BYTES;
const SlowBuffer = buffer$1.SlowBuffer;
const TranscodeEncoding = buffer$1.TranscodeEncoding;
const atob = buffer$1.atob;
const btoa = buffer$1.btoa;
const constants$1 = buffer$1.constants;
const isAscii = buffer$1.isAscii;
const isUtf8 = buffer$1.isUtf8;
const kMaxLength = buffer$1.kMaxLength;
const kStringMaxLength = buffer$1.kStringMaxLength;
const resolveObjectURL = buffer$1.resolveObjectURL;
const transcode = buffer$1.transcode;
const dist$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Blob: Blob$1,
  BlobOptions,
  Buffer: Buffer$1$1,
  File,
  FileOptions,
  INSPECT_MAX_BYTES,
  SlowBuffer,
  TranscodeEncoding,
  atob,
  btoa,
  constants: constants$1,
  default: Buffer$3,
  isAscii,
  isUtf8,
  kMaxLength,
  kStringMaxLength,
  resolveObjectURL,
  transcode
}, Symbol.toStringTag, { value: "Module" }));
var src$4 = {};
var address = {};
var networks$2 = {};
Object.defineProperty(networks$2, "__esModule", { value: true });
networks$2.testnet = networks$2.regtest = networks$2.bitcoin = void 0;
networks$2.bitcoin = {
  /**
   * The message prefix used for signing Bitcoin messages.
   */
  messagePrefix: "Bitcoin Signed Message:\n",
  /**
   * The Bech32 prefix used for Bitcoin addresses.
   */
  bech32: "bc",
  /**
   * The BIP32 key prefixes for Bitcoin.
   */
  bip32: {
    /**
     * The public key prefix for BIP32 extended public keys.
     */
    public: 76067358,
    /**
     * The private key prefix for BIP32 extended private keys.
     */
    private: 76066276
  },
  /**
   * The prefix for Bitcoin public key hashes.
   */
  pubKeyHash: 0,
  /**
   * The prefix for Bitcoin script hashes.
   */
  scriptHash: 5,
  /**
   * The prefix for Bitcoin Wallet Import Format (WIF) private keys.
   */
  wif: 128
};
networks$2.regtest = {
  messagePrefix: "Bitcoin Signed Message:\n",
  bech32: "bcrt",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
networks$2.testnet = {
  messagePrefix: "Bitcoin Signed Message:\n",
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
var payments$2 = {};
var embed = {};
var script = {};
var bip66 = {};
Object.defineProperty(bip66, "__esModule", { value: true });
bip66.encode = bip66.decode = bip66.check = void 0;
function check$d(buffer2) {
  if (buffer2.length < 8) return false;
  if (buffer2.length > 72) return false;
  if (buffer2[0] !== 48) return false;
  if (buffer2[1] !== buffer2.length - 2) return false;
  if (buffer2[2] !== 2) return false;
  const lenR = buffer2[3];
  if (lenR === 0) return false;
  if (5 + lenR >= buffer2.length) return false;
  if (buffer2[4 + lenR] !== 2) return false;
  const lenS = buffer2[5 + lenR];
  if (lenS === 0) return false;
  if (6 + lenR + lenS !== buffer2.length) return false;
  if (buffer2[4] & 128) return false;
  if (lenR > 1 && buffer2[4] === 0 && !(buffer2[5] & 128)) return false;
  if (buffer2[lenR + 6] & 128) return false;
  if (lenS > 1 && buffer2[lenR + 6] === 0 && !(buffer2[lenR + 7] & 128))
    return false;
  return true;
}
bip66.check = check$d;
function decode$k(buffer2) {
  if (buffer2.length < 8) throw new Error("DER sequence length is too short");
  if (buffer2.length > 72) throw new Error("DER sequence length is too long");
  if (buffer2[0] !== 48) throw new Error("Expected DER sequence");
  if (buffer2[1] !== buffer2.length - 2)
    throw new Error("DER sequence length is invalid");
  if (buffer2[2] !== 2) throw new Error("Expected DER integer");
  const lenR = buffer2[3];
  if (lenR === 0) throw new Error("R length is zero");
  if (5 + lenR >= buffer2.length) throw new Error("R length is too long");
  if (buffer2[4 + lenR] !== 2) throw new Error("Expected DER integer (2)");
  const lenS = buffer2[5 + lenR];
  if (lenS === 0) throw new Error("S length is zero");
  if (6 + lenR + lenS !== buffer2.length) throw new Error("S length is invalid");
  if (buffer2[4] & 128) throw new Error("R value is negative");
  if (lenR > 1 && buffer2[4] === 0 && !(buffer2[5] & 128))
    throw new Error("R value excessively padded");
  if (buffer2[lenR + 6] & 128) throw new Error("S value is negative");
  if (lenS > 1 && buffer2[lenR + 6] === 0 && !(buffer2[lenR + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: buffer2.slice(4, 4 + lenR),
    s: buffer2.slice(6 + lenR)
  };
}
bip66.decode = decode$k;
function encode$k(r2, s2) {
  const lenR = r2.length;
  const lenS = s2.length;
  if (lenR === 0) throw new Error("R length is zero");
  if (lenS === 0) throw new Error("S length is zero");
  if (lenR > 33) throw new Error("R length is too long");
  if (lenS > 33) throw new Error("S length is too long");
  if (r2[0] & 128) throw new Error("R value is negative");
  if (s2[0] & 128) throw new Error("S value is negative");
  if (lenR > 1 && r2[0] === 0 && !(r2[1] & 128))
    throw new Error("R value excessively padded");
  if (lenS > 1 && s2[0] === 0 && !(s2[1] & 128))
    throw new Error("S value excessively padded");
  const signature2 = Buffer$3.allocUnsafe(6 + lenR + lenS);
  signature2[0] = 48;
  signature2[1] = signature2.length - 2;
  signature2[2] = 2;
  signature2[3] = r2.length;
  r2.copy(signature2, 4);
  signature2[4 + lenR] = 2;
  signature2[5 + lenR] = s2.length;
  s2.copy(signature2, 6 + lenR);
  return signature2;
}
bip66.encode = encode$k;
var ops = {};
Object.defineProperty(ops, "__esModule", { value: true });
ops.REVERSE_OPS = ops.OPS = void 0;
const OPS$7 = {
  OP_FALSE: 0,
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_RESERVED: 80,
  OP_TRUE: 81,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_VER: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_VERIF: 101,
  OP_VERNOTIF: 102,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_CAT: 126,
  OP_SUBSTR: 127,
  OP_LEFT: 128,
  OP_RIGHT: 129,
  OP_SIZE: 130,
  OP_INVERT: 131,
  OP_AND: 132,
  OP_OR: 133,
  OP_XOR: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_RESERVED1: 137,
  OP_RESERVED2: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_2MUL: 141,
  OP_2DIV: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_MUL: 149,
  OP_DIV: 150,
  OP_MOD: 151,
  OP_LSHIFT: 152,
  OP_RSHIFT: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_NOP2: 177,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_NOP3: 178,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186,
  OP_PUBKEYHASH: 253,
  OP_PUBKEY: 254,
  OP_INVALIDOPCODE: 255
};
ops.OPS = OPS$7;
const REVERSE_OPS = {};
ops.REVERSE_OPS = REVERSE_OPS;
for (const op of Object.keys(OPS$7)) {
  const code2 = OPS$7[op];
  REVERSE_OPS[code2] = op;
}
var push_data = {};
Object.defineProperty(push_data, "__esModule", { value: true });
push_data.decode = push_data.encode = push_data.encodingLength = void 0;
const ops_1 = ops;
function encodingLength$2(i2) {
  return i2 < ops_1.OPS.OP_PUSHDATA1 ? 1 : i2 <= 255 ? 2 : i2 <= 65535 ? 3 : 5;
}
push_data.encodingLength = encodingLength$2;
function encode$j(buffer2, num, offset) {
  const size = encodingLength$2(num);
  if (size === 1) {
    buffer2.writeUInt8(num, offset);
  } else if (size === 2) {
    buffer2.writeUInt8(ops_1.OPS.OP_PUSHDATA1, offset);
    buffer2.writeUInt8(num, offset + 1);
  } else if (size === 3) {
    buffer2.writeUInt8(ops_1.OPS.OP_PUSHDATA2, offset);
    buffer2.writeUInt16LE(num, offset + 1);
  } else {
    buffer2.writeUInt8(ops_1.OPS.OP_PUSHDATA4, offset);
    buffer2.writeUInt32LE(num, offset + 1);
  }
  return size;
}
push_data.encode = encode$j;
function decode$j(buffer2, offset) {
  const opcode = buffer2.readUInt8(offset);
  let num;
  let size;
  if (opcode < ops_1.OPS.OP_PUSHDATA1) {
    num = opcode;
    size = 1;
  } else if (opcode === ops_1.OPS.OP_PUSHDATA1) {
    if (offset + 2 > buffer2.length) return null;
    num = buffer2.readUInt8(offset + 1);
    size = 2;
  } else if (opcode === ops_1.OPS.OP_PUSHDATA2) {
    if (offset + 3 > buffer2.length) return null;
    num = buffer2.readUInt16LE(offset + 1);
    size = 3;
  } else {
    if (offset + 5 > buffer2.length) return null;
    if (opcode !== ops_1.OPS.OP_PUSHDATA4) throw new Error("Unexpected opcode");
    num = buffer2.readUInt32LE(offset + 1);
    size = 5;
  }
  return {
    opcode,
    number: num,
    size
  };
}
push_data.decode = decode$j;
var script_number = {};
Object.defineProperty(script_number, "__esModule", { value: true });
script_number.encode = script_number.decode = void 0;
function decode$i(buffer2, maxLength, minimal) {
  maxLength = maxLength || 4;
  minimal = minimal === void 0 ? true : minimal;
  const length = buffer2.length;
  if (length === 0) return 0;
  if (length > maxLength) throw new TypeError("Script number overflow");
  if (minimal) {
    if ((buffer2[length - 1] & 127) === 0) {
      if (length <= 1 || (buffer2[length - 2] & 128) === 0)
        throw new Error("Non-minimally encoded script number");
    }
  }
  if (length === 5) {
    const a2 = buffer2.readUInt32LE(0);
    const b2 = buffer2.readUInt8(4);
    if (b2 & 128) return -((b2 & ~128) * 4294967296 + a2);
    return b2 * 4294967296 + a2;
  }
  let result = 0;
  for (let i2 = 0; i2 < length; ++i2) {
    result |= buffer2[i2] << 8 * i2;
  }
  if (buffer2[length - 1] & 128)
    return -(result & ~(128 << 8 * (length - 1)));
  return result;
}
script_number.decode = decode$i;
function scriptNumSize(i2) {
  return i2 > 2147483647 ? 5 : i2 > 8388607 ? 4 : i2 > 32767 ? 3 : i2 > 127 ? 2 : i2 > 0 ? 1 : 0;
}
function encode$i(_number) {
  let value3 = Math.abs(_number);
  const size = scriptNumSize(value3);
  const buffer2 = Buffer$3.allocUnsafe(size);
  const negative = _number < 0;
  for (let i2 = 0; i2 < size; ++i2) {
    buffer2.writeUInt8(value3 & 255, i2);
    value3 >>= 8;
  }
  if (buffer2[size - 1] & 128) {
    buffer2.writeUInt8(negative ? 128 : 0, size - 1);
  } else if (negative) {
    buffer2[size - 1] |= 128;
  }
  return buffer2;
}
script_number.encode = encode$i;
var script_signature = {};
var types$7 = {};
const require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(dist$2);
var types$6 = {
  Array: function(value3) {
    return value3 !== null && value3 !== void 0 && value3.constructor === Array;
  },
  Boolean: function(value3) {
    return typeof value3 === "boolean";
  },
  Function: function(value3) {
    return typeof value3 === "function";
  },
  Nil: function(value3) {
    return value3 === void 0 || value3 === null;
  },
  Number: function(value3) {
    return typeof value3 === "number";
  },
  Object: function(value3) {
    return typeof value3 === "object";
  },
  String: function(value3) {
    return typeof value3 === "string";
  },
  "": function() {
    return true;
  }
};
types$6.Null = types$6.Nil;
for (var typeName$1 in types$6) {
  types$6[typeName$1].toJSON = (function(t2) {
    return t2;
  }).bind(null, typeName$1);
}
var native$1 = types$6;
var native = native$1;
function getTypeName(fn) {
  return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
}
function getValueTypeName$1(value3) {
  return native.Nil(value3) ? "" : getTypeName(value3.constructor);
}
function getValue$1(value3) {
  if (native.Function(value3)) return "";
  if (native.String(value3)) return JSON.stringify(value3);
  if (value3 && native.Object(value3)) return "";
  return value3;
}
function captureStackTrace(e2, t2) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(e2, t2);
  }
}
function tfJSON$1(type2) {
  if (native.Function(type2)) return type2.toJSON ? type2.toJSON() : getTypeName(type2);
  if (native.Array(type2)) return "Array";
  if (type2 && native.Object(type2)) return "Object";
  return type2 !== void 0 ? type2 : "";
}
function tfErrorString(type2, value3, valueTypeName) {
  var valueJson = getValue$1(value3);
  return "Expected " + tfJSON$1(type2) + ", got" + (valueTypeName !== "" ? " " + valueTypeName : "") + (valueJson !== "" ? " " + valueJson : "");
}
function TfTypeError$1(type2, value3, valueTypeName) {
  valueTypeName = valueTypeName || getValueTypeName$1(value3);
  this.message = tfErrorString(type2, value3, valueTypeName);
  captureStackTrace(this, TfTypeError$1);
  this.__type = type2;
  this.__value = value3;
  this.__valueTypeName = valueTypeName;
}
TfTypeError$1.prototype = Object.create(Error.prototype);
TfTypeError$1.prototype.constructor = TfTypeError$1;
function tfPropertyErrorString(type2, label, name2, value3, valueTypeName) {
  var description2 = '" of type ';
  if (label === "key") description2 = '" with key type ';
  return tfErrorString('property "' + tfJSON$1(name2) + description2 + tfJSON$1(type2), value3, valueTypeName);
}
function TfPropertyTypeError$1(type2, property, label, value3, valueTypeName) {
  if (type2) {
    valueTypeName = valueTypeName || getValueTypeName$1(value3);
    this.message = tfPropertyErrorString(type2, label, property, value3, valueTypeName);
  } else {
    this.message = 'Unexpected property "' + property + '"';
  }
  captureStackTrace(this, TfTypeError$1);
  this.__label = label;
  this.__property = property;
  this.__type = type2;
  this.__value = value3;
  this.__valueTypeName = valueTypeName;
}
TfPropertyTypeError$1.prototype = Object.create(Error.prototype);
TfPropertyTypeError$1.prototype.constructor = TfTypeError$1;
function tfCustomError(expected, actual) {
  return new TfTypeError$1(expected, {}, actual);
}
function tfSubError$1(e2, property, label) {
  if (e2 instanceof TfPropertyTypeError$1) {
    property = property + "." + e2.__property;
    e2 = new TfPropertyTypeError$1(
      e2.__type,
      property,
      e2.__label,
      e2.__value,
      e2.__valueTypeName
    );
  } else if (e2 instanceof TfTypeError$1) {
    e2 = new TfPropertyTypeError$1(
      e2.__type,
      property,
      label,
      e2.__value,
      e2.__valueTypeName
    );
  }
  captureStackTrace(e2);
  return e2;
}
var errors$1 = {
  TfTypeError: TfTypeError$1,
  TfPropertyTypeError: TfPropertyTypeError$1,
  tfCustomError,
  tfSubError: tfSubError$1,
  tfJSON: tfJSON$1,
  getValueTypeName: getValueTypeName$1
};
var extra;
var hasRequiredExtra;
function requireExtra() {
  if (hasRequiredExtra) return extra;
  hasRequiredExtra = 1;
  var NATIVE2 = native$1;
  var ERRORS2 = errors$1;
  function _Buffer2(value3) {
    return Buffer$3.isBuffer(value3);
  }
  function Hex(value3) {
    return typeof value3 === "string" && /^([0-9a-f]{2})+$/i.test(value3);
  }
  function _LengthN(type2, length) {
    var name2 = type2.toJSON();
    function Length(value3) {
      if (!type2(value3)) return false;
      if (value3.length === length) return true;
      throw ERRORS2.tfCustomError(name2 + "(Length: " + length + ")", name2 + "(Length: " + value3.length + ")");
    }
    Length.toJSON = function() {
      return name2;
    };
    return Length;
  }
  var _ArrayN = _LengthN.bind(null, NATIVE2.Array);
  var _BufferN = _LengthN.bind(null, _Buffer2);
  var _HexN = _LengthN.bind(null, Hex);
  var _StringN = _LengthN.bind(null, NATIVE2.String);
  function Range(a2, b2, f2) {
    f2 = f2 || NATIVE2.Number;
    function _range(value3, strict) {
      return f2(value3, strict) && value3 > a2 && value3 < b2;
    }
    _range.toJSON = function() {
      return `${f2.toJSON()} between [${a2}, ${b2}]`;
    };
    return _range;
  }
  var INT53_MAX = Math.pow(2, 53) - 1;
  function Finite(value3) {
    return typeof value3 === "number" && isFinite(value3);
  }
  function Int8(value3) {
    return value3 << 24 >> 24 === value3;
  }
  function Int16(value3) {
    return value3 << 16 >> 16 === value3;
  }
  function Int32(value3) {
    return (value3 | 0) === value3;
  }
  function Int53(value3) {
    return typeof value3 === "number" && value3 >= -INT53_MAX && value3 <= INT53_MAX && Math.floor(value3) === value3;
  }
  function UInt8(value3) {
    return (value3 & 255) === value3;
  }
  function UInt16(value3) {
    return (value3 & 65535) === value3;
  }
  function UInt32(value3) {
    return value3 >>> 0 === value3;
  }
  function UInt53(value3) {
    return typeof value3 === "number" && value3 >= 0 && value3 <= INT53_MAX && Math.floor(value3) === value3;
  }
  var types2 = {
    ArrayN: _ArrayN,
    Buffer: _Buffer2,
    BufferN: _BufferN,
    Finite,
    Hex,
    HexN: _HexN,
    Int8,
    Int16,
    Int32,
    Int53,
    Range,
    StringN: _StringN,
    UInt8,
    UInt16,
    UInt32,
    UInt53
  };
  for (var typeName2 in types2) {
    types2[typeName2].toJSON = (function(t2) {
      return t2;
    }).bind(null, typeName2);
  }
  extra = types2;
  return extra;
}
var ERRORS = errors$1;
var NATIVE = native$1;
var tfJSON = ERRORS.tfJSON;
var TfTypeError = ERRORS.TfTypeError;
var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
var tfSubError = ERRORS.tfSubError;
var getValueTypeName = ERRORS.getValueTypeName;
var TYPES = {
  arrayOf: function arrayOf(type2, options) {
    type2 = compile(type2);
    options = options || {};
    function _arrayOf(array2, strict) {
      if (!NATIVE.Array(array2)) return false;
      if (NATIVE.Nil(array2)) return false;
      if (options.minLength !== void 0 && array2.length < options.minLength) return false;
      if (options.maxLength !== void 0 && array2.length > options.maxLength) return false;
      if (options.length !== void 0 && array2.length !== options.length) return false;
      return array2.every(function(value3, i2) {
        try {
          return typeforce$4(type2, value3, strict);
        } catch (e2) {
          throw tfSubError(e2, i2);
        }
      });
    }
    _arrayOf.toJSON = function() {
      var str = "[" + tfJSON(type2) + "]";
      if (options.length !== void 0) {
        str += "{" + options.length + "}";
      } else if (options.minLength !== void 0 || options.maxLength !== void 0) {
        str += "{" + (options.minLength === void 0 ? 0 : options.minLength) + "," + (options.maxLength === void 0 ? Infinity : options.maxLength) + "}";
      }
      return str;
    };
    return _arrayOf;
  },
  maybe: function maybe(type2) {
    type2 = compile(type2);
    function _maybe(value3, strict) {
      return NATIVE.Nil(value3) || type2(value3, strict, maybe);
    }
    _maybe.toJSON = function() {
      return "?" + tfJSON(type2);
    };
    return _maybe;
  },
  map: function map(propertyType, propertyKeyType) {
    propertyType = compile(propertyType);
    if (propertyKeyType) propertyKeyType = compile(propertyKeyType);
    function _map(value3, strict) {
      if (!NATIVE.Object(value3)) return false;
      if (NATIVE.Nil(value3)) return false;
      for (var propertyName in value3) {
        try {
          if (propertyKeyType) {
            typeforce$4(propertyKeyType, propertyName, strict);
          }
        } catch (e2) {
          throw tfSubError(e2, propertyName, "key");
        }
        try {
          var propertyValue = value3[propertyName];
          typeforce$4(propertyType, propertyValue, strict);
        } catch (e2) {
          throw tfSubError(e2, propertyName);
        }
      }
      return true;
    }
    if (propertyKeyType) {
      _map.toJSON = function() {
        return "{" + tfJSON(propertyKeyType) + ": " + tfJSON(propertyType) + "}";
      };
    } else {
      _map.toJSON = function() {
        return "{" + tfJSON(propertyType) + "}";
      };
    }
    return _map;
  },
  object: function object2(uncompiled) {
    var type2 = {};
    for (var typePropertyName in uncompiled) {
      type2[typePropertyName] = compile(uncompiled[typePropertyName]);
    }
    function _object(value3, strict) {
      if (!NATIVE.Object(value3)) return false;
      if (NATIVE.Nil(value3)) return false;
      var propertyName;
      try {
        for (propertyName in type2) {
          var propertyType = type2[propertyName];
          var propertyValue = value3[propertyName];
          typeforce$4(propertyType, propertyValue, strict);
        }
      } catch (e2) {
        throw tfSubError(e2, propertyName);
      }
      if (strict) {
        for (propertyName in value3) {
          if (type2[propertyName]) continue;
          throw new TfPropertyTypeError(void 0, propertyName);
        }
      }
      return true;
    }
    _object.toJSON = function() {
      return tfJSON(type2);
    };
    return _object;
  },
  anyOf: function anyOf() {
    var types2 = [].slice.call(arguments).map(compile);
    function _anyOf(value3, strict) {
      return types2.some(function(type2) {
        try {
          return typeforce$4(type2, value3, strict);
        } catch (e2) {
          return false;
        }
      });
    }
    _anyOf.toJSON = function() {
      return types2.map(tfJSON).join("|");
    };
    return _anyOf;
  },
  allOf: function allOf() {
    var types2 = [].slice.call(arguments).map(compile);
    function _allOf(value3, strict) {
      return types2.every(function(type2) {
        try {
          return typeforce$4(type2, value3, strict);
        } catch (e2) {
          return false;
        }
      });
    }
    _allOf.toJSON = function() {
      return types2.map(tfJSON).join(" & ");
    };
    return _allOf;
  },
  quacksLike: function quacksLike(type2) {
    function _quacksLike(value3) {
      return type2 === getValueTypeName(value3);
    }
    _quacksLike.toJSON = function() {
      return type2;
    };
    return _quacksLike;
  },
  tuple: function tuple() {
    var types2 = [].slice.call(arguments).map(compile);
    function _tuple(values, strict) {
      if (NATIVE.Nil(values)) return false;
      if (NATIVE.Nil(values.length)) return false;
      if (strict && values.length !== types2.length) return false;
      return types2.every(function(type2, i2) {
        try {
          return typeforce$4(type2, values[i2], strict);
        } catch (e2) {
          throw tfSubError(e2, i2);
        }
      });
    }
    _tuple.toJSON = function() {
      return "(" + types2.map(tfJSON).join(", ") + ")";
    };
    return _tuple;
  },
  value: function value2(expected) {
    function _value(actual) {
      return actual === expected;
    }
    _value.toJSON = function() {
      return expected;
    };
    return _value;
  }
};
TYPES.oneOf = TYPES.anyOf;
function compile(type2) {
  if (NATIVE.String(type2)) {
    if (type2[0] === "?") return TYPES.maybe(type2.slice(1));
    return NATIVE[type2] || TYPES.quacksLike(type2);
  } else if (type2 && NATIVE.Object(type2)) {
    if (NATIVE.Array(type2)) {
      if (type2.length !== 1) throw new TypeError("Expected compile() parameter of type Array of length 1");
      return TYPES.arrayOf(type2[0]);
    }
    return TYPES.object(type2);
  } else if (NATIVE.Function(type2)) {
    return type2;
  }
  return TYPES.value(type2);
}
function typeforce$4(type2, value3, strict, surrogate) {
  if (NATIVE.Function(type2)) {
    if (type2(value3, strict)) return true;
    throw new TfTypeError(surrogate || type2, value3);
  }
  return typeforce$4(compile(type2), value3, strict);
}
for (var typeName in NATIVE) {
  typeforce$4[typeName] = NATIVE[typeName];
}
for (typeName in TYPES) {
  typeforce$4[typeName] = TYPES[typeName];
}
var EXTRA = requireExtra();
for (typeName in EXTRA) {
  typeforce$4[typeName] = EXTRA[typeName];
}
typeforce$4.compile = compile;
typeforce$4.TfTypeError = TfTypeError;
typeforce$4.TfPropertyTypeError = TfPropertyTypeError;
var typeforce_1 = typeforce$4;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.oneOf = exports2.Null = exports2.BufferN = exports2.Function = exports2.UInt32 = exports2.UInt8 = exports2.tuple = exports2.maybe = exports2.Hex = exports2.Buffer = exports2.String = exports2.Boolean = exports2.Array = exports2.Number = exports2.Hash256bit = exports2.Hash160bit = exports2.Buffer256bit = exports2.isTaptree = exports2.isTapleaf = exports2.TAPLEAF_VERSION_MASK = exports2.Satoshi = exports2.isPoint = exports2.stacksEqual = exports2.typeforce = void 0;
  const buffer_1 = require$$1$2;
  exports2.typeforce = typeforce_1;
  const ZERO32 = buffer_1.Buffer.alloc(32, 0);
  const EC_P = buffer_1.Buffer.from(
    "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "hex"
  );
  function stacksEqual(a2, b2) {
    if (a2.length !== b2.length) return false;
    return a2.every((x2, i2) => {
      return x2.equals(b2[i2]);
    });
  }
  exports2.stacksEqual = stacksEqual;
  function isPoint2(p2) {
    if (!buffer_1.Buffer.isBuffer(p2)) return false;
    if (p2.length < 33) return false;
    const t2 = p2[0];
    const x2 = p2.slice(1, 33);
    if (x2.compare(ZERO32) === 0) return false;
    if (x2.compare(EC_P) >= 0) return false;
    if ((t2 === 2 || t2 === 3) && p2.length === 33) {
      return true;
    }
    const y2 = p2.slice(33);
    if (y2.compare(ZERO32) === 0) return false;
    if (y2.compare(EC_P) >= 0) return false;
    if (t2 === 4 && p2.length === 65) return true;
    return false;
  }
  exports2.isPoint = isPoint2;
  const SATOSHI_MAX = 21 * 1e14;
  function Satoshi(value3) {
    return exports2.typeforce.UInt53(value3) && value3 <= SATOSHI_MAX;
  }
  exports2.Satoshi = Satoshi;
  exports2.TAPLEAF_VERSION_MASK = 254;
  function isTapleaf(o3) {
    if (!o3 || !("output" in o3)) return false;
    if (!buffer_1.Buffer.isBuffer(o3.output)) return false;
    if (o3.version !== void 0)
      return (o3.version & exports2.TAPLEAF_VERSION_MASK) === o3.version;
    return true;
  }
  exports2.isTapleaf = isTapleaf;
  function isTaptree(scriptTree) {
    if (!(0, exports2.Array)(scriptTree)) return isTapleaf(scriptTree);
    if (scriptTree.length !== 2) return false;
    return scriptTree.every((t2) => isTaptree(t2));
  }
  exports2.isTaptree = isTaptree;
  exports2.Buffer256bit = exports2.typeforce.BufferN(32);
  exports2.Hash160bit = exports2.typeforce.BufferN(20);
  exports2.Hash256bit = exports2.typeforce.BufferN(32);
  exports2.Number = exports2.typeforce.Number;
  exports2.Array = exports2.typeforce.Array;
  exports2.Boolean = exports2.typeforce.Boolean;
  exports2.String = exports2.typeforce.String;
  exports2.Buffer = exports2.typeforce.Buffer;
  exports2.Hex = exports2.typeforce.Hex;
  exports2.maybe = exports2.typeforce.maybe;
  exports2.tuple = exports2.typeforce.tuple;
  exports2.UInt8 = exports2.typeforce.UInt8;
  exports2.UInt32 = exports2.typeforce.UInt32;
  exports2.Function = exports2.typeforce.Function;
  exports2.BufferN = exports2.typeforce.BufferN;
  exports2.Null = exports2.typeforce.Null;
  exports2.oneOf = exports2.typeforce.oneOf;
})(types$7);
var hasRequiredScript_signature;
function requireScript_signature() {
  if (hasRequiredScript_signature) return script_signature;
  hasRequiredScript_signature = 1;
  Object.defineProperty(script_signature, "__esModule", { value: true });
  script_signature.encode = script_signature.decode = void 0;
  const bip66$1 = bip66;
  const script_12 = requireScript();
  const types2 = types$7;
  const { typeforce: typeforce2 } = types2;
  const ZERO2 = Buffer$3.alloc(1, 0);
  function toDER(x2) {
    let i2 = 0;
    while (x2[i2] === 0) ++i2;
    if (i2 === x2.length) return ZERO2;
    x2 = x2.slice(i2);
    if (x2[0] & 128) return Buffer$3.concat([ZERO2, x2], 1 + x2.length);
    return x2;
  }
  function fromDER(x2) {
    if (x2[0] === 0) x2 = x2.slice(1);
    const buffer2 = Buffer$3.alloc(32, 0);
    const bstart = Math.max(0, 32 - x2.length);
    x2.copy(buffer2, bstart);
    return buffer2;
  }
  function decode2(buffer2) {
    const hashType = buffer2.readUInt8(buffer2.length - 1);
    if (!(0, script_12.isDefinedHashType)(hashType)) {
      throw new Error("Invalid hashType " + hashType);
    }
    const decoded = bip66$1.decode(buffer2.slice(0, -1));
    const r2 = fromDER(decoded.r);
    const s2 = fromDER(decoded.s);
    const signature2 = Buffer$3.concat([r2, s2], 64);
    return { signature: signature2, hashType };
  }
  script_signature.decode = decode2;
  function encode2(signature2, hashType) {
    typeforce2(
      {
        signature: types2.BufferN(64),
        hashType: types2.UInt8
      },
      { signature: signature2, hashType }
    );
    if (!(0, script_12.isDefinedHashType)(hashType)) {
      throw new Error("Invalid hashType " + hashType);
    }
    const hashTypeBuffer = Buffer$3.allocUnsafe(1);
    hashTypeBuffer.writeUInt8(hashType, 0);
    const r2 = toDER(signature2.slice(0, 32));
    const s2 = toDER(signature2.slice(32, 64));
    return Buffer$3.concat([bip66$1.encode(r2, s2), hashTypeBuffer]);
  }
  script_signature.encode = encode2;
  return script_signature;
}
var hasRequiredScript;
function requireScript() {
  if (hasRequiredScript) return script;
  hasRequiredScript = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.signature = exports2.number = exports2.isCanonicalScriptSignature = exports2.isDefinedHashType = exports2.isCanonicalPubKey = exports2.toStack = exports2.fromASM = exports2.toASM = exports2.decompile = exports2.compile = exports2.countNonPushOnlyOPs = exports2.isPushOnly = exports2.OPS = void 0;
    const bip66$1 = bip66;
    const ops_12 = ops;
    Object.defineProperty(exports2, "OPS", {
      enumerable: true,
      get: function() {
        return ops_12.OPS;
      }
    });
    const pushdata = push_data;
    const scriptNumber = script_number;
    const scriptSignature = requireScript_signature();
    const types2 = types$7;
    const { typeforce: typeforce2 } = types2;
    const OP_INT_BASE2 = ops_12.OPS.OP_RESERVED;
    function isOPInt(value3) {
      return types2.Number(value3) && (value3 === ops_12.OPS.OP_0 || value3 >= ops_12.OPS.OP_1 && value3 <= ops_12.OPS.OP_16 || value3 === ops_12.OPS.OP_1NEGATE);
    }
    function isPushOnlyChunk(value3) {
      return types2.Buffer(value3) || isOPInt(value3);
    }
    function isPushOnly(value3) {
      return types2.Array(value3) && value3.every(isPushOnlyChunk);
    }
    exports2.isPushOnly = isPushOnly;
    function countNonPushOnlyOPs(value3) {
      return value3.length - value3.filter(isPushOnlyChunk).length;
    }
    exports2.countNonPushOnlyOPs = countNonPushOnlyOPs;
    function asMinimalOP(buffer2) {
      if (buffer2.length === 0) return ops_12.OPS.OP_0;
      if (buffer2.length !== 1) return;
      if (buffer2[0] >= 1 && buffer2[0] <= 16) return OP_INT_BASE2 + buffer2[0];
      if (buffer2[0] === 129) return ops_12.OPS.OP_1NEGATE;
    }
    function chunksIsBuffer(buf) {
      return Buffer$3.isBuffer(buf);
    }
    function chunksIsArray(buf) {
      return types2.Array(buf);
    }
    function singleChunkIsBuffer(buf) {
      return Buffer$3.isBuffer(buf);
    }
    function compile2(chunks) {
      if (chunksIsBuffer(chunks)) return chunks;
      typeforce2(types2.Array, chunks);
      const bufferSize = chunks.reduce((accum, chunk) => {
        if (singleChunkIsBuffer(chunk)) {
          if (chunk.length === 1 && asMinimalOP(chunk) !== void 0) {
            return accum + 1;
          }
          return accum + pushdata.encodingLength(chunk.length) + chunk.length;
        }
        return accum + 1;
      }, 0);
      const buffer2 = Buffer$3.allocUnsafe(bufferSize);
      let offset = 0;
      chunks.forEach((chunk) => {
        if (singleChunkIsBuffer(chunk)) {
          const opcode = asMinimalOP(chunk);
          if (opcode !== void 0) {
            buffer2.writeUInt8(opcode, offset);
            offset += 1;
            return;
          }
          offset += pushdata.encode(buffer2, chunk.length, offset);
          chunk.copy(buffer2, offset);
          offset += chunk.length;
        } else {
          buffer2.writeUInt8(chunk, offset);
          offset += 1;
        }
      });
      if (offset !== buffer2.length) throw new Error("Could not decode chunks");
      return buffer2;
    }
    exports2.compile = compile2;
    function decompile(buffer2) {
      if (chunksIsArray(buffer2)) return buffer2;
      typeforce2(types2.Buffer, buffer2);
      const chunks = [];
      let i2 = 0;
      while (i2 < buffer2.length) {
        const opcode = buffer2[i2];
        if (opcode > ops_12.OPS.OP_0 && opcode <= ops_12.OPS.OP_PUSHDATA4) {
          const d2 = pushdata.decode(buffer2, i2);
          if (d2 === null) return null;
          i2 += d2.size;
          if (i2 + d2.number > buffer2.length) return null;
          const data = buffer2.slice(i2, i2 + d2.number);
          i2 += d2.number;
          const op = asMinimalOP(data);
          if (op !== void 0) {
            chunks.push(op);
          } else {
            chunks.push(data);
          }
        } else {
          chunks.push(opcode);
          i2 += 1;
        }
      }
      return chunks;
    }
    exports2.decompile = decompile;
    function toASM(chunks) {
      if (chunksIsBuffer(chunks)) {
        chunks = decompile(chunks);
      }
      if (!chunks) {
        throw new Error("Could not convert invalid chunks to ASM");
      }
      return chunks.map((chunk) => {
        if (singleChunkIsBuffer(chunk)) {
          const op = asMinimalOP(chunk);
          if (op === void 0) return chunk.toString("hex");
          chunk = op;
        }
        return ops_12.REVERSE_OPS[chunk];
      }).join(" ");
    }
    exports2.toASM = toASM;
    function fromASM(asm) {
      typeforce2(types2.String, asm);
      return compile2(
        asm.split(" ").map((chunkStr) => {
          if (ops_12.OPS[chunkStr] !== void 0) return ops_12.OPS[chunkStr];
          typeforce2(types2.Hex, chunkStr);
          return Buffer$3.from(chunkStr, "hex");
        })
      );
    }
    exports2.fromASM = fromASM;
    function toStack(chunks) {
      chunks = decompile(chunks);
      typeforce2(isPushOnly, chunks);
      return chunks.map((op) => {
        if (singleChunkIsBuffer(op)) return op;
        if (op === ops_12.OPS.OP_0) return Buffer$3.allocUnsafe(0);
        return scriptNumber.encode(op - OP_INT_BASE2);
      });
    }
    exports2.toStack = toStack;
    function isCanonicalPubKey(buffer2) {
      return types2.isPoint(buffer2);
    }
    exports2.isCanonicalPubKey = isCanonicalPubKey;
    function isDefinedHashType(hashType) {
      const hashTypeMod = hashType & ~128;
      return hashTypeMod > 0 && hashTypeMod < 4;
    }
    exports2.isDefinedHashType = isDefinedHashType;
    function isCanonicalScriptSignature(buffer2) {
      if (!Buffer$3.isBuffer(buffer2)) return false;
      if (!isDefinedHashType(buffer2[buffer2.length - 1])) return false;
      return bip66$1.check(buffer2.slice(0, -1));
    }
    exports2.isCanonicalScriptSignature = isCanonicalScriptSignature;
    exports2.number = scriptNumber;
    exports2.signature = scriptSignature;
  })(script);
  return script;
}
var lazy$7 = {};
Object.defineProperty(lazy$7, "__esModule", { value: true });
lazy$7.value = lazy$7.prop = void 0;
function prop(object3, name2, f2) {
  Object.defineProperty(object3, name2, {
    configurable: true,
    enumerable: true,
    get() {
      const _value = f2.call(this);
      this[name2] = _value;
      return _value;
    },
    set(_value) {
      Object.defineProperty(this, name2, {
        configurable: true,
        enumerable: true,
        value: _value,
        writable: true
      });
    }
  });
}
lazy$7.prop = prop;
function value(f2) {
  let _value;
  return () => {
    if (_value !== void 0) return _value;
    _value = f2();
    return _value;
  };
}
lazy$7.value = value;
Object.defineProperty(embed, "__esModule", { value: true });
embed.p2data = void 0;
const networks_1$7 = networks$2;
const bscript$9 = requireScript();
const types_1$7 = types$7;
const lazy$6 = lazy$7;
const OPS$6 = bscript$9.OPS;
function p2data(a2, opts) {
  if (!a2.data && !a2.output) throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  (0, types_1$7.typeforce)(
    {
      network: types_1$7.typeforce.maybe(types_1$7.typeforce.Object),
      output: types_1$7.typeforce.maybe(types_1$7.typeforce.Buffer),
      data: types_1$7.typeforce.maybe(
        types_1$7.typeforce.arrayOf(types_1$7.typeforce.Buffer)
      )
    },
    a2
  );
  const network = a2.network || networks_1$7.bitcoin;
  const o3 = { name: "embed", network };
  lazy$6.prop(o3, "output", () => {
    if (!a2.data) return;
    return bscript$9.compile([OPS$6.OP_RETURN].concat(a2.data));
  });
  lazy$6.prop(o3, "data", () => {
    if (!a2.output) return;
    return bscript$9.decompile(a2.output).slice(1);
  });
  if (opts.validate) {
    if (a2.output) {
      const chunks = bscript$9.decompile(a2.output);
      if (chunks[0] !== OPS$6.OP_RETURN) throw new TypeError("Output is invalid");
      if (!chunks.slice(1).every(types_1$7.typeforce.Buffer))
        throw new TypeError("Output is invalid");
      if (a2.data && !(0, types_1$7.stacksEqual)(a2.data, o3.data))
        throw new TypeError("Data mismatch");
    }
  }
  return Object.assign(o3, a2);
}
embed.p2data = p2data;
var p2ms$1 = {};
Object.defineProperty(p2ms$1, "__esModule", { value: true });
p2ms$1.p2ms = void 0;
const networks_1$6 = networks$2;
const bscript$8 = requireScript();
const types_1$6 = types$7;
const lazy$5 = lazy$7;
const OPS$5 = bscript$8.OPS;
const OP_INT_BASE = OPS$5.OP_RESERVED;
function p2ms(a2, opts) {
  if (!a2.input && !a2.output && !(a2.pubkeys && a2.m !== void 0) && !a2.signatures)
    throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  function isAcceptableSignature(x2) {
    return bscript$8.isCanonicalScriptSignature(x2) || (opts.allowIncomplete && x2 === OPS$5.OP_0) !== void 0;
  }
  (0, types_1$6.typeforce)(
    {
      network: types_1$6.typeforce.maybe(types_1$6.typeforce.Object),
      m: types_1$6.typeforce.maybe(types_1$6.typeforce.Number),
      n: types_1$6.typeforce.maybe(types_1$6.typeforce.Number),
      output: types_1$6.typeforce.maybe(types_1$6.typeforce.Buffer),
      pubkeys: types_1$6.typeforce.maybe(
        types_1$6.typeforce.arrayOf(types_1$6.isPoint)
      ),
      signatures: types_1$6.typeforce.maybe(
        types_1$6.typeforce.arrayOf(isAcceptableSignature)
      ),
      input: types_1$6.typeforce.maybe(types_1$6.typeforce.Buffer)
    },
    a2
  );
  const network = a2.network || networks_1$6.bitcoin;
  const o3 = { network };
  let chunks = [];
  let decoded = false;
  function decode2(output2) {
    if (decoded) return;
    decoded = true;
    chunks = bscript$8.decompile(output2);
    o3.m = chunks[0] - OP_INT_BASE;
    o3.n = chunks[chunks.length - 2] - OP_INT_BASE;
    o3.pubkeys = chunks.slice(1, -2);
  }
  lazy$5.prop(o3, "output", () => {
    if (!a2.m) return;
    if (!o3.n) return;
    if (!a2.pubkeys) return;
    return bscript$8.compile(
      [].concat(
        OP_INT_BASE + a2.m,
        a2.pubkeys,
        OP_INT_BASE + o3.n,
        OPS$5.OP_CHECKMULTISIG
      )
    );
  });
  lazy$5.prop(o3, "m", () => {
    if (!o3.output) return;
    decode2(o3.output);
    return o3.m;
  });
  lazy$5.prop(o3, "n", () => {
    if (!o3.pubkeys) return;
    return o3.pubkeys.length;
  });
  lazy$5.prop(o3, "pubkeys", () => {
    if (!a2.output) return;
    decode2(a2.output);
    return o3.pubkeys;
  });
  lazy$5.prop(o3, "signatures", () => {
    if (!a2.input) return;
    return bscript$8.decompile(a2.input).slice(1);
  });
  lazy$5.prop(o3, "input", () => {
    if (!a2.signatures) return;
    return bscript$8.compile([OPS$5.OP_0].concat(a2.signatures));
  });
  lazy$5.prop(o3, "witness", () => {
    if (!o3.input) return;
    return [];
  });
  lazy$5.prop(o3, "name", () => {
    if (!o3.m || !o3.n) return;
    return `p2ms(${o3.m} of ${o3.n})`;
  });
  if (opts.validate) {
    if (a2.output) {
      decode2(a2.output);
      if (!types_1$6.typeforce.Number(chunks[0]))
        throw new TypeError("Output is invalid");
      if (!types_1$6.typeforce.Number(chunks[chunks.length - 2]))
        throw new TypeError("Output is invalid");
      if (chunks[chunks.length - 1] !== OPS$5.OP_CHECKMULTISIG)
        throw new TypeError("Output is invalid");
      if (o3.m <= 0 || o3.n > 16 || o3.m > o3.n || o3.n !== chunks.length - 3)
        throw new TypeError("Output is invalid");
      if (!o3.pubkeys.every((x2) => (0, types_1$6.isPoint)(x2)))
        throw new TypeError("Output is invalid");
      if (a2.m !== void 0 && a2.m !== o3.m) throw new TypeError("m mismatch");
      if (a2.n !== void 0 && a2.n !== o3.n) throw new TypeError("n mismatch");
      if (a2.pubkeys && !(0, types_1$6.stacksEqual)(a2.pubkeys, o3.pubkeys))
        throw new TypeError("Pubkeys mismatch");
    }
    if (a2.pubkeys) {
      if (a2.n !== void 0 && a2.n !== a2.pubkeys.length)
        throw new TypeError("Pubkey count mismatch");
      o3.n = a2.pubkeys.length;
      if (o3.n < o3.m) throw new TypeError("Pubkey count cannot be less than m");
    }
    if (a2.signatures) {
      if (a2.signatures.length < o3.m)
        throw new TypeError("Not enough signatures provided");
      if (a2.signatures.length > o3.m)
        throw new TypeError("Too many signatures provided");
    }
    if (a2.input) {
      if (a2.input[0] !== OPS$5.OP_0) throw new TypeError("Input is invalid");
      if (o3.signatures.length === 0 || !o3.signatures.every(isAcceptableSignature))
        throw new TypeError("Input has invalid signature(s)");
      if (a2.signatures && !(0, types_1$6.stacksEqual)(a2.signatures, o3.signatures))
        throw new TypeError("Signature mismatch");
      if (a2.m !== void 0 && a2.m !== a2.signatures.length)
        throw new TypeError("Signature count mismatch");
    }
  }
  return Object.assign(o3, a2);
}
p2ms$1.p2ms = p2ms;
var p2pk$1 = {};
Object.defineProperty(p2pk$1, "__esModule", { value: true });
p2pk$1.p2pk = void 0;
const networks_1$5 = networks$2;
const bscript$7 = requireScript();
const types_1$5 = types$7;
const lazy$4 = lazy$7;
const OPS$4 = bscript$7.OPS;
function p2pk(a2, opts) {
  if (!a2.input && !a2.output && !a2.pubkey && !a2.input && !a2.signature)
    throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  (0, types_1$5.typeforce)(
    {
      network: types_1$5.typeforce.maybe(types_1$5.typeforce.Object),
      output: types_1$5.typeforce.maybe(types_1$5.typeforce.Buffer),
      pubkey: types_1$5.typeforce.maybe(types_1$5.isPoint),
      signature: types_1$5.typeforce.maybe(bscript$7.isCanonicalScriptSignature),
      input: types_1$5.typeforce.maybe(types_1$5.typeforce.Buffer)
    },
    a2
  );
  const _chunks = lazy$4.value(() => {
    return bscript$7.decompile(a2.input);
  });
  const network = a2.network || networks_1$5.bitcoin;
  const o3 = { name: "p2pk", network };
  lazy$4.prop(o3, "output", () => {
    if (!a2.pubkey) return;
    return bscript$7.compile([a2.pubkey, OPS$4.OP_CHECKSIG]);
  });
  lazy$4.prop(o3, "pubkey", () => {
    if (!a2.output) return;
    return a2.output.slice(1, -1);
  });
  lazy$4.prop(o3, "signature", () => {
    if (!a2.input) return;
    return _chunks()[0];
  });
  lazy$4.prop(o3, "input", () => {
    if (!a2.signature) return;
    return bscript$7.compile([a2.signature]);
  });
  lazy$4.prop(o3, "witness", () => {
    if (!o3.input) return;
    return [];
  });
  if (opts.validate) {
    if (a2.output) {
      if (a2.output[a2.output.length - 1] !== OPS$4.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      if (!(0, types_1$5.isPoint)(o3.pubkey))
        throw new TypeError("Output pubkey is invalid");
      if (a2.pubkey && !a2.pubkey.equals(o3.pubkey))
        throw new TypeError("Pubkey mismatch");
    }
    if (a2.signature) {
      if (a2.input && !a2.input.equals(o3.input))
        throw new TypeError("Signature mismatch");
    }
    if (a2.input) {
      if (_chunks().length !== 1) throw new TypeError("Input is invalid");
      if (!bscript$7.isCanonicalScriptSignature(o3.signature))
        throw new TypeError("Input has invalid signature");
    }
  }
  return Object.assign(o3, a2);
}
p2pk$1.p2pk = p2pk;
var p2pkh$1 = {};
var crypto$5 = {};
var ripemd160$1 = {};
var _md = {};
var _assert = {};
Object.defineProperty(_assert, "__esModule", { value: true });
_assert.isBytes = isBytes;
_assert.number = number$1;
_assert.bool = bool;
_assert.bytes = bytes;
_assert.hash = hash$2;
_assert.exists = exists;
_assert.output = output;
function number$1(n2) {
  if (!Number.isSafeInteger(n2) || n2 < 0)
    throw new Error(`positive integer expected, not ${n2}`);
}
function bool(b2) {
  if (typeof b2 !== "boolean")
    throw new Error(`boolean expected, not ${b2}`);
}
function isBytes(a2) {
  return a2 instanceof Uint8Array || a2 != null && typeof a2 === "object" && a2.constructor.name === "Uint8Array";
}
function bytes(b2, ...lengths) {
  if (!isBytes(b2))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b2.length))
    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b2.length}`);
}
function hash$2(h2) {
  if (typeof h2 !== "function" || typeof h2.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number$1(h2.outputLen);
  number$1(h2.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}
const assert$3 = { number: number$1, bool, bytes, hash: hash$2, exists, output };
_assert.default = assert$3;
var utils$5 = {};
var crypto$4 = {};
Object.defineProperty(crypto$4, "__esModule", { value: true });
crypto$4.crypto = void 0;
crypto$4.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
(function(exports2) {
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.Hash = exports2.nextTick = exports2.byteSwapIfBE = exports2.byteSwap = exports2.isLE = exports2.rotl = exports2.rotr = exports2.createView = exports2.u32 = exports2.u8 = void 0;
  exports2.isBytes = isBytes2;
  exports2.byteSwap32 = byteSwap32;
  exports2.bytesToHex = bytesToHex;
  exports2.hexToBytes = hexToBytes;
  exports2.asyncLoop = asyncLoop;
  exports2.utf8ToBytes = utf8ToBytes;
  exports2.toBytes = toBytes;
  exports2.concatBytes = concatBytes;
  exports2.checkOpts = checkOpts;
  exports2.wrapConstructor = wrapConstructor;
  exports2.wrapConstructorWithOpts = wrapConstructorWithOpts;
  exports2.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
  exports2.randomBytes = randomBytes2;
  const crypto_12 = crypto$4;
  const _assert_js_12 = _assert;
  function isBytes2(a2) {
    return a2 instanceof Uint8Array || a2 != null && typeof a2 === "object" && a2.constructor.name === "Uint8Array";
  }
  const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
  exports2.u8 = u8;
  const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  exports2.u32 = u32;
  const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  exports2.createView = createView;
  const rotr = (word, shift) => word << 32 - shift | word >>> shift;
  exports2.rotr = rotr;
  const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
  exports2.rotl = rotl;
  exports2.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  const byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  exports2.byteSwap = byteSwap;
  exports2.byteSwapIfBE = exports2.isLE ? (n2) => n2 : (n2) => (0, exports2.byteSwap)(n2);
  function byteSwap32(arr) {
    for (let i2 = 0; i2 < arr.length; i2++) {
      arr[i2] = (0, exports2.byteSwap)(arr[i2]);
    }
  }
  const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_2, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex(bytes2) {
    (0, _assert_js_12.bytes)(bytes2);
    let hex = "";
    for (let i2 = 0; i2 < bytes2.length; i2++) {
      hex += hexes[bytes2[i2]];
    }
    return hex;
  }
  const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
      return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
      return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
      return char - (asciis._a - 10);
    return;
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array2 = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex.charCodeAt(hi));
      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex[hi] + hex[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array2[ai] = n1 * 16 + n2;
    }
    return array2;
  }
  const nextTick = async () => {
  };
  exports2.nextTick = nextTick;
  async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i2 = 0; i2 < iters; i2++) {
      cb(i2);
      const diff = Date.now() - ts;
      if (diff >= 0 && diff < tick)
        continue;
      await (0, exports2.nextTick)();
      ts += diff;
    }
  }
  function utf8ToBytes(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function toBytes(data) {
    if (typeof data === "string")
      data = utf8ToBytes(data);
    (0, _assert_js_12.bytes)(data);
    return data;
  }
  function concatBytes(...arrays) {
    let sum = 0;
    for (let i2 = 0; i2 < arrays.length; i2++) {
      const a2 = arrays[i2];
      (0, _assert_js_12.bytes)(a2);
      sum += a2.length;
    }
    const res = new Uint8Array(sum);
    for (let i2 = 0, pad2 = 0; i2 < arrays.length; i2++) {
      const a2 = arrays[i2];
      res.set(a2, pad2);
      pad2 += a2.length;
    }
    return res;
  }
  class Hash {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  exports2.Hash = Hash;
  const toStr = {}.toString;
  function checkOpts(defaults, opts) {
    if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes2(bytesLength = 32) {
    if (crypto_12.crypto && typeof crypto_12.crypto.getRandomValues === "function") {
      return crypto_12.crypto.getRandomValues(new Uint8Array(bytesLength));
    }
    if (crypto_12.crypto && typeof crypto_12.crypto.randomBytes === "function") {
      return crypto_12.crypto.randomBytes(bytesLength);
    }
    throw new Error("crypto.getRandomValues must be defined");
  }
})(utils$5);
Object.defineProperty(_md, "__esModule", { value: true });
_md.HashMD = _md.Maj = _md.Chi = void 0;
const _assert_js_1 = _assert;
const utils_js_1$4 = utils$5;
function setBigUint64(view, byteOffset, value3, isLE) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value3, isLE);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value3 >> _32n2 & _u32_max);
  const wl = Number(value3 & _u32_max);
  const h2 = isLE ? 4 : 0;
  const l2 = isLE ? 0 : 4;
  view.setUint32(byteOffset + h2, wh, isLE);
  view.setUint32(byteOffset + l2, wl, isLE);
}
const Chi = (a2, b2, c2) => a2 & b2 ^ ~a2 & c2;
_md.Chi = Chi;
const Maj = (a2, b2, c2) => a2 & b2 ^ a2 & c2 ^ b2 & c2;
_md.Maj = Maj;
class HashMD extends utils_js_1$4.Hash {
  constructor(blockLen, outputLen, padOffset, isLE) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = (0, utils_js_1$4.createView)(this.buffer);
  }
  update(data) {
    (0, _assert_js_1.exists)(this);
    const { view, buffer: buffer2, blockLen } = this;
    data = (0, utils_js_1$4.toBytes)(data);
    const len2 = data.length;
    for (let pos = 0; pos < len2; ) {
      const take = Math.min(blockLen - this.pos, len2 - pos);
      if (take === blockLen) {
        const dataView = (0, utils_js_1$4.createView)(data);
        for (; blockLen <= len2 - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    (0, _assert_js_1.exists)(this);
    (0, _assert_js_1.output)(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i2 = pos; i2 < blockLen; i2++)
      buffer2[i2] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
    this.process(view, 0);
    const oview = (0, utils_js_1$4.createView)(out);
    const len2 = this.outputLen;
    if (len2 % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len2 / 4;
    const state2 = this.get();
    if (outLen > state2.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i2 = 0; i2 < outLen; i2++)
      oview.setUint32(4 * i2, state2[i2], isLE);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer2);
    return to;
  }
}
_md.HashMD = HashMD;
Object.defineProperty(ripemd160$1, "__esModule", { value: true });
ripemd160$1.ripemd160 = ripemd160$1.RIPEMD160 = void 0;
const _md_js_1$3 = _md;
const utils_js_1$3 = utils$5;
const Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
const Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_2, i2) => i2));
const Pi = /* @__PURE__ */ Id.map((i2) => (9 * i2 + 5) % 16);
let idxL = [Id];
let idxR = [Pi];
for (let i2 = 0; i2 < 4; i2++)
  for (let j2 of [idxL, idxR])
    j2.push(j2[i2].map((k2) => Rho[k2]));
const shifts = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i2) => new Uint8Array(i2));
const shiftsL = /* @__PURE__ */ idxL.map((idx, i2) => idx.map((j2) => shifts[i2][j2]));
const shiftsR = /* @__PURE__ */ idxR.map((idx, i2) => idx.map((j2) => shifts[i2][j2]));
const Kl = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
const Kr = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f$1(group, x2, y2, z2) {
  if (group === 0)
    return x2 ^ y2 ^ z2;
  else if (group === 1)
    return x2 & y2 | ~x2 & z2;
  else if (group === 2)
    return (x2 | ~y2) ^ z2;
  else if (group === 3)
    return x2 & z2 | y2 & ~z2;
  else
    return x2 ^ (y2 | ~z2);
}
const R_BUF = /* @__PURE__ */ new Uint32Array(16);
class RIPEMD160 extends _md_js_1$3.HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2, h3, h4 } = this;
    return [h0, h1, h2, h3, h4];
  }
  set(h0, h1, h2, h3, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h2 | 0;
    this.h3 = h3 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i2 = 0; i2 < 16; i2++, offset += 4)
      R_BUF[i2] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr = idxR[group];
      const sl = shiftsL[group], sr = shiftsR[group];
      for (let i2 = 0; i2 < 16; i2++) {
        const tl = (0, utils_js_1$3.rotl)(al + f$1(group, bl, cl, dl) + R_BUF[rl[i2]] + hbl, sl[i2]) + el | 0;
        al = el, el = dl, dl = (0, utils_js_1$3.rotl)(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i2 = 0; i2 < 16; i2++) {
        const tr = (0, utils_js_1$3.rotl)(ar + f$1(rGroup, br, cr, dr) + R_BUF[rr[i2]] + hbr, sr[i2]) + er | 0;
        ar = er, er = dr, dr = (0, utils_js_1$3.rotl)(cr, 10) | 0, cr = br, br = tr;
      }
    }
    this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
}
ripemd160$1.RIPEMD160 = RIPEMD160;
ripemd160$1.ripemd160 = (0, utils_js_1$3.wrapConstructor)(() => new RIPEMD160());
var sha1$1 = {};
Object.defineProperty(sha1$1, "__esModule", { value: true });
sha1$1.sha1 = sha1$1.SHA1 = void 0;
const _md_js_1$2 = _md;
const utils_js_1$2 = utils$5;
const SHA1_IV = /* @__PURE__ */ new Uint32Array([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
const SHA1_W = /* @__PURE__ */ new Uint32Array(80);
class SHA1 extends _md_js_1$2.HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A2, B, C: C2, D: D2, E: E2 } = this;
    return [A2, B, C2, D2, E2];
  }
  set(A2, B, C2, D2, E2) {
    this.A = A2 | 0;
    this.B = B | 0;
    this.C = C2 | 0;
    this.D = D2 | 0;
    this.E = E2 | 0;
  }
  process(view, offset) {
    for (let i2 = 0; i2 < 16; i2++, offset += 4)
      SHA1_W[i2] = view.getUint32(offset, false);
    for (let i2 = 16; i2 < 80; i2++)
      SHA1_W[i2] = (0, utils_js_1$2.rotl)(SHA1_W[i2 - 3] ^ SHA1_W[i2 - 8] ^ SHA1_W[i2 - 14] ^ SHA1_W[i2 - 16], 1);
    let { A: A2, B, C: C2, D: D2, E: E2 } = this;
    for (let i2 = 0; i2 < 80; i2++) {
      let F2, K;
      if (i2 < 20) {
        F2 = (0, _md_js_1$2.Chi)(B, C2, D2);
        K = 1518500249;
      } else if (i2 < 40) {
        F2 = B ^ C2 ^ D2;
        K = 1859775393;
      } else if (i2 < 60) {
        F2 = (0, _md_js_1$2.Maj)(B, C2, D2);
        K = 2400959708;
      } else {
        F2 = B ^ C2 ^ D2;
        K = 3395469782;
      }
      const T2 = (0, utils_js_1$2.rotl)(A2, 5) + F2 + E2 + K + SHA1_W[i2] | 0;
      E2 = D2;
      D2 = C2;
      C2 = (0, utils_js_1$2.rotl)(B, 30);
      B = A2;
      A2 = T2;
    }
    A2 = A2 + this.A | 0;
    B = B + this.B | 0;
    C2 = C2 + this.C | 0;
    D2 = D2 + this.D | 0;
    E2 = E2 + this.E | 0;
    this.set(A2, B, C2, D2, E2);
  }
  roundClean() {
    SHA1_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
}
sha1$1.SHA1 = SHA1;
sha1$1.sha1 = (0, utils_js_1$2.wrapConstructor)(() => new SHA1());
var sha256$5 = {};
Object.defineProperty(sha256$5, "__esModule", { value: true });
sha256$5.sha224 = sha256$5.sha256 = sha256$5.SHA256 = void 0;
const _md_js_1$1 = _md;
const utils_js_1$1 = utils$5;
const SHA256_K = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
const SHA256_IV = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends _md_js_1$1.HashMD {
  constructor() {
    super(64, 32, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A2, B, C: C2, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
    return [A2, B, C2, D2, E2, F2, G2, H2];
  }
  // prettier-ignore
  set(A2, B, C2, D2, E2, F2, G2, H2) {
    this.A = A2 | 0;
    this.B = B | 0;
    this.C = C2 | 0;
    this.D = D2 | 0;
    this.E = E2 | 0;
    this.F = F2 | 0;
    this.G = G2 | 0;
    this.H = H2 | 0;
  }
  process(view, offset) {
    for (let i2 = 0; i2 < 16; i2++, offset += 4)
      SHA256_W[i2] = view.getUint32(offset, false);
    for (let i2 = 16; i2 < 64; i2++) {
      const W15 = SHA256_W[i2 - 15];
      const W2 = SHA256_W[i2 - 2];
      const s0 = (0, utils_js_1$1.rotr)(W15, 7) ^ (0, utils_js_1$1.rotr)(W15, 18) ^ W15 >>> 3;
      const s1 = (0, utils_js_1$1.rotr)(W2, 17) ^ (0, utils_js_1$1.rotr)(W2, 19) ^ W2 >>> 10;
      SHA256_W[i2] = s1 + SHA256_W[i2 - 7] + s0 + SHA256_W[i2 - 16] | 0;
    }
    let { A: A2, B, C: C2, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
    for (let i2 = 0; i2 < 64; i2++) {
      const sigma1 = (0, utils_js_1$1.rotr)(E2, 6) ^ (0, utils_js_1$1.rotr)(E2, 11) ^ (0, utils_js_1$1.rotr)(E2, 25);
      const T1 = H2 + sigma1 + (0, _md_js_1$1.Chi)(E2, F2, G2) + SHA256_K[i2] + SHA256_W[i2] | 0;
      const sigma0 = (0, utils_js_1$1.rotr)(A2, 2) ^ (0, utils_js_1$1.rotr)(A2, 13) ^ (0, utils_js_1$1.rotr)(A2, 22);
      const T2 = sigma0 + (0, _md_js_1$1.Maj)(A2, B, C2) | 0;
      H2 = G2;
      G2 = F2;
      F2 = E2;
      E2 = D2 + T1 | 0;
      D2 = C2;
      C2 = B;
      B = A2;
      A2 = T1 + T2 | 0;
    }
    A2 = A2 + this.A | 0;
    B = B + this.B | 0;
    C2 = C2 + this.C | 0;
    D2 = D2 + this.D | 0;
    E2 = E2 + this.E | 0;
    F2 = F2 + this.F | 0;
    G2 = G2 + this.G | 0;
    H2 = H2 + this.H | 0;
    this.set(A2, B, C2, D2, E2, F2, G2, H2);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
}
sha256$5.SHA256 = SHA256;
class SHA224 extends SHA256 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
}
sha256$5.sha256 = (0, utils_js_1$1.wrapConstructor)(() => new SHA256());
sha256$5.sha224 = (0, utils_js_1$1.wrapConstructor)(() => new SHA224());
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.taggedHash = exports2.TAGGED_HASH_PREFIXES = exports2.TAGS = exports2.hash256 = exports2.hash160 = exports2.sha256 = exports2.sha1 = exports2.ripemd160 = void 0;
  const ripemd160_12 = ripemd160$1;
  const sha1_1 = sha1$1;
  const sha256_12 = sha256$5;
  function ripemd1602(buffer2) {
    return Buffer$3.from((0, ripemd160_12.ripemd160)(Uint8Array.from(buffer2)));
  }
  exports2.ripemd160 = ripemd1602;
  function sha12(buffer2) {
    return Buffer$3.from((0, sha1_1.sha1)(Uint8Array.from(buffer2)));
  }
  exports2.sha1 = sha12;
  function sha2562(buffer2) {
    return Buffer$3.from((0, sha256_12.sha256)(Uint8Array.from(buffer2)));
  }
  exports2.sha256 = sha2562;
  function hash1602(buffer2) {
    return Buffer$3.from(
      (0, ripemd160_12.ripemd160)((0, sha256_12.sha256)(Uint8Array.from(buffer2)))
    );
  }
  exports2.hash160 = hash1602;
  function hash256(buffer2) {
    return Buffer$3.from(
      (0, sha256_12.sha256)((0, sha256_12.sha256)(Uint8Array.from(buffer2)))
    );
  }
  exports2.hash256 = hash256;
  exports2.TAGS = [
    "BIP0340/challenge",
    "BIP0340/aux",
    "BIP0340/nonce",
    "TapLeaf",
    "TapBranch",
    "TapSighash",
    "TapTweak",
    "KeyAgg list",
    "KeyAgg coefficient"
  ];
  exports2.TAGGED_HASH_PREFIXES = {
    "BIP0340/challenge": Buffer$3.from([
      123,
      181,
      45,
      122,
      159,
      239,
      88,
      50,
      62,
      177,
      191,
      122,
      64,
      125,
      179,
      130,
      210,
      243,
      242,
      216,
      27,
      177,
      34,
      79,
      73,
      254,
      81,
      143,
      109,
      72,
      211,
      124,
      123,
      181,
      45,
      122,
      159,
      239,
      88,
      50,
      62,
      177,
      191,
      122,
      64,
      125,
      179,
      130,
      210,
      243,
      242,
      216,
      27,
      177,
      34,
      79,
      73,
      254,
      81,
      143,
      109,
      72,
      211,
      124
    ]),
    "BIP0340/aux": Buffer$3.from([
      241,
      239,
      78,
      94,
      192,
      99,
      202,
      218,
      109,
      148,
      202,
      250,
      157,
      152,
      126,
      160,
      105,
      38,
      88,
      57,
      236,
      193,
      31,
      151,
      45,
      119,
      165,
      46,
      216,
      193,
      204,
      144,
      241,
      239,
      78,
      94,
      192,
      99,
      202,
      218,
      109,
      148,
      202,
      250,
      157,
      152,
      126,
      160,
      105,
      38,
      88,
      57,
      236,
      193,
      31,
      151,
      45,
      119,
      165,
      46,
      216,
      193,
      204,
      144
    ]),
    "BIP0340/nonce": Buffer$3.from([
      7,
      73,
      119,
      52,
      167,
      155,
      203,
      53,
      91,
      155,
      140,
      125,
      3,
      79,
      18,
      28,
      244,
      52,
      215,
      62,
      247,
      45,
      218,
      25,
      135,
      0,
      97,
      251,
      82,
      191,
      235,
      47,
      7,
      73,
      119,
      52,
      167,
      155,
      203,
      53,
      91,
      155,
      140,
      125,
      3,
      79,
      18,
      28,
      244,
      52,
      215,
      62,
      247,
      45,
      218,
      25,
      135,
      0,
      97,
      251,
      82,
      191,
      235,
      47
    ]),
    TapLeaf: Buffer$3.from([
      174,
      234,
      143,
      220,
      66,
      8,
      152,
      49,
      5,
      115,
      75,
      88,
      8,
      29,
      30,
      38,
      56,
      211,
      95,
      28,
      181,
      64,
      8,
      212,
      211,
      87,
      202,
      3,
      190,
      120,
      233,
      238,
      174,
      234,
      143,
      220,
      66,
      8,
      152,
      49,
      5,
      115,
      75,
      88,
      8,
      29,
      30,
      38,
      56,
      211,
      95,
      28,
      181,
      64,
      8,
      212,
      211,
      87,
      202,
      3,
      190,
      120,
      233,
      238
    ]),
    TapBranch: Buffer$3.from([
      25,
      65,
      161,
      242,
      229,
      110,
      185,
      95,
      162,
      169,
      241,
      148,
      190,
      92,
      1,
      247,
      33,
      111,
      51,
      237,
      130,
      176,
      145,
      70,
      52,
      144,
      208,
      91,
      245,
      22,
      160,
      21,
      25,
      65,
      161,
      242,
      229,
      110,
      185,
      95,
      162,
      169,
      241,
      148,
      190,
      92,
      1,
      247,
      33,
      111,
      51,
      237,
      130,
      176,
      145,
      70,
      52,
      144,
      208,
      91,
      245,
      22,
      160,
      21
    ]),
    TapSighash: Buffer$3.from([
      244,
      10,
      72,
      223,
      75,
      42,
      112,
      200,
      180,
      146,
      75,
      242,
      101,
      70,
      97,
      237,
      61,
      149,
      253,
      102,
      163,
      19,
      235,
      135,
      35,
      117,
      151,
      198,
      40,
      228,
      160,
      49,
      244,
      10,
      72,
      223,
      75,
      42,
      112,
      200,
      180,
      146,
      75,
      242,
      101,
      70,
      97,
      237,
      61,
      149,
      253,
      102,
      163,
      19,
      235,
      135,
      35,
      117,
      151,
      198,
      40,
      228,
      160,
      49
    ]),
    TapTweak: Buffer$3.from([
      232,
      15,
      225,
      99,
      156,
      156,
      160,
      80,
      227,
      175,
      27,
      57,
      193,
      67,
      198,
      62,
      66,
      156,
      188,
      235,
      21,
      217,
      64,
      251,
      181,
      197,
      161,
      244,
      175,
      87,
      197,
      233,
      232,
      15,
      225,
      99,
      156,
      156,
      160,
      80,
      227,
      175,
      27,
      57,
      193,
      67,
      198,
      62,
      66,
      156,
      188,
      235,
      21,
      217,
      64,
      251,
      181,
      197,
      161,
      244,
      175,
      87,
      197,
      233
    ]),
    "KeyAgg list": Buffer$3.from([
      72,
      28,
      151,
      28,
      60,
      11,
      70,
      215,
      240,
      178,
      117,
      174,
      89,
      141,
      78,
      44,
      126,
      215,
      49,
      156,
      89,
      74,
      92,
      110,
      199,
      158,
      160,
      212,
      153,
      2,
      148,
      240,
      72,
      28,
      151,
      28,
      60,
      11,
      70,
      215,
      240,
      178,
      117,
      174,
      89,
      141,
      78,
      44,
      126,
      215,
      49,
      156,
      89,
      74,
      92,
      110,
      199,
      158,
      160,
      212,
      153,
      2,
      148,
      240
    ]),
    "KeyAgg coefficient": Buffer$3.from([
      191,
      201,
      4,
      3,
      77,
      28,
      136,
      232,
      200,
      14,
      34,
      229,
      61,
      36,
      86,
      109,
      100,
      130,
      78,
      214,
      66,
      114,
      129,
      192,
      145,
      0,
      249,
      77,
      205,
      82,
      201,
      129,
      191,
      201,
      4,
      3,
      77,
      28,
      136,
      232,
      200,
      14,
      34,
      229,
      61,
      36,
      86,
      109,
      100,
      130,
      78,
      214,
      66,
      114,
      129,
      192,
      145,
      0,
      249,
      77,
      205,
      82,
      201,
      129
    ])
  };
  function taggedHash(prefix, data) {
    return sha2562(Buffer$3.concat([exports2.TAGGED_HASH_PREFIXES[prefix], data]));
  }
  exports2.taggedHash = taggedHash;
})(crypto$5);
function base$5(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j2 = 0; j2 < BASE_MAP.length; j2++) {
    BASE_MAP[j2] = 255;
  }
  for (var i2 = 0; i2 < ALPHABET2.length; i2++) {
    var x2 = ALPHABET2.charAt(i2);
    var xc = x2.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x2 + " is ambiguous");
    }
    BASE_MAP[xc] = i2;
  }
  var BASE2 = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE2) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE2);
  function encode2(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i3 = 0;
      for (var it1 = size - 1; (carry !== 0 || i3 < length) && it1 !== -1; it1--, i3++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE2 >>> 0;
        carry = carry / BASE2 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i3;
      pbegin++;
    }
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET2.charAt(b58[it2]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i3 = 0;
      for (var it3 = size - 1; (carry !== 0 || i3 < length) && it3 !== -1; it3--, i3++) {
        carry += BASE2 * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i3;
      psz++;
    }
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size - it4));
    var j3 = zeroes;
    while (it4 !== size) {
      vch[j3++] = b256[it4++];
    }
    return vch;
  }
  function decode2(string2) {
    var buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error("Non-base" + BASE2 + " character");
  }
  return {
    encode: encode2,
    decodeUnsafe,
    decode: decode2
  };
}
var src$3 = base$5;
const basex$1 = src$3;
const ALPHABET$2 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var bs58$1 = basex$1(ALPHABET$2);
var base58$1 = bs58$1;
var base$4 = function(checksumFn) {
  function encode2(payload) {
    var payloadU8 = Uint8Array.from(payload);
    var checksum = checksumFn(payloadU8);
    var length = payloadU8.length + 4;
    var both = new Uint8Array(length);
    both.set(payloadU8, 0);
    both.set(checksum.subarray(0, 4), payloadU8.length);
    return base58$1.encode(both, length);
  }
  function decodeRaw2(buffer2) {
    var payload = buffer2.slice(0, -4);
    var checksum = buffer2.slice(-4);
    var newChecksum = checksumFn(payload);
    if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
    return payload;
  }
  function decodeUnsafe(string2) {
    var buffer2 = base58$1.decodeUnsafe(string2);
    if (!buffer2) return;
    return decodeRaw2(buffer2);
  }
  function decode2(string2) {
    var buffer2 = base58$1.decode(string2);
    var payload = decodeRaw2(buffer2);
    if (!payload) throw new Error("Invalid checksum");
    return payload;
  }
  return {
    encode: encode2,
    decode: decode2,
    decodeUnsafe
  };
};
var { sha256: sha256$4 } = sha256$5;
var bs58checkBase$1 = base$4;
function sha256x2$1(buffer2) {
  return sha256$4(sha256$4(buffer2));
}
var bs58check$5 = bs58checkBase$1(sha256x2$1);
Object.defineProperty(p2pkh$1, "__esModule", { value: true });
p2pkh$1.p2pkh = void 0;
const bcrypto$5 = crypto$5;
const networks_1$4 = networks$2;
const bscript$6 = requireScript();
const types_1$4 = types$7;
const lazy$3 = lazy$7;
const bs58check$4 = bs58check$5;
const OPS$3 = bscript$6.OPS;
function p2pkh(a2, opts) {
  if (!a2.address && !a2.hash && !a2.output && !a2.pubkey && !a2.input)
    throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  (0, types_1$4.typeforce)(
    {
      network: types_1$4.typeforce.maybe(types_1$4.typeforce.Object),
      address: types_1$4.typeforce.maybe(types_1$4.typeforce.String),
      hash: types_1$4.typeforce.maybe(types_1$4.typeforce.BufferN(20)),
      output: types_1$4.typeforce.maybe(types_1$4.typeforce.BufferN(25)),
      pubkey: types_1$4.typeforce.maybe(types_1$4.isPoint),
      signature: types_1$4.typeforce.maybe(bscript$6.isCanonicalScriptSignature),
      input: types_1$4.typeforce.maybe(types_1$4.typeforce.Buffer)
    },
    a2
  );
  const _address = lazy$3.value(() => {
    const payload = Buffer$3.from(bs58check$4.decode(a2.address));
    const version2 = payload.readUInt8(0);
    const hash2 = payload.slice(1);
    return { version: version2, hash: hash2 };
  });
  const _chunks = lazy$3.value(() => {
    return bscript$6.decompile(a2.input);
  });
  const network = a2.network || networks_1$4.bitcoin;
  const o3 = { name: "p2pkh", network };
  lazy$3.prop(o3, "address", () => {
    if (!o3.hash) return;
    const payload = Buffer$3.allocUnsafe(21);
    payload.writeUInt8(network.pubKeyHash, 0);
    o3.hash.copy(payload, 1);
    return bs58check$4.encode(payload);
  });
  lazy$3.prop(o3, "hash", () => {
    if (a2.output) return a2.output.slice(3, 23);
    if (a2.address) return _address().hash;
    if (a2.pubkey || o3.pubkey) return bcrypto$5.hash160(a2.pubkey || o3.pubkey);
  });
  lazy$3.prop(o3, "output", () => {
    if (!o3.hash) return;
    return bscript$6.compile([
      OPS$3.OP_DUP,
      OPS$3.OP_HASH160,
      o3.hash,
      OPS$3.OP_EQUALVERIFY,
      OPS$3.OP_CHECKSIG
    ]);
  });
  lazy$3.prop(o3, "pubkey", () => {
    if (!a2.input) return;
    return _chunks()[1];
  });
  lazy$3.prop(o3, "signature", () => {
    if (!a2.input) return;
    return _chunks()[0];
  });
  lazy$3.prop(o3, "input", () => {
    if (!a2.pubkey) return;
    if (!a2.signature) return;
    return bscript$6.compile([a2.signature, a2.pubkey]);
  });
  lazy$3.prop(o3, "witness", () => {
    if (!o3.input) return;
    return [];
  });
  if (opts.validate) {
    let hash2 = Buffer$3.from([]);
    if (a2.address) {
      if (_address().version !== network.pubKeyHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (_address().hash.length !== 20) throw new TypeError("Invalid address");
      hash2 = _address().hash;
    }
    if (a2.hash) {
      if (hash2.length > 0 && !hash2.equals(a2.hash))
        throw new TypeError("Hash mismatch");
      else hash2 = a2.hash;
    }
    if (a2.output) {
      if (a2.output.length !== 25 || a2.output[0] !== OPS$3.OP_DUP || a2.output[1] !== OPS$3.OP_HASH160 || a2.output[2] !== 20 || a2.output[23] !== OPS$3.OP_EQUALVERIFY || a2.output[24] !== OPS$3.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      const hash22 = a2.output.slice(3, 23);
      if (hash2.length > 0 && !hash2.equals(hash22))
        throw new TypeError("Hash mismatch");
      else hash2 = hash22;
    }
    if (a2.pubkey) {
      const pkh = bcrypto$5.hash160(a2.pubkey);
      if (hash2.length > 0 && !hash2.equals(pkh))
        throw new TypeError("Hash mismatch");
      else hash2 = pkh;
    }
    if (a2.input) {
      const chunks = _chunks();
      if (chunks.length !== 2) throw new TypeError("Input is invalid");
      if (!bscript$6.isCanonicalScriptSignature(chunks[0]))
        throw new TypeError("Input has invalid signature");
      if (!(0, types_1$4.isPoint)(chunks[1]))
        throw new TypeError("Input has invalid pubkey");
      if (a2.signature && !a2.signature.equals(chunks[0]))
        throw new TypeError("Signature mismatch");
      if (a2.pubkey && !a2.pubkey.equals(chunks[1]))
        throw new TypeError("Pubkey mismatch");
      const pkh = bcrypto$5.hash160(chunks[1]);
      if (hash2.length > 0 && !hash2.equals(pkh))
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(o3, a2);
}
p2pkh$1.p2pkh = p2pkh;
var p2sh$1 = {};
Object.defineProperty(p2sh$1, "__esModule", { value: true });
p2sh$1.p2sh = void 0;
const bcrypto$4 = crypto$5;
const networks_1$3 = networks$2;
const bscript$5 = requireScript();
const types_1$3 = types$7;
const lazy$2 = lazy$7;
const bs58check$3 = bs58check$5;
const OPS$2 = bscript$5.OPS;
function p2sh(a2, opts) {
  if (!a2.address && !a2.hash && !a2.output && !a2.redeem && !a2.input)
    throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  (0, types_1$3.typeforce)(
    {
      network: types_1$3.typeforce.maybe(types_1$3.typeforce.Object),
      address: types_1$3.typeforce.maybe(types_1$3.typeforce.String),
      hash: types_1$3.typeforce.maybe(types_1$3.typeforce.BufferN(20)),
      output: types_1$3.typeforce.maybe(types_1$3.typeforce.BufferN(23)),
      redeem: types_1$3.typeforce.maybe({
        network: types_1$3.typeforce.maybe(types_1$3.typeforce.Object),
        output: types_1$3.typeforce.maybe(types_1$3.typeforce.Buffer),
        input: types_1$3.typeforce.maybe(types_1$3.typeforce.Buffer),
        witness: types_1$3.typeforce.maybe(
          types_1$3.typeforce.arrayOf(types_1$3.typeforce.Buffer)
        )
      }),
      input: types_1$3.typeforce.maybe(types_1$3.typeforce.Buffer),
      witness: types_1$3.typeforce.maybe(
        types_1$3.typeforce.arrayOf(types_1$3.typeforce.Buffer)
      )
    },
    a2
  );
  let network = a2.network;
  if (!network) {
    network = a2.redeem && a2.redeem.network || networks_1$3.bitcoin;
  }
  const o3 = { network };
  const _address = lazy$2.value(() => {
    const payload = Buffer$3.from(bs58check$3.decode(a2.address));
    const version2 = payload.readUInt8(0);
    const hash2 = payload.slice(1);
    return { version: version2, hash: hash2 };
  });
  const _chunks = lazy$2.value(() => {
    return bscript$5.decompile(a2.input);
  });
  const _redeem = lazy$2.value(() => {
    const chunks = _chunks();
    const lastChunk = chunks[chunks.length - 1];
    return {
      network,
      output: lastChunk === OPS$2.OP_FALSE ? Buffer$3.from([]) : lastChunk,
      input: bscript$5.compile(chunks.slice(0, -1)),
      witness: a2.witness || []
    };
  });
  lazy$2.prop(o3, "address", () => {
    if (!o3.hash) return;
    const payload = Buffer$3.allocUnsafe(21);
    payload.writeUInt8(o3.network.scriptHash, 0);
    o3.hash.copy(payload, 1);
    return bs58check$3.encode(payload);
  });
  lazy$2.prop(o3, "hash", () => {
    if (a2.output) return a2.output.slice(2, 22);
    if (a2.address) return _address().hash;
    if (o3.redeem && o3.redeem.output) return bcrypto$4.hash160(o3.redeem.output);
  });
  lazy$2.prop(o3, "output", () => {
    if (!o3.hash) return;
    return bscript$5.compile([OPS$2.OP_HASH160, o3.hash, OPS$2.OP_EQUAL]);
  });
  lazy$2.prop(o3, "redeem", () => {
    if (!a2.input) return;
    return _redeem();
  });
  lazy$2.prop(o3, "input", () => {
    if (!a2.redeem || !a2.redeem.input || !a2.redeem.output) return;
    return bscript$5.compile(
      [].concat(bscript$5.decompile(a2.redeem.input), a2.redeem.output)
    );
  });
  lazy$2.prop(o3, "witness", () => {
    if (o3.redeem && o3.redeem.witness) return o3.redeem.witness;
    if (o3.input) return [];
  });
  lazy$2.prop(o3, "name", () => {
    const nameParts = ["p2sh"];
    if (o3.redeem !== void 0 && o3.redeem.name !== void 0)
      nameParts.push(o3.redeem.name);
    return nameParts.join("-");
  });
  if (opts.validate) {
    let hash2 = Buffer$3.from([]);
    if (a2.address) {
      if (_address().version !== network.scriptHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (_address().hash.length !== 20) throw new TypeError("Invalid address");
      hash2 = _address().hash;
    }
    if (a2.hash) {
      if (hash2.length > 0 && !hash2.equals(a2.hash))
        throw new TypeError("Hash mismatch");
      else hash2 = a2.hash;
    }
    if (a2.output) {
      if (a2.output.length !== 23 || a2.output[0] !== OPS$2.OP_HASH160 || a2.output[1] !== 20 || a2.output[22] !== OPS$2.OP_EQUAL)
        throw new TypeError("Output is invalid");
      const hash22 = a2.output.slice(2, 22);
      if (hash2.length > 0 && !hash2.equals(hash22))
        throw new TypeError("Hash mismatch");
      else hash2 = hash22;
    }
    const checkRedeem = (redeem) => {
      if (redeem.output) {
        const decompile = bscript$5.decompile(redeem.output);
        if (!decompile || decompile.length < 1)
          throw new TypeError("Redeem.output too short");
        if (redeem.output.byteLength > 520)
          throw new TypeError(
            "Redeem.output unspendable if larger than 520 bytes"
          );
        if (bscript$5.countNonPushOnlyOPs(decompile) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const hash22 = bcrypto$4.hash160(redeem.output);
        if (hash2.length > 0 && !hash2.equals(hash22))
          throw new TypeError("Hash mismatch");
        else hash2 = hash22;
      }
      if (redeem.input) {
        const hasInput = redeem.input.length > 0;
        const hasWitness = redeem.witness && redeem.witness.length > 0;
        if (!hasInput && !hasWitness) throw new TypeError("Empty input");
        if (hasInput && hasWitness)
          throw new TypeError("Input and witness provided");
        if (hasInput) {
          const richunks = bscript$5.decompile(redeem.input);
          if (!bscript$5.isPushOnly(richunks))
            throw new TypeError("Non push-only scriptSig");
        }
      }
    };
    if (a2.input) {
      const chunks = _chunks();
      if (!chunks || chunks.length < 1) throw new TypeError("Input too short");
      if (!Buffer$3.isBuffer(_redeem().output))
        throw new TypeError("Input is invalid");
      checkRedeem(_redeem());
    }
    if (a2.redeem) {
      if (a2.redeem.network && a2.redeem.network !== network)
        throw new TypeError("Network mismatch");
      if (a2.input) {
        const redeem = _redeem();
        if (a2.redeem.output && !a2.redeem.output.equals(redeem.output))
          throw new TypeError("Redeem.output mismatch");
        if (a2.redeem.input && !a2.redeem.input.equals(redeem.input))
          throw new TypeError("Redeem.input mismatch");
      }
      checkRedeem(a2.redeem);
    }
    if (a2.witness) {
      if (a2.redeem && a2.redeem.witness && !(0, types_1$3.stacksEqual)(a2.redeem.witness, a2.witness))
        throw new TypeError("Witness and redeem.witness mismatch");
    }
  }
  return Object.assign(o3, a2);
}
p2sh$1.p2sh = p2sh;
var p2wpkh$1 = {};
var dist$1 = {};
Object.defineProperty(dist$1, "__esModule", { value: true });
dist$1.bech32m = dist$1.bech32 = void 0;
const ALPHABET$1 = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
const ALPHABET_MAP = {};
for (let z2 = 0; z2 < ALPHABET$1.length; z2++) {
  const x2 = ALPHABET$1.charAt(z2);
  ALPHABET_MAP[x2] = z2;
}
function polymodStep(pre) {
  const b2 = pre >> 25;
  return (pre & 33554431) << 5 ^ -(b2 >> 0 & 1) & 996825010 ^ -(b2 >> 1 & 1) & 642813549 ^ -(b2 >> 2 & 1) & 513874426 ^ -(b2 >> 3 & 1) & 1027748829 ^ -(b2 >> 4 & 1) & 705979059;
}
function prefixChk(prefix) {
  let chk = 1;
  for (let i2 = 0; i2 < prefix.length; ++i2) {
    const c2 = prefix.charCodeAt(i2);
    if (c2 < 33 || c2 > 126)
      return "Invalid prefix (" + prefix + ")";
    chk = polymodStep(chk) ^ c2 >> 5;
  }
  chk = polymodStep(chk);
  for (let i2 = 0; i2 < prefix.length; ++i2) {
    const v2 = prefix.charCodeAt(i2);
    chk = polymodStep(chk) ^ v2 & 31;
  }
  return chk;
}
function convert$2(data, inBits, outBits, pad2) {
  let value3 = 0;
  let bits = 0;
  const maxV = (1 << outBits) - 1;
  const result = [];
  for (let i2 = 0; i2 < data.length; ++i2) {
    value3 = value3 << inBits | data[i2];
    bits += inBits;
    while (bits >= outBits) {
      bits -= outBits;
      result.push(value3 >> bits & maxV);
    }
  }
  if (pad2) {
    if (bits > 0) {
      result.push(value3 << outBits - bits & maxV);
    }
  } else {
    if (bits >= inBits)
      return "Excess padding";
    if (value3 << outBits - bits & maxV)
      return "Non-zero padding";
  }
  return result;
}
function toWords(bytes2) {
  return convert$2(bytes2, 8, 5, true);
}
function fromWordsUnsafe(words) {
  const res = convert$2(words, 5, 8, false);
  if (Array.isArray(res))
    return res;
}
function fromWords(words) {
  const res = convert$2(words, 5, 8, false);
  if (Array.isArray(res))
    return res;
  throw new Error(res);
}
function getLibraryFromEncoding(encoding) {
  let ENCODING_CONST;
  if (encoding === "bech32") {
    ENCODING_CONST = 1;
  } else {
    ENCODING_CONST = 734539939;
  }
  function encode2(prefix, words, LIMIT) {
    LIMIT = LIMIT || 90;
    if (prefix.length + 7 + words.length > LIMIT)
      throw new TypeError("Exceeds length limit");
    prefix = prefix.toLowerCase();
    let chk = prefixChk(prefix);
    if (typeof chk === "string")
      throw new Error(chk);
    let result = prefix + "1";
    for (let i2 = 0; i2 < words.length; ++i2) {
      const x2 = words[i2];
      if (x2 >> 5 !== 0)
        throw new Error("Non 5-bit word");
      chk = polymodStep(chk) ^ x2;
      result += ALPHABET$1.charAt(x2);
    }
    for (let i2 = 0; i2 < 6; ++i2) {
      chk = polymodStep(chk);
    }
    chk ^= ENCODING_CONST;
    for (let i2 = 0; i2 < 6; ++i2) {
      const v2 = chk >> (5 - i2) * 5 & 31;
      result += ALPHABET$1.charAt(v2);
    }
    return result;
  }
  function __decode(str, LIMIT) {
    LIMIT = LIMIT || 90;
    if (str.length < 8)
      return str + " too short";
    if (str.length > LIMIT)
      return "Exceeds length limit";
    const lowered = str.toLowerCase();
    const uppered = str.toUpperCase();
    if (str !== lowered && str !== uppered)
      return "Mixed-case string " + str;
    str = lowered;
    const split2 = str.lastIndexOf("1");
    if (split2 === -1)
      return "No separator character for " + str;
    if (split2 === 0)
      return "Missing prefix for " + str;
    const prefix = str.slice(0, split2);
    const wordChars = str.slice(split2 + 1);
    if (wordChars.length < 6)
      return "Data too short";
    let chk = prefixChk(prefix);
    if (typeof chk === "string")
      return chk;
    const words = [];
    for (let i2 = 0; i2 < wordChars.length; ++i2) {
      const c2 = wordChars.charAt(i2);
      const v2 = ALPHABET_MAP[c2];
      if (v2 === void 0)
        return "Unknown character " + c2;
      chk = polymodStep(chk) ^ v2;
      if (i2 + 6 >= wordChars.length)
        continue;
      words.push(v2);
    }
    if (chk !== ENCODING_CONST)
      return "Invalid checksum for " + str;
    return { prefix, words };
  }
  function decodeUnsafe(str, LIMIT) {
    const res = __decode(str, LIMIT);
    if (typeof res === "object")
      return res;
  }
  function decode2(str, LIMIT) {
    const res = __decode(str, LIMIT);
    if (typeof res === "object")
      return res;
    throw new Error(res);
  }
  return {
    decodeUnsafe,
    decode: decode2,
    encode: encode2,
    toWords,
    fromWordsUnsafe,
    fromWords
  };
}
dist$1.bech32 = getLibraryFromEncoding("bech32");
dist$1.bech32m = getLibraryFromEncoding("bech32m");
Object.defineProperty(p2wpkh$1, "__esModule", { value: true });
p2wpkh$1.p2wpkh = void 0;
const bcrypto$3 = crypto$5;
const networks_1$2 = networks$2;
const bscript$4 = requireScript();
const types_1$2 = types$7;
const lazy$1 = lazy$7;
const bech32_1$1 = dist$1;
const OPS$1 = bscript$4.OPS;
const EMPTY_BUFFER$2 = Buffer$3.alloc(0);
function p2wpkh(a2, opts) {
  if (!a2.address && !a2.hash && !a2.output && !a2.pubkey && !a2.witness)
    throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  (0, types_1$2.typeforce)(
    {
      address: types_1$2.typeforce.maybe(types_1$2.typeforce.String),
      hash: types_1$2.typeforce.maybe(types_1$2.typeforce.BufferN(20)),
      input: types_1$2.typeforce.maybe(types_1$2.typeforce.BufferN(0)),
      network: types_1$2.typeforce.maybe(types_1$2.typeforce.Object),
      output: types_1$2.typeforce.maybe(types_1$2.typeforce.BufferN(22)),
      pubkey: types_1$2.typeforce.maybe(types_1$2.isPoint),
      signature: types_1$2.typeforce.maybe(bscript$4.isCanonicalScriptSignature),
      witness: types_1$2.typeforce.maybe(
        types_1$2.typeforce.arrayOf(types_1$2.typeforce.Buffer)
      )
    },
    a2
  );
  const _address = lazy$1.value(() => {
    const result = bech32_1$1.bech32.decode(a2.address);
    const version2 = result.words.shift();
    const data = bech32_1$1.bech32.fromWords(result.words);
    return {
      version: version2,
      prefix: result.prefix,
      data: Buffer$3.from(data)
    };
  });
  const network = a2.network || networks_1$2.bitcoin;
  const o3 = { name: "p2wpkh", network };
  lazy$1.prop(o3, "address", () => {
    if (!o3.hash) return;
    const words = bech32_1$1.bech32.toWords(o3.hash);
    words.unshift(0);
    return bech32_1$1.bech32.encode(network.bech32, words);
  });
  lazy$1.prop(o3, "hash", () => {
    if (a2.output) return a2.output.slice(2, 22);
    if (a2.address) return _address().data;
    if (a2.pubkey || o3.pubkey) return bcrypto$3.hash160(a2.pubkey || o3.pubkey);
  });
  lazy$1.prop(o3, "output", () => {
    if (!o3.hash) return;
    return bscript$4.compile([OPS$1.OP_0, o3.hash]);
  });
  lazy$1.prop(o3, "pubkey", () => {
    if (a2.pubkey) return a2.pubkey;
    if (!a2.witness) return;
    return a2.witness[1];
  });
  lazy$1.prop(o3, "signature", () => {
    if (!a2.witness) return;
    return a2.witness[0];
  });
  lazy$1.prop(o3, "input", () => {
    if (!o3.witness) return;
    return EMPTY_BUFFER$2;
  });
  lazy$1.prop(o3, "witness", () => {
    if (!a2.pubkey) return;
    if (!a2.signature) return;
    return [a2.signature, a2.pubkey];
  });
  if (opts.validate) {
    let hash2 = Buffer$3.from([]);
    if (a2.address) {
      if (network && network.bech32 !== _address().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (_address().version !== 0)
        throw new TypeError("Invalid address version");
      if (_address().data.length !== 20)
        throw new TypeError("Invalid address data");
      hash2 = _address().data;
    }
    if (a2.hash) {
      if (hash2.length > 0 && !hash2.equals(a2.hash))
        throw new TypeError("Hash mismatch");
      else hash2 = a2.hash;
    }
    if (a2.output) {
      if (a2.output.length !== 22 || a2.output[0] !== OPS$1.OP_0 || a2.output[1] !== 20)
        throw new TypeError("Output is invalid");
      if (hash2.length > 0 && !hash2.equals(a2.output.slice(2)))
        throw new TypeError("Hash mismatch");
      else hash2 = a2.output.slice(2);
    }
    if (a2.pubkey) {
      const pkh = bcrypto$3.hash160(a2.pubkey);
      if (hash2.length > 0 && !hash2.equals(pkh))
        throw new TypeError("Hash mismatch");
      else hash2 = pkh;
      if (!(0, types_1$2.isPoint)(a2.pubkey) || a2.pubkey.length !== 33)
        throw new TypeError("Invalid pubkey for p2wpkh");
    }
    if (a2.witness) {
      if (a2.witness.length !== 2) throw new TypeError("Witness is invalid");
      if (!bscript$4.isCanonicalScriptSignature(a2.witness[0]))
        throw new TypeError("Witness has invalid signature");
      if (!(0, types_1$2.isPoint)(a2.witness[1]) || a2.witness[1].length !== 33)
        throw new TypeError("Witness has invalid pubkey");
      if (a2.signature && !a2.signature.equals(a2.witness[0]))
        throw new TypeError("Signature mismatch");
      if (a2.pubkey && !a2.pubkey.equals(a2.witness[1]))
        throw new TypeError("Pubkey mismatch");
      const pkh = bcrypto$3.hash160(a2.witness[1]);
      if (hash2.length > 0 && !hash2.equals(pkh))
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(o3, a2);
}
p2wpkh$1.p2wpkh = p2wpkh;
var p2wsh$1 = {};
Object.defineProperty(p2wsh$1, "__esModule", { value: true });
p2wsh$1.p2wsh = void 0;
const bcrypto$2 = crypto$5;
const networks_1$1 = networks$2;
const bscript$3 = requireScript();
const types_1$1 = types$7;
const lazy = lazy$7;
const bech32_1 = dist$1;
const OPS = bscript$3.OPS;
const EMPTY_BUFFER$1 = Buffer$3.alloc(0);
function chunkHasUncompressedPubkey(chunk) {
  if (Buffer$3.isBuffer(chunk) && chunk.length === 65 && chunk[0] === 4 && (0, types_1$1.isPoint)(chunk)) {
    return true;
  } else {
    return false;
  }
}
function p2wsh(a2, opts) {
  if (!a2.address && !a2.hash && !a2.output && !a2.redeem && !a2.witness)
    throw new TypeError("Not enough data");
  opts = Object.assign({ validate: true }, opts || {});
  (0, types_1$1.typeforce)(
    {
      network: types_1$1.typeforce.maybe(types_1$1.typeforce.Object),
      address: types_1$1.typeforce.maybe(types_1$1.typeforce.String),
      hash: types_1$1.typeforce.maybe(types_1$1.typeforce.BufferN(32)),
      output: types_1$1.typeforce.maybe(types_1$1.typeforce.BufferN(34)),
      redeem: types_1$1.typeforce.maybe({
        input: types_1$1.typeforce.maybe(types_1$1.typeforce.Buffer),
        network: types_1$1.typeforce.maybe(types_1$1.typeforce.Object),
        output: types_1$1.typeforce.maybe(types_1$1.typeforce.Buffer),
        witness: types_1$1.typeforce.maybe(
          types_1$1.typeforce.arrayOf(types_1$1.typeforce.Buffer)
        )
      }),
      input: types_1$1.typeforce.maybe(types_1$1.typeforce.BufferN(0)),
      witness: types_1$1.typeforce.maybe(
        types_1$1.typeforce.arrayOf(types_1$1.typeforce.Buffer)
      )
    },
    a2
  );
  const _address = lazy.value(() => {
    const result = bech32_1.bech32.decode(a2.address);
    const version2 = result.words.shift();
    const data = bech32_1.bech32.fromWords(result.words);
    return {
      version: version2,
      prefix: result.prefix,
      data: Buffer$3.from(data)
    };
  });
  const _rchunks = lazy.value(() => {
    return bscript$3.decompile(a2.redeem.input);
  });
  let network = a2.network;
  if (!network) {
    network = a2.redeem && a2.redeem.network || networks_1$1.bitcoin;
  }
  const o3 = { network };
  lazy.prop(o3, "address", () => {
    if (!o3.hash) return;
    const words = bech32_1.bech32.toWords(o3.hash);
    words.unshift(0);
    return bech32_1.bech32.encode(network.bech32, words);
  });
  lazy.prop(o3, "hash", () => {
    if (a2.output) return a2.output.slice(2);
    if (a2.address) return _address().data;
    if (o3.redeem && o3.redeem.output) return bcrypto$2.sha256(o3.redeem.output);
  });
  lazy.prop(o3, "output", () => {
    if (!o3.hash) return;
    return bscript$3.compile([OPS.OP_0, o3.hash]);
  });
  lazy.prop(o3, "redeem", () => {
    if (!a2.witness) return;
    return {
      output: a2.witness[a2.witness.length - 1],
      input: EMPTY_BUFFER$1,
      witness: a2.witness.slice(0, -1)
    };
  });
  lazy.prop(o3, "input", () => {
    if (!o3.witness) return;
    return EMPTY_BUFFER$1;
  });
  lazy.prop(o3, "witness", () => {
    if (a2.redeem && a2.redeem.input && a2.redeem.input.length > 0 && a2.redeem.output && a2.redeem.output.length > 0) {
      const stack = bscript$3.toStack(_rchunks());
      o3.redeem = Object.assign({ witness: stack }, a2.redeem);
      o3.redeem.input = EMPTY_BUFFER$1;
      return [].concat(stack, a2.redeem.output);
    }
    if (!a2.redeem) return;
    if (!a2.redeem.output) return;
    if (!a2.redeem.witness) return;
    return [].concat(a2.redeem.witness, a2.redeem.output);
  });
  lazy.prop(o3, "name", () => {
    const nameParts = ["p2wsh"];
    if (o3.redeem !== void 0 && o3.redeem.name !== void 0)
      nameParts.push(o3.redeem.name);
    return nameParts.join("-");
  });
  if (opts.validate) {
    let hash2 = Buffer$3.from([]);
    if (a2.address) {
      if (_address().prefix !== network.bech32)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (_address().version !== 0)
        throw new TypeError("Invalid address version");
      if (_address().data.length !== 32)
        throw new TypeError("Invalid address data");
      hash2 = _address().data;
    }
    if (a2.hash) {
      if (hash2.length > 0 && !hash2.equals(a2.hash))
        throw new TypeError("Hash mismatch");
      else hash2 = a2.hash;
    }
    if (a2.output) {
      if (a2.output.length !== 34 || a2.output[0] !== OPS.OP_0 || a2.output[1] !== 32)
        throw new TypeError("Output is invalid");
      const hash22 = a2.output.slice(2);
      if (hash2.length > 0 && !hash2.equals(hash22))
        throw new TypeError("Hash mismatch");
      else hash2 = hash22;
    }
    if (a2.redeem) {
      if (a2.redeem.network && a2.redeem.network !== network)
        throw new TypeError("Network mismatch");
      if (a2.redeem.input && a2.redeem.input.length > 0 && a2.redeem.witness && a2.redeem.witness.length > 0)
        throw new TypeError("Ambiguous witness source");
      if (a2.redeem.output) {
        const decompile = bscript$3.decompile(a2.redeem.output);
        if (!decompile || decompile.length < 1)
          throw new TypeError("Redeem.output is invalid");
        if (a2.redeem.output.byteLength > 3600)
          throw new TypeError(
            "Redeem.output unspendable if larger than 3600 bytes"
          );
        if (bscript$3.countNonPushOnlyOPs(decompile) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const hash22 = bcrypto$2.sha256(a2.redeem.output);
        if (hash2.length > 0 && !hash2.equals(hash22))
          throw new TypeError("Hash mismatch");
        else hash2 = hash22;
      }
      if (a2.redeem.input && !bscript$3.isPushOnly(_rchunks()))
        throw new TypeError("Non push-only scriptSig");
      if (a2.witness && a2.redeem.witness && !(0, types_1$1.stacksEqual)(a2.witness, a2.redeem.witness))
        throw new TypeError("Witness and redeem.witness mismatch");
      if (a2.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a2.redeem.output && (bscript$3.decompile(a2.redeem.output) || []).some(
        chunkHasUncompressedPubkey
      )) {
        throw new TypeError(
          "redeem.input or redeem.output contains uncompressed pubkey"
        );
      }
    }
    if (a2.witness && a2.witness.length > 0) {
      const wScript = a2.witness[a2.witness.length - 1];
      if (a2.redeem && a2.redeem.output && !a2.redeem.output.equals(wScript))
        throw new TypeError("Witness and redeem.output mismatch");
      if (a2.witness.some(chunkHasUncompressedPubkey) || (bscript$3.decompile(wScript) || []).some(chunkHasUncompressedPubkey))
        throw new TypeError("Witness contains uncompressed pubkey");
    }
  }
  return Object.assign(o3, a2);
}
p2wsh$1.p2wsh = p2wsh;
var p2tr = {};
var ecc_lib = {};
Object.defineProperty(ecc_lib, "__esModule", { value: true });
ecc_lib.getEccLib = ecc_lib.initEccLib = void 0;
const _ECCLIB_CACHE = {};
function initEccLib(eccLib) {
  if (!eccLib) {
    _ECCLIB_CACHE.eccLib = eccLib;
  } else if (eccLib !== _ECCLIB_CACHE.eccLib) {
    verifyEcc(eccLib);
    _ECCLIB_CACHE.eccLib = eccLib;
  }
}
ecc_lib.initEccLib = initEccLib;
function getEccLib() {
  if (!_ECCLIB_CACHE.eccLib)
    throw new Error(
      "No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance"
    );
  return _ECCLIB_CACHE.eccLib;
}
ecc_lib.getEccLib = getEccLib;
const h$3 = (hex) => Buffer$3.from(hex, "hex");
function verifyEcc(ecc2) {
  assert$2(typeof ecc2.isXOnlyPoint === "function");
  assert$2(
    ecc2.isXOnlyPoint(
      h$3("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  );
  assert$2(
    ecc2.isXOnlyPoint(
      h$3("fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e")
    )
  );
  assert$2(
    ecc2.isXOnlyPoint(
      h$3("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9")
    )
  );
  assert$2(
    ecc2.isXOnlyPoint(
      h$3("0000000000000000000000000000000000000000000000000000000000000001")
    )
  );
  assert$2(
    !ecc2.isXOnlyPoint(
      h$3("0000000000000000000000000000000000000000000000000000000000000000")
    )
  );
  assert$2(
    !ecc2.isXOnlyPoint(
      h$3("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f")
    )
  );
  assert$2(typeof ecc2.xOnlyPointAddTweak === "function");
  tweakAddVectors.forEach((t2) => {
    const r2 = ecc2.xOnlyPointAddTweak(h$3(t2.pubkey), h$3(t2.tweak));
    if (t2.result === null) {
      assert$2(r2 === null);
    } else {
      assert$2(r2 !== null);
      assert$2(r2.parity === t2.parity);
      assert$2(Buffer$3.from(r2.xOnlyPubkey).equals(h$3(t2.result)));
    }
  });
}
function assert$2(bool2) {
  if (!bool2) throw new Error("ecc library invalid");
}
const tweakAddVectors = [
  {
    pubkey: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    tweak: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140",
    parity: -1,
    result: null
  },
  {
    pubkey: "1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b",
    tweak: "a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac",
    parity: 1,
    result: "e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"
  },
  {
    pubkey: "2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991",
    tweak: "823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47",
    parity: 0,
    result: "9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c"
  }
];
var bip341 = {};
var bufferutils = {};
var safeBuffer$1 = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
(function(module, exports2) {
  var buffer2 = require$$1$2;
  var Buffer2 = buffer2.Buffer;
  function copyProps(src2, dst) {
    for (var key2 in src2) {
      dst[key2] = src2[key2];
    }
  }
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    module.exports = buffer2;
  } else {
    copyProps(buffer2, exports2);
    exports2.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer2(arg, encodingOrOffset, length);
  }
  SafeBuffer.prototype = Object.create(Buffer2.prototype);
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer2.SlowBuffer(size);
  };
})(safeBuffer$1, safeBuffer$1.exports);
var safeBufferExports = safeBuffer$1.exports;
var Buffer$2 = safeBufferExports.Buffer;
var MAX_SAFE_INTEGER$2 = 9007199254740991;
function checkUInt53$1(n2) {
  if (n2 < 0 || n2 > MAX_SAFE_INTEGER$2 || n2 % 1 !== 0) throw new RangeError("value out of range");
}
function encode$h(number2, buffer2, offset) {
  checkUInt53$1(number2);
  if (!buffer2) buffer2 = Buffer$2.allocUnsafe(encodingLength$1(number2));
  if (!Buffer$2.isBuffer(buffer2)) throw new TypeError("buffer must be a Buffer instance");
  if (!offset) offset = 0;
  if (number2 < 253) {
    buffer2.writeUInt8(number2, offset);
    encode$h.bytes = 1;
  } else if (number2 <= 65535) {
    buffer2.writeUInt8(253, offset);
    buffer2.writeUInt16LE(number2, offset + 1);
    encode$h.bytes = 3;
  } else if (number2 <= 4294967295) {
    buffer2.writeUInt8(254, offset);
    buffer2.writeUInt32LE(number2, offset + 1);
    encode$h.bytes = 5;
  } else {
    buffer2.writeUInt8(255, offset);
    buffer2.writeUInt32LE(number2 >>> 0, offset + 1);
    buffer2.writeUInt32LE(number2 / 4294967296 | 0, offset + 5);
    encode$h.bytes = 9;
  }
  return buffer2;
}
function decode$h(buffer2, offset) {
  if (!Buffer$2.isBuffer(buffer2)) throw new TypeError("buffer must be a Buffer instance");
  if (!offset) offset = 0;
  var first = buffer2.readUInt8(offset);
  if (first < 253) {
    decode$h.bytes = 1;
    return first;
  } else if (first === 253) {
    decode$h.bytes = 3;
    return buffer2.readUInt16LE(offset + 1);
  } else if (first === 254) {
    decode$h.bytes = 5;
    return buffer2.readUInt32LE(offset + 1);
  } else {
    decode$h.bytes = 9;
    var lo = buffer2.readUInt32LE(offset + 1);
    var hi = buffer2.readUInt32LE(offset + 5);
    var number2 = hi * 4294967296 + lo;
    checkUInt53$1(number2);
    return number2;
  }
}
function encodingLength$1(number2) {
  checkUInt53$1(number2);
  return number2 < 253 ? 1 : number2 <= 65535 ? 3 : number2 <= 4294967295 ? 5 : 9;
}
var varuintBitcoin = { encode: encode$h, decode: decode$h, encodingLength: encodingLength$1 };
Object.defineProperty(bufferutils, "__esModule", { value: true });
bufferutils.BufferReader = bufferutils.BufferWriter = bufferutils.cloneBuffer = bufferutils.reverseBuffer = bufferutils.writeUInt64LE = bufferutils.readUInt64LE = bufferutils.varuint = void 0;
const types$5 = types$7;
const { typeforce: typeforce$3 } = types$5;
const varuint$7 = varuintBitcoin;
bufferutils.varuint = varuint$7;
function verifuint$1(value3, max) {
  if (typeof value3 !== "number")
    throw new Error("cannot write a non-number as a number");
  if (value3 < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (value3 > max) throw new Error("RangeError: value out of range");
  if (Math.floor(value3) !== value3)
    throw new Error("value has a fractional component");
}
function readUInt64LE$1(buffer2, offset) {
  const a2 = buffer2.readUInt32LE(offset);
  let b2 = buffer2.readUInt32LE(offset + 4);
  b2 *= 4294967296;
  verifuint$1(b2 + a2, 9007199254740991);
  return b2 + a2;
}
bufferutils.readUInt64LE = readUInt64LE$1;
function writeUInt64LE$1(buffer2, value3, offset) {
  verifuint$1(value3, 9007199254740991);
  buffer2.writeInt32LE(value3 & -1, offset);
  buffer2.writeUInt32LE(Math.floor(value3 / 4294967296), offset + 4);
  return offset + 8;
}
bufferutils.writeUInt64LE = writeUInt64LE$1;
function reverseBuffer$2(buffer2) {
  if (buffer2.length < 1) return buffer2;
  let j2 = buffer2.length - 1;
  let tmp = 0;
  for (let i2 = 0; i2 < buffer2.length / 2; i2++) {
    tmp = buffer2[i2];
    buffer2[i2] = buffer2[j2];
    buffer2[j2] = tmp;
    j2--;
  }
  return buffer2;
}
bufferutils.reverseBuffer = reverseBuffer$2;
function cloneBuffer(buffer2) {
  const clone2 = Buffer$3.allocUnsafe(buffer2.length);
  buffer2.copy(clone2);
  return clone2;
}
bufferutils.cloneBuffer = cloneBuffer;
class BufferWriter {
  static withCapacity(size) {
    return new BufferWriter(Buffer$3.alloc(size));
  }
  constructor(buffer2, offset = 0) {
    this.buffer = buffer2;
    this.offset = offset;
    typeforce$3(types$5.tuple(types$5.Buffer, types$5.UInt32), [buffer2, offset]);
  }
  writeUInt8(i2) {
    this.offset = this.buffer.writeUInt8(i2, this.offset);
  }
  writeInt32(i2) {
    this.offset = this.buffer.writeInt32LE(i2, this.offset);
  }
  writeUInt32(i2) {
    this.offset = this.buffer.writeUInt32LE(i2, this.offset);
  }
  writeUInt64(i2) {
    this.offset = writeUInt64LE$1(this.buffer, i2, this.offset);
  }
  writeVarInt(i2) {
    varuint$7.encode(i2, this.buffer, this.offset);
    this.offset += varuint$7.encode.bytes;
  }
  writeSlice(slice) {
    if (this.buffer.length < this.offset + slice.length) {
      throw new Error("Cannot write slice out of bounds");
    }
    this.offset += slice.copy(this.buffer, this.offset);
  }
  writeVarSlice(slice) {
    this.writeVarInt(slice.length);
    this.writeSlice(slice);
  }
  writeVector(vector) {
    this.writeVarInt(vector.length);
    vector.forEach((buf) => this.writeVarSlice(buf));
  }
  end() {
    if (this.buffer.length === this.offset) {
      return this.buffer;
    }
    throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
  }
}
bufferutils.BufferWriter = BufferWriter;
class BufferReader {
  constructor(buffer2, offset = 0) {
    this.buffer = buffer2;
    this.offset = offset;
    typeforce$3(types$5.tuple(types$5.Buffer, types$5.UInt32), [buffer2, offset]);
  }
  readUInt8() {
    const result = this.buffer.readUInt8(this.offset);
    this.offset++;
    return result;
  }
  readInt32() {
    const result = this.buffer.readInt32LE(this.offset);
    this.offset += 4;
    return result;
  }
  readUInt32() {
    const result = this.buffer.readUInt32LE(this.offset);
    this.offset += 4;
    return result;
  }
  readUInt64() {
    const result = readUInt64LE$1(this.buffer, this.offset);
    this.offset += 8;
    return result;
  }
  readVarInt() {
    const vi = varuint$7.decode(this.buffer, this.offset);
    this.offset += varuint$7.decode.bytes;
    return vi;
  }
  readSlice(n2) {
    if (this.buffer.length < this.offset + n2) {
      throw new Error("Cannot read slice out of bounds");
    }
    const result = this.buffer.slice(this.offset, this.offset + n2);
    this.offset += n2;
    return result;
  }
  readVarSlice() {
    return this.readSlice(this.readVarInt());
  }
  readVector() {
    const count = this.readVarInt();
    const vector = [];
    for (let i2 = 0; i2 < count; i2++) vector.push(this.readVarSlice());
    return vector;
  }
}
bufferutils.BufferReader = BufferReader;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.tweakKey = exports2.tapTweakHash = exports2.tapleafHash = exports2.findScriptPath = exports2.toHashTree = exports2.rootHashFromPath = exports2.MAX_TAPTREE_DEPTH = exports2.LEAF_VERSION_TAPSCRIPT = void 0;
  const buffer_1 = require$$1$2;
  const ecc_lib_1 = ecc_lib;
  const bcrypto2 = crypto$5;
  const bufferutils_12 = bufferutils;
  const types_12 = types$7;
  exports2.LEAF_VERSION_TAPSCRIPT = 192;
  exports2.MAX_TAPTREE_DEPTH = 128;
  const isHashBranch = (ht) => "left" in ht && "right" in ht;
  function rootHashFromPath(controlBlock, leafHash) {
    if (controlBlock.length < 33)
      throw new TypeError(
        `The control-block length is too small. Got ${controlBlock.length}, expected min 33.`
      );
    const m2 = (controlBlock.length - 33) / 32;
    let kj = leafHash;
    for (let j2 = 0; j2 < m2; j2++) {
      const ej = controlBlock.slice(33 + 32 * j2, 65 + 32 * j2);
      if (kj.compare(ej) < 0) {
        kj = tapBranchHash(kj, ej);
      } else {
        kj = tapBranchHash(ej, kj);
      }
    }
    return kj;
  }
  exports2.rootHashFromPath = rootHashFromPath;
  function toHashTree(scriptTree) {
    if ((0, types_12.isTapleaf)(scriptTree))
      return { hash: tapleafHash(scriptTree) };
    const hashes = [toHashTree(scriptTree[0]), toHashTree(scriptTree[1])];
    hashes.sort((a2, b2) => a2.hash.compare(b2.hash));
    const [left, right] = hashes;
    return {
      hash: tapBranchHash(left.hash, right.hash),
      left,
      right
    };
  }
  exports2.toHashTree = toHashTree;
  function findScriptPath(node2, hash2) {
    if (isHashBranch(node2)) {
      const leftPath = findScriptPath(node2.left, hash2);
      if (leftPath !== void 0) return [...leftPath, node2.right.hash];
      const rightPath = findScriptPath(node2.right, hash2);
      if (rightPath !== void 0) return [...rightPath, node2.left.hash];
    } else if (node2.hash.equals(hash2)) {
      return [];
    }
    return void 0;
  }
  exports2.findScriptPath = findScriptPath;
  function tapleafHash(leaf) {
    const version2 = leaf.version || exports2.LEAF_VERSION_TAPSCRIPT;
    return bcrypto2.taggedHash(
      "TapLeaf",
      buffer_1.Buffer.concat([
        buffer_1.Buffer.from([version2]),
        serializeScript(leaf.output)
      ])
    );
  }
  exports2.tapleafHash = tapleafHash;
  function tapTweakHash(pubKey, h2) {
    return bcrypto2.taggedHash(
      "TapTweak",
      buffer_1.Buffer.concat(h2 ? [pubKey, h2] : [pubKey])
    );
  }
  exports2.tapTweakHash = tapTweakHash;
  function tweakKey(pubKey, h2) {
    if (!buffer_1.Buffer.isBuffer(pubKey)) return null;
    if (pubKey.length !== 32) return null;
    if (h2 && h2.length !== 32) return null;
    const tweakHash = tapTweakHash(pubKey, h2);
    const res = (0, ecc_lib_1.getEccLib)().xOnlyPointAddTweak(pubKey, tweakHash);
    if (!res || res.xOnlyPubkey === null) return null;
    return {
      parity: res.parity,
      x: buffer_1.Buffer.from(res.xOnlyPubkey)
    };
  }
  exports2.tweakKey = tweakKey;
  function tapBranchHash(a2, b2) {
    return bcrypto2.taggedHash("TapBranch", buffer_1.Buffer.concat([a2, b2]));
  }
  function serializeScript(s2) {
    const varintLen = bufferutils_12.varuint.encodingLength(s2.length);
    const buffer2 = buffer_1.Buffer.allocUnsafe(varintLen);
    bufferutils_12.varuint.encode(s2.length, buffer2);
    return buffer_1.Buffer.concat([buffer2, s2]);
  }
})(bip341);
var hasRequiredP2tr;
function requireP2tr() {
  if (hasRequiredP2tr) return p2tr;
  hasRequiredP2tr = 1;
  Object.defineProperty(p2tr, "__esModule", { value: true });
  p2tr.p2tr = void 0;
  const buffer_1 = require$$1$2;
  const networks_12 = networks$2;
  const bscript2 = requireScript();
  const types_12 = types$7;
  const ecc_lib_1 = ecc_lib;
  const bip341_12 = bip341;
  const lazy2 = lazy$7;
  const bech32_12 = dist$1;
  const address_12 = requireAddress();
  const OPS2 = bscript2.OPS;
  const TAPROOT_WITNESS_VERSION = 1;
  const ANNEX_PREFIX = 80;
  function p2tr$1(a2, opts) {
    if (!a2.address && !a2.output && !a2.pubkey && !a2.internalPubkey && !(a2.witness && a2.witness.length > 1))
      throw new TypeError("Not enough data");
    opts = Object.assign({ validate: true }, opts || {});
    (0, types_12.typeforce)(
      {
        address: types_12.typeforce.maybe(types_12.typeforce.String),
        input: types_12.typeforce.maybe(types_12.typeforce.BufferN(0)),
        network: types_12.typeforce.maybe(types_12.typeforce.Object),
        output: types_12.typeforce.maybe(types_12.typeforce.BufferN(34)),
        internalPubkey: types_12.typeforce.maybe(types_12.typeforce.BufferN(32)),
        hash: types_12.typeforce.maybe(types_12.typeforce.BufferN(32)),
        pubkey: types_12.typeforce.maybe(types_12.typeforce.BufferN(32)),
        signature: types_12.typeforce.maybe(
          types_12.typeforce.anyOf(
            types_12.typeforce.BufferN(64),
            types_12.typeforce.BufferN(65)
          )
        ),
        witness: types_12.typeforce.maybe(
          types_12.typeforce.arrayOf(types_12.typeforce.Buffer)
        ),
        scriptTree: types_12.typeforce.maybe(types_12.isTaptree),
        redeem: types_12.typeforce.maybe({
          output: types_12.typeforce.maybe(types_12.typeforce.Buffer),
          redeemVersion: types_12.typeforce.maybe(types_12.typeforce.Number),
          witness: types_12.typeforce.maybe(
            types_12.typeforce.arrayOf(types_12.typeforce.Buffer)
          )
        }),
        redeemVersion: types_12.typeforce.maybe(types_12.typeforce.Number)
      },
      a2
    );
    const _address = lazy2.value(() => {
      return (0, address_12.fromBech32)(a2.address);
    });
    const _witness = lazy2.value(() => {
      if (!a2.witness || !a2.witness.length) return;
      if (a2.witness.length >= 2 && a2.witness[a2.witness.length - 1][0] === ANNEX_PREFIX) {
        return a2.witness.slice(0, -1);
      }
      return a2.witness.slice();
    });
    const _hashTree = lazy2.value(() => {
      if (a2.scriptTree) return (0, bip341_12.toHashTree)(a2.scriptTree);
      if (a2.hash) return { hash: a2.hash };
      return;
    });
    const network = a2.network || networks_12.bitcoin;
    const o3 = { name: "p2tr", network };
    lazy2.prop(o3, "address", () => {
      if (!o3.pubkey) return;
      const words = bech32_12.bech32m.toWords(o3.pubkey);
      words.unshift(TAPROOT_WITNESS_VERSION);
      return bech32_12.bech32m.encode(network.bech32, words);
    });
    lazy2.prop(o3, "hash", () => {
      const hashTree = _hashTree();
      if (hashTree) return hashTree.hash;
      const w2 = _witness();
      if (w2 && w2.length > 1) {
        const controlBlock = w2[w2.length - 1];
        const leafVersion = controlBlock[0] & types_12.TAPLEAF_VERSION_MASK;
        const script2 = w2[w2.length - 2];
        const leafHash = (0, bip341_12.tapleafHash)({
          output: script2,
          version: leafVersion
        });
        return (0, bip341_12.rootHashFromPath)(controlBlock, leafHash);
      }
      return null;
    });
    lazy2.prop(o3, "output", () => {
      if (!o3.pubkey) return;
      return bscript2.compile([OPS2.OP_1, o3.pubkey]);
    });
    lazy2.prop(o3, "redeemVersion", () => {
      if (a2.redeemVersion) return a2.redeemVersion;
      if (a2.redeem && a2.redeem.redeemVersion !== void 0 && a2.redeem.redeemVersion !== null) {
        return a2.redeem.redeemVersion;
      }
      return bip341_12.LEAF_VERSION_TAPSCRIPT;
    });
    lazy2.prop(o3, "redeem", () => {
      const witness = _witness();
      if (!witness || witness.length < 2) return;
      return {
        output: witness[witness.length - 2],
        witness: witness.slice(0, -2),
        redeemVersion: witness[witness.length - 1][0] & types_12.TAPLEAF_VERSION_MASK
      };
    });
    lazy2.prop(o3, "pubkey", () => {
      if (a2.pubkey) return a2.pubkey;
      if (a2.output) return a2.output.slice(2);
      if (a2.address) return _address().data;
      if (o3.internalPubkey) {
        const tweakedKey = (0, bip341_12.tweakKey)(o3.internalPubkey, o3.hash);
        if (tweakedKey) return tweakedKey.x;
      }
    });
    lazy2.prop(o3, "internalPubkey", () => {
      if (a2.internalPubkey) return a2.internalPubkey;
      const witness = _witness();
      if (witness && witness.length > 1)
        return witness[witness.length - 1].slice(1, 33);
    });
    lazy2.prop(o3, "signature", () => {
      if (a2.signature) return a2.signature;
      const witness = _witness();
      if (!witness || witness.length !== 1) return;
      return witness[0];
    });
    lazy2.prop(o3, "witness", () => {
      if (a2.witness) return a2.witness;
      const hashTree = _hashTree();
      if (hashTree && a2.redeem && a2.redeem.output && a2.internalPubkey) {
        const leafHash = (0, bip341_12.tapleafHash)({
          output: a2.redeem.output,
          version: o3.redeemVersion
        });
        const path = (0, bip341_12.findScriptPath)(hashTree, leafHash);
        if (!path) return;
        const outputKey = (0, bip341_12.tweakKey)(a2.internalPubkey, hashTree.hash);
        if (!outputKey) return;
        const controlBock = buffer_1.Buffer.concat(
          [
            buffer_1.Buffer.from([o3.redeemVersion | outputKey.parity]),
            a2.internalPubkey
          ].concat(path)
        );
        return [a2.redeem.output, controlBock];
      }
      if (a2.signature) return [a2.signature];
    });
    if (opts.validate) {
      let pubkey = buffer_1.Buffer.from([]);
      if (a2.address) {
        if (network && network.bech32 !== _address().prefix)
          throw new TypeError("Invalid prefix or Network mismatch");
        if (_address().version !== TAPROOT_WITNESS_VERSION)
          throw new TypeError("Invalid address version");
        if (_address().data.length !== 32)
          throw new TypeError("Invalid address data");
        pubkey = _address().data;
      }
      if (a2.pubkey) {
        if (pubkey.length > 0 && !pubkey.equals(a2.pubkey))
          throw new TypeError("Pubkey mismatch");
        else pubkey = a2.pubkey;
      }
      if (a2.output) {
        if (a2.output.length !== 34 || a2.output[0] !== OPS2.OP_1 || a2.output[1] !== 32)
          throw new TypeError("Output is invalid");
        if (pubkey.length > 0 && !pubkey.equals(a2.output.slice(2)))
          throw new TypeError("Pubkey mismatch");
        else pubkey = a2.output.slice(2);
      }
      if (a2.internalPubkey) {
        const tweakedKey = (0, bip341_12.tweakKey)(a2.internalPubkey, o3.hash);
        if (pubkey.length > 0 && !pubkey.equals(tweakedKey.x))
          throw new TypeError("Pubkey mismatch");
        else pubkey = tweakedKey.x;
      }
      if (pubkey && pubkey.length) {
        if (!(0, ecc_lib_1.getEccLib)().isXOnlyPoint(pubkey))
          throw new TypeError("Invalid pubkey for p2tr");
      }
      const hashTree = _hashTree();
      if (a2.hash && hashTree) {
        if (!a2.hash.equals(hashTree.hash)) throw new TypeError("Hash mismatch");
      }
      if (a2.redeem && a2.redeem.output && hashTree) {
        const leafHash = (0, bip341_12.tapleafHash)({
          output: a2.redeem.output,
          version: o3.redeemVersion
        });
        if (!(0, bip341_12.findScriptPath)(hashTree, leafHash))
          throw new TypeError("Redeem script not in tree");
      }
      const witness = _witness();
      if (a2.redeem && o3.redeem) {
        if (a2.redeem.redeemVersion) {
          if (a2.redeem.redeemVersion !== o3.redeem.redeemVersion)
            throw new TypeError("Redeem.redeemVersion and witness mismatch");
        }
        if (a2.redeem.output) {
          if (bscript2.decompile(a2.redeem.output).length === 0)
            throw new TypeError("Redeem.output is invalid");
          if (o3.redeem.output && !a2.redeem.output.equals(o3.redeem.output))
            throw new TypeError("Redeem.output and witness mismatch");
        }
        if (a2.redeem.witness) {
          if (o3.redeem.witness && !(0, types_12.stacksEqual)(a2.redeem.witness, o3.redeem.witness))
            throw new TypeError("Redeem.witness and witness mismatch");
        }
      }
      if (witness && witness.length) {
        if (witness.length === 1) {
          if (a2.signature && !a2.signature.equals(witness[0]))
            throw new TypeError("Signature mismatch");
        } else {
          const controlBlock = witness[witness.length - 1];
          if (controlBlock.length < 33)
            throw new TypeError(
              `The control-block length is too small. Got ${controlBlock.length}, expected min 33.`
            );
          if ((controlBlock.length - 33) % 32 !== 0)
            throw new TypeError(
              `The control-block length of ${controlBlock.length} is incorrect!`
            );
          const m2 = (controlBlock.length - 33) / 32;
          if (m2 > 128)
            throw new TypeError(
              `The script path is too long. Got ${m2}, expected max 128.`
            );
          const internalPubkey = controlBlock.slice(1, 33);
          if (a2.internalPubkey && !a2.internalPubkey.equals(internalPubkey))
            throw new TypeError("Internal pubkey mismatch");
          if (!(0, ecc_lib_1.getEccLib)().isXOnlyPoint(internalPubkey))
            throw new TypeError("Invalid internalPubkey for p2tr witness");
          const leafVersion = controlBlock[0] & types_12.TAPLEAF_VERSION_MASK;
          const script2 = witness[witness.length - 2];
          const leafHash = (0, bip341_12.tapleafHash)({
            output: script2,
            version: leafVersion
          });
          const hash2 = (0, bip341_12.rootHashFromPath)(controlBlock, leafHash);
          const outputKey = (0, bip341_12.tweakKey)(internalPubkey, hash2);
          if (!outputKey)
            throw new TypeError("Invalid outputKey for p2tr witness");
          if (pubkey.length && !pubkey.equals(outputKey.x))
            throw new TypeError("Pubkey mismatch for p2tr witness");
          if (outputKey.parity !== (controlBlock[0] & 1))
            throw new Error("Incorrect parity");
        }
      }
    }
    return Object.assign(o3, a2);
  }
  p2tr.p2tr = p2tr$1;
  return p2tr;
}
var hasRequiredPayments;
function requirePayments() {
  if (hasRequiredPayments) return payments$2;
  hasRequiredPayments = 1;
  (function(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.p2tr = exports2.p2wsh = exports2.p2wpkh = exports2.p2sh = exports2.p2pkh = exports2.p2pk = exports2.p2ms = exports2.embed = void 0;
    const embed_1 = embed;
    Object.defineProperty(exports2, "embed", {
      enumerable: true,
      get: function() {
        return embed_1.p2data;
      }
    });
    const p2ms_1 = p2ms$1;
    Object.defineProperty(exports2, "p2ms", {
      enumerable: true,
      get: function() {
        return p2ms_1.p2ms;
      }
    });
    const p2pk_1 = p2pk$1;
    Object.defineProperty(exports2, "p2pk", {
      enumerable: true,
      get: function() {
        return p2pk_1.p2pk;
      }
    });
    const p2pkh_1 = p2pkh$1;
    Object.defineProperty(exports2, "p2pkh", {
      enumerable: true,
      get: function() {
        return p2pkh_1.p2pkh;
      }
    });
    const p2sh_1 = p2sh$1;
    Object.defineProperty(exports2, "p2sh", {
      enumerable: true,
      get: function() {
        return p2sh_1.p2sh;
      }
    });
    const p2wpkh_1 = p2wpkh$1;
    Object.defineProperty(exports2, "p2wpkh", {
      enumerable: true,
      get: function() {
        return p2wpkh_1.p2wpkh;
      }
    });
    const p2wsh_1 = p2wsh$1;
    Object.defineProperty(exports2, "p2wsh", {
      enumerable: true,
      get: function() {
        return p2wsh_1.p2wsh;
      }
    });
    const p2tr_1 = requireP2tr();
    Object.defineProperty(exports2, "p2tr", {
      enumerable: true,
      get: function() {
        return p2tr_1.p2tr;
      }
    });
  })(payments$2);
  return payments$2;
}
var hasRequiredAddress;
function requireAddress() {
  if (hasRequiredAddress) return address;
  hasRequiredAddress = 1;
  Object.defineProperty(address, "__esModule", { value: true });
  address.toOutputScript = address.fromOutputScript = address.toBech32 = address.toBase58Check = address.fromBech32 = address.fromBase58Check = void 0;
  const networks2 = networks$2;
  const payments2 = requirePayments();
  const bscript2 = requireScript();
  const types_12 = types$7;
  const bech32_12 = dist$1;
  const bs58check2 = bs58check$5;
  const FUTURE_SEGWIT_MAX_SIZE = 40;
  const FUTURE_SEGWIT_MIN_SIZE = 2;
  const FUTURE_SEGWIT_MAX_VERSION = 16;
  const FUTURE_SEGWIT_MIN_VERSION = 2;
  const FUTURE_SEGWIT_VERSION_DIFF = 80;
  const FUTURE_SEGWIT_VERSION_WARNING = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
  function _toFutureSegwitAddress(output2, network) {
    const data = output2.slice(2);
    if (data.length < FUTURE_SEGWIT_MIN_SIZE || data.length > FUTURE_SEGWIT_MAX_SIZE)
      throw new TypeError("Invalid program length for segwit address");
    const version2 = output2[0] - FUTURE_SEGWIT_VERSION_DIFF;
    if (version2 < FUTURE_SEGWIT_MIN_VERSION || version2 > FUTURE_SEGWIT_MAX_VERSION)
      throw new TypeError("Invalid version for segwit address");
    if (output2[1] !== data.length)
      throw new TypeError("Invalid script for segwit address");
    console.warn(FUTURE_SEGWIT_VERSION_WARNING);
    return toBech32(data, version2, network.bech32);
  }
  function fromBase58Check(address2) {
    const payload = Buffer$3.from(bs58check2.decode(address2));
    if (payload.length < 21) throw new TypeError(address2 + " is too short");
    if (payload.length > 21) throw new TypeError(address2 + " is too long");
    const version2 = payload.readUInt8(0);
    const hash2 = payload.slice(1);
    return { version: version2, hash: hash2 };
  }
  address.fromBase58Check = fromBase58Check;
  function fromBech32(address2) {
    let result;
    let version2;
    try {
      result = bech32_12.bech32.decode(address2);
    } catch (e2) {
    }
    if (result) {
      version2 = result.words[0];
      if (version2 !== 0) throw new TypeError(address2 + " uses wrong encoding");
    } else {
      result = bech32_12.bech32m.decode(address2);
      version2 = result.words[0];
      if (version2 === 0) throw new TypeError(address2 + " uses wrong encoding");
    }
    const data = bech32_12.bech32.fromWords(result.words.slice(1));
    return {
      version: version2,
      prefix: result.prefix,
      data: Buffer$3.from(data)
    };
  }
  address.fromBech32 = fromBech32;
  function toBase58Check(hash2, version2) {
    (0, types_12.typeforce)(
      (0, types_12.tuple)(types_12.Hash160bit, types_12.UInt8),
      arguments
    );
    const payload = Buffer$3.allocUnsafe(21);
    payload.writeUInt8(version2, 0);
    hash2.copy(payload, 1);
    return bs58check2.encode(payload);
  }
  address.toBase58Check = toBase58Check;
  function toBech32(data, version2, prefix) {
    const words = bech32_12.bech32.toWords(data);
    words.unshift(version2);
    return version2 === 0 ? bech32_12.bech32.encode(prefix, words) : bech32_12.bech32m.encode(prefix, words);
  }
  address.toBech32 = toBech32;
  function fromOutputScript(output2, network) {
    network = network || networks2.bitcoin;
    try {
      return payments2.p2pkh({ output: output2, network }).address;
    } catch (e2) {
    }
    try {
      return payments2.p2sh({ output: output2, network }).address;
    } catch (e2) {
    }
    try {
      return payments2.p2wpkh({ output: output2, network }).address;
    } catch (e2) {
    }
    try {
      return payments2.p2wsh({ output: output2, network }).address;
    } catch (e2) {
    }
    try {
      return payments2.p2tr({ output: output2, network }).address;
    } catch (e2) {
    }
    try {
      return _toFutureSegwitAddress(output2, network);
    } catch (e2) {
    }
    throw new Error(bscript2.toASM(output2) + " has no matching Address");
  }
  address.fromOutputScript = fromOutputScript;
  function toOutputScript(address2, network) {
    network = network || networks2.bitcoin;
    let decodeBase58;
    let decodeBech32;
    try {
      decodeBase58 = fromBase58Check(address2);
    } catch (e2) {
    }
    if (decodeBase58) {
      if (decodeBase58.version === network.pubKeyHash)
        return payments2.p2pkh({ hash: decodeBase58.hash }).output;
      if (decodeBase58.version === network.scriptHash)
        return payments2.p2sh({ hash: decodeBase58.hash }).output;
    } else {
      try {
        decodeBech32 = fromBech32(address2);
      } catch (e2) {
      }
      if (decodeBech32) {
        if (decodeBech32.prefix !== network.bech32)
          throw new Error(address2 + " has an invalid prefix");
        if (decodeBech32.version === 0) {
          if (decodeBech32.data.length === 20)
            return payments2.p2wpkh({ hash: decodeBech32.data }).output;
          if (decodeBech32.data.length === 32)
            return payments2.p2wsh({ hash: decodeBech32.data }).output;
        } else if (decodeBech32.version === 1) {
          if (decodeBech32.data.length === 32)
            return payments2.p2tr({ pubkey: decodeBech32.data }).output;
        } else if (decodeBech32.version >= FUTURE_SEGWIT_MIN_VERSION && decodeBech32.version <= FUTURE_SEGWIT_MAX_VERSION && decodeBech32.data.length >= FUTURE_SEGWIT_MIN_SIZE && decodeBech32.data.length <= FUTURE_SEGWIT_MAX_SIZE) {
          console.warn(FUTURE_SEGWIT_VERSION_WARNING);
          return bscript2.compile([
            decodeBech32.version + FUTURE_SEGWIT_VERSION_DIFF,
            decodeBech32.data
          ]);
        }
      }
    }
    throw new Error(address2 + " has no matching Script");
  }
  address.toOutputScript = toOutputScript;
  return address;
}
var block = {};
var merkle = {};
Object.defineProperty(merkle, "__esModule", { value: true });
merkle.fastMerkleRoot = void 0;
function fastMerkleRoot(values, digestFn) {
  if (!Array.isArray(values)) throw TypeError("Expected values Array");
  if (typeof digestFn !== "function")
    throw TypeError("Expected digest Function");
  let length = values.length;
  const results = values.concat();
  while (length > 1) {
    let j2 = 0;
    for (let i2 = 0; i2 < length; i2 += 2, ++j2) {
      const left = results[i2];
      const right = i2 + 1 === length ? left : results[i2 + 1];
      const data = Buffer$3.concat([left, right]);
      results[j2] = digestFn(data);
    }
    length = j2;
  }
  return results[0];
}
merkle.fastMerkleRoot = fastMerkleRoot;
var transaction = {};
Object.defineProperty(transaction, "__esModule", { value: true });
transaction.Transaction = void 0;
const bufferutils_1$2 = bufferutils;
const bcrypto$1 = crypto$5;
const bscript$2 = requireScript();
const script_1 = requireScript();
const types$4 = types$7;
const { typeforce: typeforce$2 } = types$4;
function varSliceSize(someScript) {
  const length = someScript.length;
  return bufferutils_1$2.varuint.encodingLength(length) + length;
}
function vectorSize(someVector) {
  const length = someVector.length;
  return bufferutils_1$2.varuint.encodingLength(length) + someVector.reduce((sum, witness) => {
    return sum + varSliceSize(witness);
  }, 0);
}
const EMPTY_BUFFER = Buffer$3.allocUnsafe(0);
const EMPTY_WITNESS = [];
const ZERO = Buffer$3.from(
  "0000000000000000000000000000000000000000000000000000000000000000",
  "hex"
);
const ONE = Buffer$3.from(
  "0000000000000000000000000000000000000000000000000000000000000001",
  "hex"
);
const VALUE_UINT64_MAX = Buffer$3.from("ffffffffffffffff", "hex");
const BLANK_OUTPUT = {
  script: EMPTY_BUFFER,
  valueBuffer: VALUE_UINT64_MAX
};
function isOutput(out) {
  return out.value !== void 0;
}
class Transaction {
  constructor() {
    this.version = 1;
    this.locktime = 0;
    this.ins = [];
    this.outs = [];
  }
  static fromBuffer(buffer2, _NO_STRICT) {
    const bufferReader = new bufferutils_1$2.BufferReader(buffer2);
    const tx = new Transaction();
    tx.version = bufferReader.readInt32();
    const marker = bufferReader.readUInt8();
    const flag = bufferReader.readUInt8();
    let hasWitnesses = false;
    if (marker === Transaction.ADVANCED_TRANSACTION_MARKER && flag === Transaction.ADVANCED_TRANSACTION_FLAG) {
      hasWitnesses = true;
    } else {
      bufferReader.offset -= 2;
    }
    const vinLen = bufferReader.readVarInt();
    for (let i2 = 0; i2 < vinLen; ++i2) {
      tx.ins.push({
        hash: bufferReader.readSlice(32),
        index: bufferReader.readUInt32(),
        script: bufferReader.readVarSlice(),
        sequence: bufferReader.readUInt32(),
        witness: EMPTY_WITNESS
      });
    }
    const voutLen = bufferReader.readVarInt();
    for (let i2 = 0; i2 < voutLen; ++i2) {
      tx.outs.push({
        value: bufferReader.readUInt64(),
        script: bufferReader.readVarSlice()
      });
    }
    if (hasWitnesses) {
      for (let i2 = 0; i2 < vinLen; ++i2) {
        tx.ins[i2].witness = bufferReader.readVector();
      }
      if (!tx.hasWitnesses())
        throw new Error("Transaction has superfluous witness data");
    }
    tx.locktime = bufferReader.readUInt32();
    if (_NO_STRICT) return tx;
    if (bufferReader.offset !== buffer2.length)
      throw new Error("Transaction has unexpected data");
    return tx;
  }
  static fromHex(hex) {
    return Transaction.fromBuffer(Buffer$3.from(hex, "hex"), false);
  }
  static isCoinbaseHash(buffer2) {
    typeforce$2(types$4.Hash256bit, buffer2);
    for (let i2 = 0; i2 < 32; ++i2) {
      if (buffer2[i2] !== 0) return false;
    }
    return true;
  }
  isCoinbase() {
    return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash);
  }
  addInput(hash2, index, sequence, scriptSig) {
    typeforce$2(
      types$4.tuple(
        types$4.Hash256bit,
        types$4.UInt32,
        types$4.maybe(types$4.UInt32),
        types$4.maybe(types$4.Buffer)
      ),
      arguments
    );
    if (types$4.Null(sequence)) {
      sequence = Transaction.DEFAULT_SEQUENCE;
    }
    return this.ins.push({
      hash: hash2,
      index,
      script: scriptSig || EMPTY_BUFFER,
      sequence,
      witness: EMPTY_WITNESS
    }) - 1;
  }
  addOutput(scriptPubKey, value3) {
    typeforce$2(types$4.tuple(types$4.Buffer, types$4.Satoshi), arguments);
    return this.outs.push({
      script: scriptPubKey,
      value: value3
    }) - 1;
  }
  hasWitnesses() {
    return this.ins.some((x2) => {
      return x2.witness.length !== 0;
    });
  }
  weight() {
    const base2 = this.byteLength(false);
    const total = this.byteLength(true);
    return base2 * 3 + total;
  }
  virtualSize() {
    return Math.ceil(this.weight() / 4);
  }
  byteLength(_ALLOW_WITNESS = true) {
    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
    return (hasWitnesses ? 10 : 8) + bufferutils_1$2.varuint.encodingLength(this.ins.length) + bufferutils_1$2.varuint.encodingLength(this.outs.length) + this.ins.reduce((sum, input) => {
      return sum + 40 + varSliceSize(input.script);
    }, 0) + this.outs.reduce((sum, output2) => {
      return sum + 8 + varSliceSize(output2.script);
    }, 0) + (hasWitnesses ? this.ins.reduce((sum, input) => {
      return sum + vectorSize(input.witness);
    }, 0) : 0);
  }
  clone() {
    const newTx = new Transaction();
    newTx.version = this.version;
    newTx.locktime = this.locktime;
    newTx.ins = this.ins.map((txIn) => {
      return {
        hash: txIn.hash,
        index: txIn.index,
        script: txIn.script,
        sequence: txIn.sequence,
        witness: txIn.witness
      };
    });
    newTx.outs = this.outs.map((txOut) => {
      return {
        script: txOut.script,
        value: txOut.value
      };
    });
    return newTx;
  }
  /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */
  hashForSignature(inIndex, prevOutScript, hashType) {
    typeforce$2(
      types$4.tuple(
        types$4.UInt32,
        types$4.Buffer,
        /* types.UInt8 */
        types$4.Number
      ),
      arguments
    );
    if (inIndex >= this.ins.length) return ONE;
    const ourScript = bscript$2.compile(
      bscript$2.decompile(prevOutScript).filter((x2) => {
        return x2 !== script_1.OPS.OP_CODESEPARATOR;
      })
    );
    const txTmp = this.clone();
    if ((hashType & 31) === Transaction.SIGHASH_NONE) {
      txTmp.outs = [];
      txTmp.ins.forEach((input, i2) => {
        if (i2 === inIndex) return;
        input.sequence = 0;
      });
    } else if ((hashType & 31) === Transaction.SIGHASH_SINGLE) {
      if (inIndex >= this.outs.length) return ONE;
      txTmp.outs.length = inIndex + 1;
      for (let i2 = 0; i2 < inIndex; i2++) {
        txTmp.outs[i2] = BLANK_OUTPUT;
      }
      txTmp.ins.forEach((input, y2) => {
        if (y2 === inIndex) return;
        input.sequence = 0;
      });
    }
    if (hashType & Transaction.SIGHASH_ANYONECANPAY) {
      txTmp.ins = [txTmp.ins[inIndex]];
      txTmp.ins[0].script = ourScript;
    } else {
      txTmp.ins.forEach((input) => {
        input.script = EMPTY_BUFFER;
      });
      txTmp.ins[inIndex].script = ourScript;
    }
    const buffer2 = Buffer$3.allocUnsafe(txTmp.byteLength(false) + 4);
    buffer2.writeInt32LE(hashType, buffer2.length - 4);
    txTmp.__toBuffer(buffer2, 0, false);
    return bcrypto$1.hash256(buffer2);
  }
  hashForWitnessV1(inIndex, prevOutScripts, values, hashType, leafHash, annex) {
    typeforce$2(
      types$4.tuple(
        types$4.UInt32,
        typeforce$2.arrayOf(types$4.Buffer),
        typeforce$2.arrayOf(types$4.Satoshi),
        types$4.UInt32
      ),
      arguments
    );
    if (values.length !== this.ins.length || prevOutScripts.length !== this.ins.length) {
      throw new Error("Must supply prevout script and value for all inputs");
    }
    const outputType = hashType === Transaction.SIGHASH_DEFAULT ? Transaction.SIGHASH_ALL : hashType & Transaction.SIGHASH_OUTPUT_MASK;
    const inputType = hashType & Transaction.SIGHASH_INPUT_MASK;
    const isAnyoneCanPay = inputType === Transaction.SIGHASH_ANYONECANPAY;
    const isNone = outputType === Transaction.SIGHASH_NONE;
    const isSingle = outputType === Transaction.SIGHASH_SINGLE;
    let hashPrevouts = EMPTY_BUFFER;
    let hashAmounts = EMPTY_BUFFER;
    let hashScriptPubKeys = EMPTY_BUFFER;
    let hashSequences = EMPTY_BUFFER;
    let hashOutputs = EMPTY_BUFFER;
    if (!isAnyoneCanPay) {
      let bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(
        36 * this.ins.length
      );
      this.ins.forEach((txIn) => {
        bufferWriter.writeSlice(txIn.hash);
        bufferWriter.writeUInt32(txIn.index);
      });
      hashPrevouts = bcrypto$1.sha256(bufferWriter.end());
      bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(
        8 * this.ins.length
      );
      values.forEach((value3) => bufferWriter.writeUInt64(value3));
      hashAmounts = bcrypto$1.sha256(bufferWriter.end());
      bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(
        prevOutScripts.map(varSliceSize).reduce((a2, b2) => a2 + b2)
      );
      prevOutScripts.forEach(
        (prevOutScript) => bufferWriter.writeVarSlice(prevOutScript)
      );
      hashScriptPubKeys = bcrypto$1.sha256(bufferWriter.end());
      bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(
        4 * this.ins.length
      );
      this.ins.forEach((txIn) => bufferWriter.writeUInt32(txIn.sequence));
      hashSequences = bcrypto$1.sha256(bufferWriter.end());
    }
    if (!(isNone || isSingle)) {
      const txOutsSize = this.outs.map((output2) => 8 + varSliceSize(output2.script)).reduce((a2, b2) => a2 + b2);
      const bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(txOutsSize);
      this.outs.forEach((out) => {
        bufferWriter.writeUInt64(out.value);
        bufferWriter.writeVarSlice(out.script);
      });
      hashOutputs = bcrypto$1.sha256(bufferWriter.end());
    } else if (isSingle && inIndex < this.outs.length) {
      const output2 = this.outs[inIndex];
      const bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(
        8 + varSliceSize(output2.script)
      );
      bufferWriter.writeUInt64(output2.value);
      bufferWriter.writeVarSlice(output2.script);
      hashOutputs = bcrypto$1.sha256(bufferWriter.end());
    }
    const spendType = (leafHash ? 2 : 0) + (annex ? 1 : 0);
    const sigMsgSize = 174 - (isAnyoneCanPay ? 49 : 0) - (isNone ? 32 : 0) + (annex ? 32 : 0) + (leafHash ? 37 : 0);
    const sigMsgWriter = bufferutils_1$2.BufferWriter.withCapacity(sigMsgSize);
    sigMsgWriter.writeUInt8(hashType);
    sigMsgWriter.writeInt32(this.version);
    sigMsgWriter.writeUInt32(this.locktime);
    sigMsgWriter.writeSlice(hashPrevouts);
    sigMsgWriter.writeSlice(hashAmounts);
    sigMsgWriter.writeSlice(hashScriptPubKeys);
    sigMsgWriter.writeSlice(hashSequences);
    if (!(isNone || isSingle)) {
      sigMsgWriter.writeSlice(hashOutputs);
    }
    sigMsgWriter.writeUInt8(spendType);
    if (isAnyoneCanPay) {
      const input = this.ins[inIndex];
      sigMsgWriter.writeSlice(input.hash);
      sigMsgWriter.writeUInt32(input.index);
      sigMsgWriter.writeUInt64(values[inIndex]);
      sigMsgWriter.writeVarSlice(prevOutScripts[inIndex]);
      sigMsgWriter.writeUInt32(input.sequence);
    } else {
      sigMsgWriter.writeUInt32(inIndex);
    }
    if (annex) {
      const bufferWriter = bufferutils_1$2.BufferWriter.withCapacity(
        varSliceSize(annex)
      );
      bufferWriter.writeVarSlice(annex);
      sigMsgWriter.writeSlice(bcrypto$1.sha256(bufferWriter.end()));
    }
    if (isSingle) {
      sigMsgWriter.writeSlice(hashOutputs);
    }
    if (leafHash) {
      sigMsgWriter.writeSlice(leafHash);
      sigMsgWriter.writeUInt8(0);
      sigMsgWriter.writeUInt32(4294967295);
    }
    return bcrypto$1.taggedHash(
      "TapSighash",
      Buffer$3.concat([Buffer$3.from([0]), sigMsgWriter.end()])
    );
  }
  hashForWitnessV0(inIndex, prevOutScript, value3, hashType) {
    typeforce$2(
      types$4.tuple(types$4.UInt32, types$4.Buffer, types$4.Satoshi, types$4.UInt32),
      arguments
    );
    let tbuffer = Buffer$3.from([]);
    let bufferWriter;
    let hashOutputs = ZERO;
    let hashPrevouts = ZERO;
    let hashSequence = ZERO;
    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {
      tbuffer = Buffer$3.allocUnsafe(36 * this.ins.length);
      bufferWriter = new bufferutils_1$2.BufferWriter(tbuffer, 0);
      this.ins.forEach((txIn) => {
        bufferWriter.writeSlice(txIn.hash);
        bufferWriter.writeUInt32(txIn.index);
      });
      hashPrevouts = bcrypto$1.hash256(tbuffer);
    }
    if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) && (hashType & 31) !== Transaction.SIGHASH_SINGLE && (hashType & 31) !== Transaction.SIGHASH_NONE) {
      tbuffer = Buffer$3.allocUnsafe(4 * this.ins.length);
      bufferWriter = new bufferutils_1$2.BufferWriter(tbuffer, 0);
      this.ins.forEach((txIn) => {
        bufferWriter.writeUInt32(txIn.sequence);
      });
      hashSequence = bcrypto$1.hash256(tbuffer);
    }
    if ((hashType & 31) !== Transaction.SIGHASH_SINGLE && (hashType & 31) !== Transaction.SIGHASH_NONE) {
      const txOutsSize = this.outs.reduce((sum, output2) => {
        return sum + 8 + varSliceSize(output2.script);
      }, 0);
      tbuffer = Buffer$3.allocUnsafe(txOutsSize);
      bufferWriter = new bufferutils_1$2.BufferWriter(tbuffer, 0);
      this.outs.forEach((out) => {
        bufferWriter.writeUInt64(out.value);
        bufferWriter.writeVarSlice(out.script);
      });
      hashOutputs = bcrypto$1.hash256(tbuffer);
    } else if ((hashType & 31) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {
      const output2 = this.outs[inIndex];
      tbuffer = Buffer$3.allocUnsafe(8 + varSliceSize(output2.script));
      bufferWriter = new bufferutils_1$2.BufferWriter(tbuffer, 0);
      bufferWriter.writeUInt64(output2.value);
      bufferWriter.writeVarSlice(output2.script);
      hashOutputs = bcrypto$1.hash256(tbuffer);
    }
    tbuffer = Buffer$3.allocUnsafe(156 + varSliceSize(prevOutScript));
    bufferWriter = new bufferutils_1$2.BufferWriter(tbuffer, 0);
    const input = this.ins[inIndex];
    bufferWriter.writeInt32(this.version);
    bufferWriter.writeSlice(hashPrevouts);
    bufferWriter.writeSlice(hashSequence);
    bufferWriter.writeSlice(input.hash);
    bufferWriter.writeUInt32(input.index);
    bufferWriter.writeVarSlice(prevOutScript);
    bufferWriter.writeUInt64(value3);
    bufferWriter.writeUInt32(input.sequence);
    bufferWriter.writeSlice(hashOutputs);
    bufferWriter.writeUInt32(this.locktime);
    bufferWriter.writeUInt32(hashType);
    return bcrypto$1.hash256(tbuffer);
  }
  getHash(forWitness) {
    if (forWitness && this.isCoinbase()) return Buffer$3.alloc(32, 0);
    return bcrypto$1.hash256(this.__toBuffer(void 0, void 0, forWitness));
  }
  getId() {
    return (0, bufferutils_1$2.reverseBuffer)(this.getHash(false)).toString(
      "hex"
    );
  }
  toBuffer(buffer2, initialOffset) {
    return this.__toBuffer(buffer2, initialOffset, true);
  }
  toHex() {
    return this.toBuffer(void 0, void 0).toString("hex");
  }
  setInputScript(index, scriptSig) {
    typeforce$2(types$4.tuple(types$4.Number, types$4.Buffer), arguments);
    this.ins[index].script = scriptSig;
  }
  setWitness(index, witness) {
    typeforce$2(types$4.tuple(types$4.Number, [types$4.Buffer]), arguments);
    this.ins[index].witness = witness;
  }
  __toBuffer(buffer2, initialOffset, _ALLOW_WITNESS = false) {
    if (!buffer2) buffer2 = Buffer$3.allocUnsafe(this.byteLength(_ALLOW_WITNESS));
    const bufferWriter = new bufferutils_1$2.BufferWriter(
      buffer2,
      initialOffset || 0
    );
    bufferWriter.writeInt32(this.version);
    const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
    if (hasWitnesses) {
      bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER);
      bufferWriter.writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG);
    }
    bufferWriter.writeVarInt(this.ins.length);
    this.ins.forEach((txIn) => {
      bufferWriter.writeSlice(txIn.hash);
      bufferWriter.writeUInt32(txIn.index);
      bufferWriter.writeVarSlice(txIn.script);
      bufferWriter.writeUInt32(txIn.sequence);
    });
    bufferWriter.writeVarInt(this.outs.length);
    this.outs.forEach((txOut) => {
      if (isOutput(txOut)) {
        bufferWriter.writeUInt64(txOut.value);
      } else {
        bufferWriter.writeSlice(txOut.valueBuffer);
      }
      bufferWriter.writeVarSlice(txOut.script);
    });
    if (hasWitnesses) {
      this.ins.forEach((input) => {
        bufferWriter.writeVector(input.witness);
      });
    }
    bufferWriter.writeUInt32(this.locktime);
    if (initialOffset !== void 0)
      return buffer2.slice(initialOffset, bufferWriter.offset);
    return buffer2;
  }
}
transaction.Transaction = Transaction;
Transaction.DEFAULT_SEQUENCE = 4294967295;
Transaction.SIGHASH_DEFAULT = 0;
Transaction.SIGHASH_ALL = 1;
Transaction.SIGHASH_NONE = 2;
Transaction.SIGHASH_SINGLE = 3;
Transaction.SIGHASH_ANYONECANPAY = 128;
Transaction.SIGHASH_OUTPUT_MASK = 3;
Transaction.SIGHASH_INPUT_MASK = 128;
Transaction.ADVANCED_TRANSACTION_MARKER = 0;
Transaction.ADVANCED_TRANSACTION_FLAG = 1;
Object.defineProperty(block, "__esModule", { value: true });
block.Block = void 0;
const bufferutils_1$1 = bufferutils;
const bcrypto = crypto$5;
const merkle_1 = merkle;
const transaction_1$3 = transaction;
const types$3 = types$7;
const { typeforce: typeforce$1 } = types$3;
const errorMerkleNoTxes = new TypeError(
  "Cannot compute merkle root for zero transactions"
);
const errorWitnessNotSegwit = new TypeError(
  "Cannot compute witness commit for non-segwit block"
);
class Block {
  constructor() {
    this.version = 1;
    this.prevHash = void 0;
    this.merkleRoot = void 0;
    this.timestamp = 0;
    this.witnessCommit = void 0;
    this.bits = 0;
    this.nonce = 0;
    this.transactions = void 0;
  }
  static fromBuffer(buffer2) {
    if (buffer2.length < 80) throw new Error("Buffer too small (< 80 bytes)");
    const bufferReader = new bufferutils_1$1.BufferReader(buffer2);
    const block2 = new Block();
    block2.version = bufferReader.readInt32();
    block2.prevHash = bufferReader.readSlice(32);
    block2.merkleRoot = bufferReader.readSlice(32);
    block2.timestamp = bufferReader.readUInt32();
    block2.bits = bufferReader.readUInt32();
    block2.nonce = bufferReader.readUInt32();
    if (buffer2.length === 80) return block2;
    const readTransaction = () => {
      const tx = transaction_1$3.Transaction.fromBuffer(
        bufferReader.buffer.slice(bufferReader.offset),
        true
      );
      bufferReader.offset += tx.byteLength();
      return tx;
    };
    const nTransactions = bufferReader.readVarInt();
    block2.transactions = [];
    for (let i2 = 0; i2 < nTransactions; ++i2) {
      const tx = readTransaction();
      block2.transactions.push(tx);
    }
    const witnessCommit = block2.getWitnessCommit();
    if (witnessCommit) block2.witnessCommit = witnessCommit;
    return block2;
  }
  static fromHex(hex) {
    return Block.fromBuffer(Buffer$3.from(hex, "hex"));
  }
  static calculateTarget(bits) {
    const exponent = ((bits & 4278190080) >> 24) - 3;
    const mantissa = bits & 8388607;
    const target = Buffer$3.alloc(32, 0);
    target.writeUIntBE(mantissa, 29 - exponent, 3);
    return target;
  }
  static calculateMerkleRoot(transactions, forWitness) {
    typeforce$1([{ getHash: types$3.Function }], transactions);
    if (transactions.length === 0) throw errorMerkleNoTxes;
    if (forWitness && !txesHaveWitnessCommit(transactions))
      throw errorWitnessNotSegwit;
    const hashes = transactions.map(
      (transaction2) => transaction2.getHash(forWitness)
    );
    const rootHash = (0, merkle_1.fastMerkleRoot)(hashes, bcrypto.hash256);
    return forWitness ? bcrypto.hash256(
      Buffer$3.concat([rootHash, transactions[0].ins[0].witness[0]])
    ) : rootHash;
  }
  getWitnessCommit() {
    if (!txesHaveWitnessCommit(this.transactions)) return null;
    const witnessCommits = this.transactions[0].outs.filter(
      (out) => out.script.slice(0, 6).equals(Buffer$3.from("6a24aa21a9ed", "hex"))
    ).map((out) => out.script.slice(6, 38));
    if (witnessCommits.length === 0) return null;
    const result = witnessCommits[witnessCommits.length - 1];
    if (!(result instanceof Buffer$3 && result.length === 32)) return null;
    return result;
  }
  hasWitnessCommit() {
    if (this.witnessCommit instanceof Buffer$3 && this.witnessCommit.length === 32)
      return true;
    if (this.getWitnessCommit() !== null) return true;
    return false;
  }
  hasWitness() {
    return anyTxHasWitness(this.transactions);
  }
  weight() {
    const base2 = this.byteLength(false, false);
    const total = this.byteLength(false, true);
    return base2 * 3 + total;
  }
  byteLength(headersOnly, allowWitness = true) {
    if (headersOnly || !this.transactions) return 80;
    return 80 + bufferutils_1$1.varuint.encodingLength(this.transactions.length) + this.transactions.reduce((a2, x2) => a2 + x2.byteLength(allowWitness), 0);
  }
  getHash() {
    return bcrypto.hash256(this.toBuffer(true));
  }
  getId() {
    return (0, bufferutils_1$1.reverseBuffer)(this.getHash()).toString("hex");
  }
  getUTCDate() {
    const date = /* @__PURE__ */ new Date(0);
    date.setUTCSeconds(this.timestamp);
    return date;
  }
  // TODO: buffer, offset compatibility
  toBuffer(headersOnly) {
    const buffer2 = Buffer$3.allocUnsafe(this.byteLength(headersOnly));
    const bufferWriter = new bufferutils_1$1.BufferWriter(buffer2);
    bufferWriter.writeInt32(this.version);
    bufferWriter.writeSlice(this.prevHash);
    bufferWriter.writeSlice(this.merkleRoot);
    bufferWriter.writeUInt32(this.timestamp);
    bufferWriter.writeUInt32(this.bits);
    bufferWriter.writeUInt32(this.nonce);
    if (headersOnly || !this.transactions) return buffer2;
    bufferutils_1$1.varuint.encode(
      this.transactions.length,
      buffer2,
      bufferWriter.offset
    );
    bufferWriter.offset += bufferutils_1$1.varuint.encode.bytes;
    this.transactions.forEach((tx) => {
      const txSize = tx.byteLength();
      tx.toBuffer(buffer2, bufferWriter.offset);
      bufferWriter.offset += txSize;
    });
    return buffer2;
  }
  toHex(headersOnly) {
    return this.toBuffer(headersOnly).toString("hex");
  }
  checkTxRoots() {
    const hasWitnessCommit = this.hasWitnessCommit();
    if (!hasWitnessCommit && this.hasWitness()) return false;
    return this.__checkMerkleRoot() && (hasWitnessCommit ? this.__checkWitnessCommit() : true);
  }
  checkProofOfWork() {
    const hash2 = (0, bufferutils_1$1.reverseBuffer)(this.getHash());
    const target = Block.calculateTarget(this.bits);
    return hash2.compare(target) <= 0;
  }
  __checkMerkleRoot() {
    if (!this.transactions) throw errorMerkleNoTxes;
    const actualMerkleRoot = Block.calculateMerkleRoot(this.transactions);
    return this.merkleRoot.compare(actualMerkleRoot) === 0;
  }
  __checkWitnessCommit() {
    if (!this.transactions) throw errorMerkleNoTxes;
    if (!this.hasWitnessCommit()) throw errorWitnessNotSegwit;
    const actualWitnessCommit = Block.calculateMerkleRoot(
      this.transactions,
      true
    );
    return this.witnessCommit.compare(actualWitnessCommit) === 0;
  }
}
block.Block = Block;
function txesHaveWitnessCommit(transactions) {
  return transactions instanceof Array && transactions[0] && transactions[0].ins && transactions[0].ins instanceof Array && transactions[0].ins[0] && transactions[0].ins[0].witness && transactions[0].ins[0].witness instanceof Array && transactions[0].ins[0].witness.length > 0;
}
function anyTxHasWitness(transactions) {
  return transactions instanceof Array && transactions.some(
    (tx) => typeof tx === "object" && tx.ins instanceof Array && tx.ins.some(
      (input) => typeof input === "object" && input.witness instanceof Array && input.witness.length > 0
    )
  );
}
var psbt$1 = {};
var psbt = {};
var combiner = {};
var parser = {};
var fromBuffer = {};
var converter = {};
var typeFields = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  (function(GlobalTypes) {
    GlobalTypes[GlobalTypes["UNSIGNED_TX"] = 0] = "UNSIGNED_TX";
    GlobalTypes[GlobalTypes["GLOBAL_XPUB"] = 1] = "GLOBAL_XPUB";
  })(exports2.GlobalTypes || (exports2.GlobalTypes = {}));
  exports2.GLOBAL_TYPE_NAMES = ["unsignedTx", "globalXpub"];
  (function(InputTypes) {
    InputTypes[InputTypes["NON_WITNESS_UTXO"] = 0] = "NON_WITNESS_UTXO";
    InputTypes[InputTypes["WITNESS_UTXO"] = 1] = "WITNESS_UTXO";
    InputTypes[InputTypes["PARTIAL_SIG"] = 2] = "PARTIAL_SIG";
    InputTypes[InputTypes["SIGHASH_TYPE"] = 3] = "SIGHASH_TYPE";
    InputTypes[InputTypes["REDEEM_SCRIPT"] = 4] = "REDEEM_SCRIPT";
    InputTypes[InputTypes["WITNESS_SCRIPT"] = 5] = "WITNESS_SCRIPT";
    InputTypes[InputTypes["BIP32_DERIVATION"] = 6] = "BIP32_DERIVATION";
    InputTypes[InputTypes["FINAL_SCRIPTSIG"] = 7] = "FINAL_SCRIPTSIG";
    InputTypes[InputTypes["FINAL_SCRIPTWITNESS"] = 8] = "FINAL_SCRIPTWITNESS";
    InputTypes[InputTypes["POR_COMMITMENT"] = 9] = "POR_COMMITMENT";
    InputTypes[InputTypes["TAP_KEY_SIG"] = 19] = "TAP_KEY_SIG";
    InputTypes[InputTypes["TAP_SCRIPT_SIG"] = 20] = "TAP_SCRIPT_SIG";
    InputTypes[InputTypes["TAP_LEAF_SCRIPT"] = 21] = "TAP_LEAF_SCRIPT";
    InputTypes[InputTypes["TAP_BIP32_DERIVATION"] = 22] = "TAP_BIP32_DERIVATION";
    InputTypes[InputTypes["TAP_INTERNAL_KEY"] = 23] = "TAP_INTERNAL_KEY";
    InputTypes[InputTypes["TAP_MERKLE_ROOT"] = 24] = "TAP_MERKLE_ROOT";
  })(exports2.InputTypes || (exports2.InputTypes = {}));
  exports2.INPUT_TYPE_NAMES = [
    "nonWitnessUtxo",
    "witnessUtxo",
    "partialSig",
    "sighashType",
    "redeemScript",
    "witnessScript",
    "bip32Derivation",
    "finalScriptSig",
    "finalScriptWitness",
    "porCommitment",
    "tapKeySig",
    "tapScriptSig",
    "tapLeafScript",
    "tapBip32Derivation",
    "tapInternalKey",
    "tapMerkleRoot"
  ];
  (function(OutputTypes) {
    OutputTypes[OutputTypes["REDEEM_SCRIPT"] = 0] = "REDEEM_SCRIPT";
    OutputTypes[OutputTypes["WITNESS_SCRIPT"] = 1] = "WITNESS_SCRIPT";
    OutputTypes[OutputTypes["BIP32_DERIVATION"] = 2] = "BIP32_DERIVATION";
    OutputTypes[OutputTypes["TAP_INTERNAL_KEY"] = 5] = "TAP_INTERNAL_KEY";
    OutputTypes[OutputTypes["TAP_TREE"] = 6] = "TAP_TREE";
    OutputTypes[OutputTypes["TAP_BIP32_DERIVATION"] = 7] = "TAP_BIP32_DERIVATION";
  })(exports2.OutputTypes || (exports2.OutputTypes = {}));
  exports2.OUTPUT_TYPE_NAMES = [
    "redeemScript",
    "witnessScript",
    "bip32Derivation",
    "tapInternalKey",
    "tapTree",
    "tapBip32Derivation"
  ];
})(typeFields);
var globalXpub$1 = {};
Object.defineProperty(globalXpub$1, "__esModule", { value: true });
const typeFields_1$g = typeFields;
const range$3 = (n2) => [...Array(n2).keys()];
function decode$g(keyVal) {
  if (keyVal.key[0] !== typeFields_1$g.GlobalTypes.GLOBAL_XPUB) {
    throw new Error(
      "Decode Error: could not decode globalXpub with key 0x" + keyVal.key.toString("hex")
    );
  }
  if (keyVal.key.length !== 79 || ![2, 3].includes(keyVal.key[46])) {
    throw new Error(
      "Decode Error: globalXpub has invalid extended pubkey in key 0x" + keyVal.key.toString("hex")
    );
  }
  if (keyVal.value.length / 4 % 1 !== 0) {
    throw new Error(
      "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
    );
  }
  const extendedPubkey = keyVal.key.slice(1);
  const data = {
    masterFingerprint: keyVal.value.slice(0, 4),
    extendedPubkey,
    path: "m"
  };
  for (const i2 of range$3(keyVal.value.length / 4 - 1)) {
    const val = keyVal.value.readUInt32LE(i2 * 4 + 4);
    const isHard = !!(val & 2147483648);
    const idx = val & 2147483647;
    data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
  }
  return data;
}
globalXpub$1.decode = decode$g;
function encode$g(data) {
  const head = Buffer$3.from([typeFields_1$g.GlobalTypes.GLOBAL_XPUB]);
  const key2 = Buffer$3.concat([head, data.extendedPubkey]);
  const splitPath = data.path.split("/");
  const value3 = Buffer$3.allocUnsafe(splitPath.length * 4);
  data.masterFingerprint.copy(value3, 0);
  let offset = 4;
  splitPath.slice(1).forEach((level) => {
    const isHard = level.slice(-1) === "'";
    let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
    if (isHard) num += 2147483648;
    value3.writeUInt32LE(num, offset);
    offset += 4;
  });
  return {
    key: key2,
    value: value3
  };
}
globalXpub$1.encode = encode$g;
globalXpub$1.expected = "{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }";
function check$c(data) {
  const epk = data.extendedPubkey;
  const mfp = data.masterFingerprint;
  const p2 = data.path;
  return Buffer$3.isBuffer(epk) && epk.length === 78 && [2, 3].indexOf(epk[45]) > -1 && Buffer$3.isBuffer(mfp) && mfp.length === 4 && typeof p2 === "string" && !!p2.match(/^m(\/\d+'?)*$/);
}
globalXpub$1.check = check$c;
function canAddToArray$3(array2, item, dupeSet) {
  const dupeString = item.extendedPubkey.toString("hex");
  if (dupeSet.has(dupeString)) return false;
  dupeSet.add(dupeString);
  return array2.filter((v2) => v2.extendedPubkey.equals(item.extendedPubkey)).length === 0;
}
globalXpub$1.canAddToArray = canAddToArray$3;
var unsignedTx$1 = {};
Object.defineProperty(unsignedTx$1, "__esModule", { value: true });
const typeFields_1$f = typeFields;
function encode$f(data) {
  return {
    key: Buffer$3.from([typeFields_1$f.GlobalTypes.UNSIGNED_TX]),
    value: data.toBuffer()
  };
}
unsignedTx$1.encode = encode$f;
var finalScriptSig$1 = {};
Object.defineProperty(finalScriptSig$1, "__esModule", { value: true });
const typeFields_1$e = typeFields;
function decode$f(keyVal) {
  if (keyVal.key[0] !== typeFields_1$e.InputTypes.FINAL_SCRIPTSIG) {
    throw new Error(
      "Decode Error: could not decode finalScriptSig with key 0x" + keyVal.key.toString("hex")
    );
  }
  return keyVal.value;
}
finalScriptSig$1.decode = decode$f;
function encode$e(data) {
  const key2 = Buffer$3.from([typeFields_1$e.InputTypes.FINAL_SCRIPTSIG]);
  return {
    key: key2,
    value: data
  };
}
finalScriptSig$1.encode = encode$e;
finalScriptSig$1.expected = "Buffer";
function check$b(data) {
  return Buffer$3.isBuffer(data);
}
finalScriptSig$1.check = check$b;
function canAdd$8(currentData, newData) {
  return !!currentData && !!newData && currentData.finalScriptSig === void 0;
}
finalScriptSig$1.canAdd = canAdd$8;
var finalScriptWitness$1 = {};
Object.defineProperty(finalScriptWitness$1, "__esModule", { value: true });
const typeFields_1$d = typeFields;
function decode$e(keyVal) {
  if (keyVal.key[0] !== typeFields_1$d.InputTypes.FINAL_SCRIPTWITNESS) {
    throw new Error(
      "Decode Error: could not decode finalScriptWitness with key 0x" + keyVal.key.toString("hex")
    );
  }
  return keyVal.value;
}
finalScriptWitness$1.decode = decode$e;
function encode$d(data) {
  const key2 = Buffer$3.from([typeFields_1$d.InputTypes.FINAL_SCRIPTWITNESS]);
  return {
    key: key2,
    value: data
  };
}
finalScriptWitness$1.encode = encode$d;
finalScriptWitness$1.expected = "Buffer";
function check$a(data) {
  return Buffer$3.isBuffer(data);
}
finalScriptWitness$1.check = check$a;
function canAdd$7(currentData, newData) {
  return !!currentData && !!newData && currentData.finalScriptWitness === void 0;
}
finalScriptWitness$1.canAdd = canAdd$7;
var nonWitnessUtxo$1 = {};
Object.defineProperty(nonWitnessUtxo$1, "__esModule", { value: true });
const typeFields_1$c = typeFields;
function decode$d(keyVal) {
  if (keyVal.key[0] !== typeFields_1$c.InputTypes.NON_WITNESS_UTXO) {
    throw new Error(
      "Decode Error: could not decode nonWitnessUtxo with key 0x" + keyVal.key.toString("hex")
    );
  }
  return keyVal.value;
}
nonWitnessUtxo$1.decode = decode$d;
function encode$c(data) {
  return {
    key: Buffer$3.from([typeFields_1$c.InputTypes.NON_WITNESS_UTXO]),
    value: data
  };
}
nonWitnessUtxo$1.encode = encode$c;
nonWitnessUtxo$1.expected = "Buffer";
function check$9(data) {
  return Buffer$3.isBuffer(data);
}
nonWitnessUtxo$1.check = check$9;
function canAdd$6(currentData, newData) {
  return !!currentData && !!newData && currentData.nonWitnessUtxo === void 0;
}
nonWitnessUtxo$1.canAdd = canAdd$6;
var partialSig$1 = {};
Object.defineProperty(partialSig$1, "__esModule", { value: true });
const typeFields_1$b = typeFields;
function decode$c(keyVal) {
  if (keyVal.key[0] !== typeFields_1$b.InputTypes.PARTIAL_SIG) {
    throw new Error(
      "Decode Error: could not decode partialSig with key 0x" + keyVal.key.toString("hex")
    );
  }
  if (!(keyVal.key.length === 34 || keyVal.key.length === 66) || ![2, 3, 4].includes(keyVal.key[1])) {
    throw new Error(
      "Decode Error: partialSig has invalid pubkey in key 0x" + keyVal.key.toString("hex")
    );
  }
  const pubkey = keyVal.key.slice(1);
  return {
    pubkey,
    signature: keyVal.value
  };
}
partialSig$1.decode = decode$c;
function encode$b(pSig) {
  const head = Buffer$3.from([typeFields_1$b.InputTypes.PARTIAL_SIG]);
  return {
    key: Buffer$3.concat([head, pSig.pubkey]),
    value: pSig.signature
  };
}
partialSig$1.encode = encode$b;
partialSig$1.expected = "{ pubkey: Buffer; signature: Buffer; }";
function check$8(data) {
  return Buffer$3.isBuffer(data.pubkey) && Buffer$3.isBuffer(data.signature) && [33, 65].includes(data.pubkey.length) && [2, 3, 4].includes(data.pubkey[0]) && isDerSigWithSighash(data.signature);
}
partialSig$1.check = check$8;
function isDerSigWithSighash(buf) {
  if (!Buffer$3.isBuffer(buf) || buf.length < 9) return false;
  if (buf[0] !== 48) return false;
  if (buf.length !== buf[1] + 3) return false;
  if (buf[2] !== 2) return false;
  const rLen = buf[3];
  if (rLen > 33 || rLen < 1) return false;
  if (buf[3 + rLen + 1] !== 2) return false;
  const sLen = buf[3 + rLen + 2];
  if (sLen > 33 || sLen < 1) return false;
  if (buf.length !== 3 + rLen + 2 + sLen + 2) return false;
  return true;
}
function canAddToArray$2(array2, item, dupeSet) {
  const dupeString = item.pubkey.toString("hex");
  if (dupeSet.has(dupeString)) return false;
  dupeSet.add(dupeString);
  return array2.filter((v2) => v2.pubkey.equals(item.pubkey)).length === 0;
}
partialSig$1.canAddToArray = canAddToArray$2;
var porCommitment$1 = {};
Object.defineProperty(porCommitment$1, "__esModule", { value: true });
const typeFields_1$a = typeFields;
function decode$b(keyVal) {
  if (keyVal.key[0] !== typeFields_1$a.InputTypes.POR_COMMITMENT) {
    throw new Error(
      "Decode Error: could not decode porCommitment with key 0x" + keyVal.key.toString("hex")
    );
  }
  return keyVal.value.toString("utf8");
}
porCommitment$1.decode = decode$b;
function encode$a(data) {
  const key2 = Buffer$3.from([typeFields_1$a.InputTypes.POR_COMMITMENT]);
  return {
    key: key2,
    value: Buffer$3.from(data, "utf8")
  };
}
porCommitment$1.encode = encode$a;
porCommitment$1.expected = "string";
function check$7(data) {
  return typeof data === "string";
}
porCommitment$1.check = check$7;
function canAdd$5(currentData, newData) {
  return !!currentData && !!newData && currentData.porCommitment === void 0;
}
porCommitment$1.canAdd = canAdd$5;
var sighashType$1 = {};
Object.defineProperty(sighashType$1, "__esModule", { value: true });
const typeFields_1$9 = typeFields;
function decode$a(keyVal) {
  if (keyVal.key[0] !== typeFields_1$9.InputTypes.SIGHASH_TYPE) {
    throw new Error(
      "Decode Error: could not decode sighashType with key 0x" + keyVal.key.toString("hex")
    );
  }
  return keyVal.value.readUInt32LE(0);
}
sighashType$1.decode = decode$a;
function encode$9(data) {
  const key2 = Buffer$3.from([typeFields_1$9.InputTypes.SIGHASH_TYPE]);
  const value3 = Buffer$3.allocUnsafe(4);
  value3.writeUInt32LE(data, 0);
  return {
    key: key2,
    value: value3
  };
}
sighashType$1.encode = encode$9;
sighashType$1.expected = "number";
function check$6(data) {
  return typeof data === "number";
}
sighashType$1.check = check$6;
function canAdd$4(currentData, newData) {
  return !!currentData && !!newData && currentData.sighashType === void 0;
}
sighashType$1.canAdd = canAdd$4;
var tapKeySig$1 = {};
Object.defineProperty(tapKeySig$1, "__esModule", { value: true });
const typeFields_1$8 = typeFields;
function decode$9(keyVal) {
  if (keyVal.key[0] !== typeFields_1$8.InputTypes.TAP_KEY_SIG || keyVal.key.length !== 1) {
    throw new Error(
      "Decode Error: could not decode tapKeySig with key 0x" + keyVal.key.toString("hex")
    );
  }
  if (!check$5(keyVal.value)) {
    throw new Error(
      "Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature"
    );
  }
  return keyVal.value;
}
tapKeySig$1.decode = decode$9;
function encode$8(value3) {
  const key2 = Buffer$3.from([typeFields_1$8.InputTypes.TAP_KEY_SIG]);
  return { key: key2, value: value3 };
}
tapKeySig$1.encode = encode$8;
tapKeySig$1.expected = "Buffer";
function check$5(data) {
  return Buffer$3.isBuffer(data) && (data.length === 64 || data.length === 65);
}
tapKeySig$1.check = check$5;
function canAdd$3(currentData, newData) {
  return !!currentData && !!newData && currentData.tapKeySig === void 0;
}
tapKeySig$1.canAdd = canAdd$3;
var tapLeafScript$1 = {};
Object.defineProperty(tapLeafScript$1, "__esModule", { value: true });
const typeFields_1$7 = typeFields;
function decode$8(keyVal) {
  if (keyVal.key[0] !== typeFields_1$7.InputTypes.TAP_LEAF_SCRIPT) {
    throw new Error(
      "Decode Error: could not decode tapLeafScript with key 0x" + keyVal.key.toString("hex")
    );
  }
  if ((keyVal.key.length - 2) % 32 !== 0) {
    throw new Error(
      "Decode Error: tapLeafScript has invalid control block in key 0x" + keyVal.key.toString("hex")
    );
  }
  const leafVersion = keyVal.value[keyVal.value.length - 1];
  if ((keyVal.key[1] & 254) !== leafVersion) {
    throw new Error(
      "Decode Error: tapLeafScript bad leaf version in key 0x" + keyVal.key.toString("hex")
    );
  }
  const script2 = keyVal.value.slice(0, -1);
  const controlBlock = keyVal.key.slice(1);
  return { controlBlock, script: script2, leafVersion };
}
tapLeafScript$1.decode = decode$8;
function encode$7(tScript) {
  const head = Buffer$3.from([typeFields_1$7.InputTypes.TAP_LEAF_SCRIPT]);
  const verBuf = Buffer$3.from([tScript.leafVersion]);
  return {
    key: Buffer$3.concat([head, tScript.controlBlock]),
    value: Buffer$3.concat([tScript.script, verBuf])
  };
}
tapLeafScript$1.encode = encode$7;
tapLeafScript$1.expected = "{ controlBlock: Buffer; leafVersion: number, script: Buffer; }";
function check$4(data) {
  return Buffer$3.isBuffer(data.controlBlock) && (data.controlBlock.length - 1) % 32 === 0 && (data.controlBlock[0] & 254) === data.leafVersion && Buffer$3.isBuffer(data.script);
}
tapLeafScript$1.check = check$4;
function canAddToArray$1(array2, item, dupeSet) {
  const dupeString = item.controlBlock.toString("hex");
  if (dupeSet.has(dupeString)) return false;
  dupeSet.add(dupeString);
  return array2.filter((v2) => v2.controlBlock.equals(item.controlBlock)).length === 0;
}
tapLeafScript$1.canAddToArray = canAddToArray$1;
var tapMerkleRoot$1 = {};
Object.defineProperty(tapMerkleRoot$1, "__esModule", { value: true });
const typeFields_1$6 = typeFields;
function decode$7(keyVal) {
  if (keyVal.key[0] !== typeFields_1$6.InputTypes.TAP_MERKLE_ROOT || keyVal.key.length !== 1) {
    throw new Error(
      "Decode Error: could not decode tapMerkleRoot with key 0x" + keyVal.key.toString("hex")
    );
  }
  if (!check$3(keyVal.value)) {
    throw new Error("Decode Error: tapMerkleRoot not a 32-byte hash");
  }
  return keyVal.value;
}
tapMerkleRoot$1.decode = decode$7;
function encode$6(value3) {
  const key2 = Buffer$3.from([typeFields_1$6.InputTypes.TAP_MERKLE_ROOT]);
  return { key: key2, value: value3 };
}
tapMerkleRoot$1.encode = encode$6;
tapMerkleRoot$1.expected = "Buffer";
function check$3(data) {
  return Buffer$3.isBuffer(data) && data.length === 32;
}
tapMerkleRoot$1.check = check$3;
function canAdd$2(currentData, newData) {
  return !!currentData && !!newData && currentData.tapMerkleRoot === void 0;
}
tapMerkleRoot$1.canAdd = canAdd$2;
var tapScriptSig$1 = {};
Object.defineProperty(tapScriptSig$1, "__esModule", { value: true });
const typeFields_1$5 = typeFields;
function decode$6(keyVal) {
  if (keyVal.key[0] !== typeFields_1$5.InputTypes.TAP_SCRIPT_SIG) {
    throw new Error(
      "Decode Error: could not decode tapScriptSig with key 0x" + keyVal.key.toString("hex")
    );
  }
  if (keyVal.key.length !== 65) {
    throw new Error(
      "Decode Error: tapScriptSig has invalid key 0x" + keyVal.key.toString("hex")
    );
  }
  if (keyVal.value.length !== 64 && keyVal.value.length !== 65) {
    throw new Error(
      "Decode Error: tapScriptSig has invalid signature in key 0x" + keyVal.key.toString("hex")
    );
  }
  const pubkey = keyVal.key.slice(1, 33);
  const leafHash = keyVal.key.slice(33);
  return {
    pubkey,
    leafHash,
    signature: keyVal.value
  };
}
tapScriptSig$1.decode = decode$6;
function encode$5(tSig) {
  const head = Buffer$3.from([typeFields_1$5.InputTypes.TAP_SCRIPT_SIG]);
  return {
    key: Buffer$3.concat([head, tSig.pubkey, tSig.leafHash]),
    value: tSig.signature
  };
}
tapScriptSig$1.encode = encode$5;
tapScriptSig$1.expected = "{ pubkey: Buffer; leafHash: Buffer; signature: Buffer; }";
function check$2(data) {
  return Buffer$3.isBuffer(data.pubkey) && Buffer$3.isBuffer(data.leafHash) && Buffer$3.isBuffer(data.signature) && data.pubkey.length === 32 && data.leafHash.length === 32 && (data.signature.length === 64 || data.signature.length === 65);
}
tapScriptSig$1.check = check$2;
function canAddToArray(array2, item, dupeSet) {
  const dupeString = item.pubkey.toString("hex") + item.leafHash.toString("hex");
  if (dupeSet.has(dupeString)) return false;
  dupeSet.add(dupeString);
  return array2.filter(
    (v2) => v2.pubkey.equals(item.pubkey) && v2.leafHash.equals(item.leafHash)
  ).length === 0;
}
tapScriptSig$1.canAddToArray = canAddToArray;
var witnessUtxo$1 = {};
var tools = {};
var varint = {};
Object.defineProperty(varint, "__esModule", { value: true });
const MAX_SAFE_INTEGER$1 = 9007199254740991;
function checkUInt53(n2) {
  if (n2 < 0 || n2 > MAX_SAFE_INTEGER$1 || n2 % 1 !== 0)
    throw new RangeError("value out of range");
}
function encode$4(_number, buffer2, offset) {
  checkUInt53(_number);
  if (!buffer2) buffer2 = Buffer$3.allocUnsafe(encodingLength(_number));
  if (!Buffer$3.isBuffer(buffer2))
    throw new TypeError("buffer must be a Buffer instance");
  if (!offset) offset = 0;
  if (_number < 253) {
    buffer2.writeUInt8(_number, offset);
    Object.assign(encode$4, { bytes: 1 });
  } else if (_number <= 65535) {
    buffer2.writeUInt8(253, offset);
    buffer2.writeUInt16LE(_number, offset + 1);
    Object.assign(encode$4, { bytes: 3 });
  } else if (_number <= 4294967295) {
    buffer2.writeUInt8(254, offset);
    buffer2.writeUInt32LE(_number, offset + 1);
    Object.assign(encode$4, { bytes: 5 });
  } else {
    buffer2.writeUInt8(255, offset);
    buffer2.writeUInt32LE(_number >>> 0, offset + 1);
    buffer2.writeUInt32LE(_number / 4294967296 | 0, offset + 5);
    Object.assign(encode$4, { bytes: 9 });
  }
  return buffer2;
}
varint.encode = encode$4;
function decode$5(buffer2, offset) {
  if (!Buffer$3.isBuffer(buffer2))
    throw new TypeError("buffer must be a Buffer instance");
  if (!offset) offset = 0;
  const first = buffer2.readUInt8(offset);
  if (first < 253) {
    Object.assign(decode$5, { bytes: 1 });
    return first;
  } else if (first === 253) {
    Object.assign(decode$5, { bytes: 3 });
    return buffer2.readUInt16LE(offset + 1);
  } else if (first === 254) {
    Object.assign(decode$5, { bytes: 5 });
    return buffer2.readUInt32LE(offset + 1);
  } else {
    Object.assign(decode$5, { bytes: 9 });
    const lo = buffer2.readUInt32LE(offset + 1);
    const hi = buffer2.readUInt32LE(offset + 5);
    const _number = hi * 4294967296 + lo;
    checkUInt53(_number);
    return _number;
  }
}
varint.decode = decode$5;
function encodingLength(_number) {
  checkUInt53(_number);
  return _number < 253 ? 1 : _number <= 65535 ? 3 : _number <= 4294967295 ? 5 : 9;
}
varint.encodingLength = encodingLength;
Object.defineProperty(tools, "__esModule", { value: true });
const varuint$6 = varint;
tools.range = (n2) => [...Array(n2).keys()];
function reverseBuffer$1(buffer2) {
  if (buffer2.length < 1) return buffer2;
  let j2 = buffer2.length - 1;
  let tmp = 0;
  for (let i2 = 0; i2 < buffer2.length / 2; i2++) {
    tmp = buffer2[i2];
    buffer2[i2] = buffer2[j2];
    buffer2[j2] = tmp;
    j2--;
  }
  return buffer2;
}
tools.reverseBuffer = reverseBuffer$1;
function keyValsToBuffer(keyVals) {
  const buffers = keyVals.map(keyValToBuffer);
  buffers.push(Buffer$3.from([0]));
  return Buffer$3.concat(buffers);
}
tools.keyValsToBuffer = keyValsToBuffer;
function keyValToBuffer(keyVal) {
  const keyLen = keyVal.key.length;
  const valLen = keyVal.value.length;
  const keyVarIntLen = varuint$6.encodingLength(keyLen);
  const valVarIntLen = varuint$6.encodingLength(valLen);
  const buffer2 = Buffer$3.allocUnsafe(
    keyVarIntLen + keyLen + valVarIntLen + valLen
  );
  varuint$6.encode(keyLen, buffer2, 0);
  keyVal.key.copy(buffer2, keyVarIntLen);
  varuint$6.encode(valLen, buffer2, keyVarIntLen + keyLen);
  keyVal.value.copy(buffer2, keyVarIntLen + keyLen + valVarIntLen);
  return buffer2;
}
tools.keyValToBuffer = keyValToBuffer;
function verifuint(value3, max) {
  if (typeof value3 !== "number")
    throw new Error("cannot write a non-number as a number");
  if (value3 < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (value3 > max) throw new Error("RangeError: value out of range");
  if (Math.floor(value3) !== value3)
    throw new Error("value has a fractional component");
}
function readUInt64LE(buffer2, offset) {
  const a2 = buffer2.readUInt32LE(offset);
  let b2 = buffer2.readUInt32LE(offset + 4);
  b2 *= 4294967296;
  verifuint(b2 + a2, 9007199254740991);
  return b2 + a2;
}
tools.readUInt64LE = readUInt64LE;
function writeUInt64LE(buffer2, value3, offset) {
  verifuint(value3, 9007199254740991);
  buffer2.writeInt32LE(value3 & -1, offset);
  buffer2.writeUInt32LE(Math.floor(value3 / 4294967296), offset + 4);
  return offset + 8;
}
tools.writeUInt64LE = writeUInt64LE;
Object.defineProperty(witnessUtxo$1, "__esModule", { value: true });
const typeFields_1$4 = typeFields;
const tools_1$2 = tools;
const varuint$5 = varint;
function decode$4(keyVal) {
  if (keyVal.key[0] !== typeFields_1$4.InputTypes.WITNESS_UTXO) {
    throw new Error(
      "Decode Error: could not decode witnessUtxo with key 0x" + keyVal.key.toString("hex")
    );
  }
  const value3 = tools_1$2.readUInt64LE(keyVal.value, 0);
  let _offset = 8;
  const scriptLen = varuint$5.decode(keyVal.value, _offset);
  _offset += varuint$5.encodingLength(scriptLen);
  const script2 = keyVal.value.slice(_offset);
  if (script2.length !== scriptLen) {
    throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
  }
  return {
    script: script2,
    value: value3
  };
}
witnessUtxo$1.decode = decode$4;
function encode$3(data) {
  const { script: script2, value: value3 } = data;
  const varintLen = varuint$5.encodingLength(script2.length);
  const result = Buffer$3.allocUnsafe(8 + varintLen + script2.length);
  tools_1$2.writeUInt64LE(result, value3, 0);
  varuint$5.encode(script2.length, result, 8);
  script2.copy(result, 8 + varintLen);
  return {
    key: Buffer$3.from([typeFields_1$4.InputTypes.WITNESS_UTXO]),
    value: result
  };
}
witnessUtxo$1.encode = encode$3;
witnessUtxo$1.expected = "{ script: Buffer; value: number; }";
function check$1(data) {
  return Buffer$3.isBuffer(data.script) && typeof data.value === "number";
}
witnessUtxo$1.check = check$1;
function canAdd$1(currentData, newData) {
  return !!currentData && !!newData && currentData.witnessUtxo === void 0;
}
witnessUtxo$1.canAdd = canAdd$1;
var tapTree$1 = {};
Object.defineProperty(tapTree$1, "__esModule", { value: true });
const typeFields_1$3 = typeFields;
const varuint$4 = varint;
function decode$3(keyVal) {
  if (keyVal.key[0] !== typeFields_1$3.OutputTypes.TAP_TREE || keyVal.key.length !== 1) {
    throw new Error(
      "Decode Error: could not decode tapTree with key 0x" + keyVal.key.toString("hex")
    );
  }
  let _offset = 0;
  const data = [];
  while (_offset < keyVal.value.length) {
    const depth = keyVal.value[_offset++];
    const leafVersion = keyVal.value[_offset++];
    const scriptLen = varuint$4.decode(keyVal.value, _offset);
    _offset += varuint$4.encodingLength(scriptLen);
    data.push({
      depth,
      leafVersion,
      script: keyVal.value.slice(_offset, _offset + scriptLen)
    });
    _offset += scriptLen;
  }
  return { leaves: data };
}
tapTree$1.decode = decode$3;
function encode$2(tree) {
  const key2 = Buffer$3.from([typeFields_1$3.OutputTypes.TAP_TREE]);
  const bufs = [].concat(
    ...tree.leaves.map((tapLeaf) => [
      Buffer$3.of(tapLeaf.depth, tapLeaf.leafVersion),
      varuint$4.encode(tapLeaf.script.length),
      tapLeaf.script
    ])
  );
  return {
    key: key2,
    value: Buffer$3.concat(bufs)
  };
}
tapTree$1.encode = encode$2;
tapTree$1.expected = "{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }";
function check(data) {
  return Array.isArray(data.leaves) && data.leaves.every(
    (tapLeaf) => tapLeaf.depth >= 0 && tapLeaf.depth <= 128 && (tapLeaf.leafVersion & 254) === tapLeaf.leafVersion && Buffer$3.isBuffer(tapLeaf.script)
  );
}
tapTree$1.check = check;
function canAdd(currentData, newData) {
  return !!currentData && !!newData && currentData.tapTree === void 0;
}
tapTree$1.canAdd = canAdd;
var bip32Derivation$2 = {};
Object.defineProperty(bip32Derivation$2, "__esModule", { value: true });
const range$2 = (n2) => [...Array(n2).keys()];
const isValidDERKey = (pubkey) => pubkey.length === 33 && [2, 3].includes(pubkey[0]) || pubkey.length === 65 && 4 === pubkey[0];
function makeConverter$4(TYPE_BYTE, isValidPubkey = isValidDERKey) {
  function decode2(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE) {
      throw new Error(
        "Decode Error: could not decode bip32Derivation with key 0x" + keyVal.key.toString("hex")
      );
    }
    const pubkey = keyVal.key.slice(1);
    if (!isValidPubkey(pubkey)) {
      throw new Error(
        "Decode Error: bip32Derivation has invalid pubkey in key 0x" + keyVal.key.toString("hex")
      );
    }
    if (keyVal.value.length / 4 % 1 !== 0) {
      throw new Error(
        "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
      );
    }
    const data = {
      masterFingerprint: keyVal.value.slice(0, 4),
      pubkey,
      path: "m"
    };
    for (const i2 of range$2(keyVal.value.length / 4 - 1)) {
      const val = keyVal.value.readUInt32LE(i2 * 4 + 4);
      const isHard = !!(val & 2147483648);
      const idx = val & 2147483647;
      data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
    }
    return data;
  }
  function encode2(data) {
    const head = Buffer$3.from([TYPE_BYTE]);
    const key2 = Buffer$3.concat([head, data.pubkey]);
    const splitPath = data.path.split("/");
    const value3 = Buffer$3.allocUnsafe(splitPath.length * 4);
    data.masterFingerprint.copy(value3, 0);
    let offset = 4;
    splitPath.slice(1).forEach((level) => {
      const isHard = level.slice(-1) === "'";
      let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
      if (isHard) num += 2147483648;
      value3.writeUInt32LE(num, offset);
      offset += 4;
    });
    return {
      key: key2,
      value: value3
    };
  }
  const expected = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }";
  function check2(data) {
    return Buffer$3.isBuffer(data.pubkey) && Buffer$3.isBuffer(data.masterFingerprint) && typeof data.path === "string" && isValidPubkey(data.pubkey) && data.masterFingerprint.length === 4;
  }
  function canAddToArray2(array2, item, dupeSet) {
    const dupeString = item.pubkey.toString("hex");
    if (dupeSet.has(dupeString)) return false;
    dupeSet.add(dupeString);
    return array2.filter((v2) => v2.pubkey.equals(item.pubkey)).length === 0;
  }
  return {
    decode: decode2,
    encode: encode2,
    check: check2,
    expected,
    canAddToArray: canAddToArray2
  };
}
bip32Derivation$2.makeConverter = makeConverter$4;
var checkPubkey$1 = {};
Object.defineProperty(checkPubkey$1, "__esModule", { value: true });
function makeChecker(pubkeyTypes) {
  return checkPubkey2;
  function checkPubkey2(keyVal) {
    let pubkey;
    if (pubkeyTypes.includes(keyVal.key[0])) {
      pubkey = keyVal.key.slice(1);
      if (!(pubkey.length === 33 || pubkey.length === 65) || ![2, 3, 4].includes(pubkey[0])) {
        throw new Error(
          "Format Error: invalid pubkey in key 0x" + keyVal.key.toString("hex")
        );
      }
    }
    return pubkey;
  }
}
checkPubkey$1.makeChecker = makeChecker;
var redeemScript$1 = {};
Object.defineProperty(redeemScript$1, "__esModule", { value: true });
function makeConverter$3(TYPE_BYTE) {
  function decode2(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE) {
      throw new Error(
        "Decode Error: could not decode redeemScript with key 0x" + keyVal.key.toString("hex")
      );
    }
    return keyVal.value;
  }
  function encode2(data) {
    const key2 = Buffer$3.from([TYPE_BYTE]);
    return {
      key: key2,
      value: data
    };
  }
  const expected = "Buffer";
  function check2(data) {
    return Buffer$3.isBuffer(data);
  }
  function canAdd2(currentData, newData) {
    return !!currentData && !!newData && currentData.redeemScript === void 0;
  }
  return {
    decode: decode2,
    encode: encode2,
    check: check2,
    expected,
    canAdd: canAdd2
  };
}
redeemScript$1.makeConverter = makeConverter$3;
var tapBip32Derivation$1 = {};
Object.defineProperty(tapBip32Derivation$1, "__esModule", { value: true });
const varuint$3 = varint;
const bip32Derivation$1 = bip32Derivation$2;
const isValidBIP340Key = (pubkey) => pubkey.length === 32;
function makeConverter$2(TYPE_BYTE) {
  const parent = bip32Derivation$1.makeConverter(TYPE_BYTE, isValidBIP340Key);
  function decode2(keyVal) {
    const nHashes = varuint$3.decode(keyVal.value);
    const nHashesLen = varuint$3.encodingLength(nHashes);
    const base2 = parent.decode({
      key: keyVal.key,
      value: keyVal.value.slice(nHashesLen + nHashes * 32)
    });
    const leafHashes = new Array(nHashes);
    for (let i2 = 0, _offset = nHashesLen; i2 < nHashes; i2++, _offset += 32) {
      leafHashes[i2] = keyVal.value.slice(_offset, _offset + 32);
    }
    return Object.assign({}, base2, { leafHashes });
  }
  function encode2(data) {
    const base2 = parent.encode(data);
    const nHashesLen = varuint$3.encodingLength(data.leafHashes.length);
    const nHashesBuf = Buffer$3.allocUnsafe(nHashesLen);
    varuint$3.encode(data.leafHashes.length, nHashesBuf);
    const value3 = Buffer$3.concat([nHashesBuf, ...data.leafHashes, base2.value]);
    return Object.assign({}, base2, { value: value3 });
  }
  const expected = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; leafHashes: Buffer[]; }";
  function check2(data) {
    return Array.isArray(data.leafHashes) && data.leafHashes.every(
      (leafHash) => Buffer$3.isBuffer(leafHash) && leafHash.length === 32
    ) && parent.check(data);
  }
  return {
    decode: decode2,
    encode: encode2,
    check: check2,
    expected,
    canAddToArray: parent.canAddToArray
  };
}
tapBip32Derivation$1.makeConverter = makeConverter$2;
var tapInternalKey$1 = {};
Object.defineProperty(tapInternalKey$1, "__esModule", { value: true });
function makeConverter$1(TYPE_BYTE) {
  function decode2(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE || keyVal.key.length !== 1) {
      throw new Error(
        "Decode Error: could not decode tapInternalKey with key 0x" + keyVal.key.toString("hex")
      );
    }
    if (keyVal.value.length !== 32) {
      throw new Error(
        "Decode Error: tapInternalKey not a 32-byte x-only pubkey"
      );
    }
    return keyVal.value;
  }
  function encode2(value3) {
    const key2 = Buffer$3.from([TYPE_BYTE]);
    return { key: key2, value: value3 };
  }
  const expected = "Buffer";
  function check2(data) {
    return Buffer$3.isBuffer(data) && data.length === 32;
  }
  function canAdd2(currentData, newData) {
    return !!currentData && !!newData && currentData.tapInternalKey === void 0;
  }
  return {
    decode: decode2,
    encode: encode2,
    check: check2,
    expected,
    canAdd: canAdd2
  };
}
tapInternalKey$1.makeConverter = makeConverter$1;
var witnessScript$1 = {};
Object.defineProperty(witnessScript$1, "__esModule", { value: true });
function makeConverter(TYPE_BYTE) {
  function decode2(keyVal) {
    if (keyVal.key[0] !== TYPE_BYTE) {
      throw new Error(
        "Decode Error: could not decode witnessScript with key 0x" + keyVal.key.toString("hex")
      );
    }
    return keyVal.value;
  }
  function encode2(data) {
    const key2 = Buffer$3.from([TYPE_BYTE]);
    return {
      key: key2,
      value: data
    };
  }
  const expected = "Buffer";
  function check2(data) {
    return Buffer$3.isBuffer(data);
  }
  function canAdd2(currentData, newData) {
    return !!currentData && !!newData && currentData.witnessScript === void 0;
  }
  return {
    decode: decode2,
    encode: encode2,
    check: check2,
    expected,
    canAdd: canAdd2
  };
}
witnessScript$1.makeConverter = makeConverter;
Object.defineProperty(converter, "__esModule", { value: true });
const typeFields_1$2 = typeFields;
const globalXpub = globalXpub$1;
const unsignedTx = unsignedTx$1;
const finalScriptSig = finalScriptSig$1;
const finalScriptWitness = finalScriptWitness$1;
const nonWitnessUtxo = nonWitnessUtxo$1;
const partialSig = partialSig$1;
const porCommitment = porCommitment$1;
const sighashType = sighashType$1;
const tapKeySig = tapKeySig$1;
const tapLeafScript = tapLeafScript$1;
const tapMerkleRoot = tapMerkleRoot$1;
const tapScriptSig = tapScriptSig$1;
const witnessUtxo = witnessUtxo$1;
const tapTree = tapTree$1;
const bip32Derivation = bip32Derivation$2;
const checkPubkey = checkPubkey$1;
const redeemScript = redeemScript$1;
const tapBip32Derivation = tapBip32Derivation$1;
const tapInternalKey = tapInternalKey$1;
const witnessScript = witnessScript$1;
const globals = {
  unsignedTx,
  globalXpub,
  // pass an Array of key bytes that require pubkey beside the key
  checkPubkey: checkPubkey.makeChecker([])
};
converter.globals = globals;
const inputs = {
  nonWitnessUtxo,
  partialSig,
  sighashType,
  finalScriptSig,
  finalScriptWitness,
  porCommitment,
  witnessUtxo,
  bip32Derivation: bip32Derivation.makeConverter(
    typeFields_1$2.InputTypes.BIP32_DERIVATION
  ),
  redeemScript: redeemScript.makeConverter(
    typeFields_1$2.InputTypes.REDEEM_SCRIPT
  ),
  witnessScript: witnessScript.makeConverter(
    typeFields_1$2.InputTypes.WITNESS_SCRIPT
  ),
  checkPubkey: checkPubkey.makeChecker([
    typeFields_1$2.InputTypes.PARTIAL_SIG,
    typeFields_1$2.InputTypes.BIP32_DERIVATION
  ]),
  tapKeySig,
  tapScriptSig,
  tapLeafScript,
  tapBip32Derivation: tapBip32Derivation.makeConverter(
    typeFields_1$2.InputTypes.TAP_BIP32_DERIVATION
  ),
  tapInternalKey: tapInternalKey.makeConverter(
    typeFields_1$2.InputTypes.TAP_INTERNAL_KEY
  ),
  tapMerkleRoot
};
converter.inputs = inputs;
const outputs = {
  bip32Derivation: bip32Derivation.makeConverter(
    typeFields_1$2.OutputTypes.BIP32_DERIVATION
  ),
  redeemScript: redeemScript.makeConverter(
    typeFields_1$2.OutputTypes.REDEEM_SCRIPT
  ),
  witnessScript: witnessScript.makeConverter(
    typeFields_1$2.OutputTypes.WITNESS_SCRIPT
  ),
  checkPubkey: checkPubkey.makeChecker([
    typeFields_1$2.OutputTypes.BIP32_DERIVATION
  ]),
  tapBip32Derivation: tapBip32Derivation.makeConverter(
    typeFields_1$2.OutputTypes.TAP_BIP32_DERIVATION
  ),
  tapTree,
  tapInternalKey: tapInternalKey.makeConverter(
    typeFields_1$2.OutputTypes.TAP_INTERNAL_KEY
  )
};
converter.outputs = outputs;
Object.defineProperty(fromBuffer, "__esModule", { value: true });
const convert$1 = converter;
const tools_1$1 = tools;
const varuint$2 = varint;
const typeFields_1$1 = typeFields;
function psbtFromBuffer(buffer2, txGetter) {
  let offset = 0;
  function varSlice() {
    const keyLen = varuint$2.decode(buffer2, offset);
    offset += varuint$2.encodingLength(keyLen);
    const key2 = buffer2.slice(offset, offset + keyLen);
    offset += keyLen;
    return key2;
  }
  function readUInt32BE() {
    const num = buffer2.readUInt32BE(offset);
    offset += 4;
    return num;
  }
  function readUInt8() {
    const num = buffer2.readUInt8(offset);
    offset += 1;
    return num;
  }
  function getKeyValue() {
    const key2 = varSlice();
    const value3 = varSlice();
    return {
      key: key2,
      value: value3
    };
  }
  function checkEndOfKeyValPairs() {
    if (offset >= buffer2.length) {
      throw new Error("Format Error: Unexpected End of PSBT");
    }
    const isEnd = buffer2.readUInt8(offset) === 0;
    if (isEnd) {
      offset++;
    }
    return isEnd;
  }
  if (readUInt32BE() !== 1886610036) {
    throw new Error("Format Error: Invalid Magic Number");
  }
  if (readUInt8() !== 255) {
    throw new Error(
      "Format Error: Magic Number must be followed by 0xff separator"
    );
  }
  const globalMapKeyVals = [];
  const globalKeyIndex = {};
  while (!checkEndOfKeyValPairs()) {
    const keyVal = getKeyValue();
    const hexKey = keyVal.key.toString("hex");
    if (globalKeyIndex[hexKey]) {
      throw new Error(
        "Format Error: Keys must be unique for global keymap: key " + hexKey
      );
    }
    globalKeyIndex[hexKey] = 1;
    globalMapKeyVals.push(keyVal);
  }
  const unsignedTxMaps = globalMapKeyVals.filter(
    (keyVal) => keyVal.key[0] === typeFields_1$1.GlobalTypes.UNSIGNED_TX
  );
  if (unsignedTxMaps.length !== 1) {
    throw new Error("Format Error: Only one UNSIGNED_TX allowed");
  }
  const unsignedTx2 = txGetter(unsignedTxMaps[0].value);
  const { inputCount, outputCount } = unsignedTx2.getInputOutputCounts();
  const inputKeyVals = [];
  const outputKeyVals = [];
  for (const index of tools_1$1.range(inputCount)) {
    const inputKeyIndex = {};
    const input = [];
    while (!checkEndOfKeyValPairs()) {
      const keyVal = getKeyValue();
      const hexKey = keyVal.key.toString("hex");
      if (inputKeyIndex[hexKey]) {
        throw new Error(
          "Format Error: Keys must be unique for each input: input index " + index + " key " + hexKey
        );
      }
      inputKeyIndex[hexKey] = 1;
      input.push(keyVal);
    }
    inputKeyVals.push(input);
  }
  for (const index of tools_1$1.range(outputCount)) {
    const outputKeyIndex = {};
    const output2 = [];
    while (!checkEndOfKeyValPairs()) {
      const keyVal = getKeyValue();
      const hexKey = keyVal.key.toString("hex");
      if (outputKeyIndex[hexKey]) {
        throw new Error(
          "Format Error: Keys must be unique for each output: output index " + index + " key " + hexKey
        );
      }
      outputKeyIndex[hexKey] = 1;
      output2.push(keyVal);
    }
    outputKeyVals.push(output2);
  }
  return psbtFromKeyVals(unsignedTx2, {
    globalMapKeyVals,
    inputKeyVals,
    outputKeyVals
  });
}
fromBuffer.psbtFromBuffer = psbtFromBuffer;
function checkKeyBuffer(type2, keyBuf, keyNum) {
  if (!keyBuf.equals(Buffer$3.from([keyNum]))) {
    throw new Error(
      `Format Error: Invalid ${type2} key: ${keyBuf.toString("hex")}`
    );
  }
}
fromBuffer.checkKeyBuffer = checkKeyBuffer;
function psbtFromKeyVals(unsignedTx2, { globalMapKeyVals, inputKeyVals, outputKeyVals }) {
  const globalMap = {
    unsignedTx: unsignedTx2
  };
  let txCount = 0;
  for (const keyVal of globalMapKeyVals) {
    switch (keyVal.key[0]) {
      case typeFields_1$1.GlobalTypes.UNSIGNED_TX:
        checkKeyBuffer(
          "global",
          keyVal.key,
          typeFields_1$1.GlobalTypes.UNSIGNED_TX
        );
        if (txCount > 0) {
          throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
        }
        txCount++;
        break;
      case typeFields_1$1.GlobalTypes.GLOBAL_XPUB:
        if (globalMap.globalXpub === void 0) {
          globalMap.globalXpub = [];
        }
        globalMap.globalXpub.push(convert$1.globals.globalXpub.decode(keyVal));
        break;
      default:
        if (!globalMap.unknownKeyVals) globalMap.unknownKeyVals = [];
        globalMap.unknownKeyVals.push(keyVal);
    }
  }
  const inputCount = inputKeyVals.length;
  const outputCount = outputKeyVals.length;
  const inputs2 = [];
  const outputs2 = [];
  for (const index of tools_1$1.range(inputCount)) {
    const input = {};
    for (const keyVal of inputKeyVals[index]) {
      convert$1.inputs.checkPubkey(keyVal);
      switch (keyVal.key[0]) {
        case typeFields_1$1.InputTypes.NON_WITNESS_UTXO:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.NON_WITNESS_UTXO
          );
          if (input.nonWitnessUtxo !== void 0) {
            throw new Error(
              "Format Error: Input has multiple NON_WITNESS_UTXO"
            );
          }
          input.nonWitnessUtxo = convert$1.inputs.nonWitnessUtxo.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.WITNESS_UTXO:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.WITNESS_UTXO
          );
          if (input.witnessUtxo !== void 0) {
            throw new Error("Format Error: Input has multiple WITNESS_UTXO");
          }
          input.witnessUtxo = convert$1.inputs.witnessUtxo.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.PARTIAL_SIG:
          if (input.partialSig === void 0) {
            input.partialSig = [];
          }
          input.partialSig.push(convert$1.inputs.partialSig.decode(keyVal));
          break;
        case typeFields_1$1.InputTypes.SIGHASH_TYPE:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.SIGHASH_TYPE
          );
          if (input.sighashType !== void 0) {
            throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
          }
          input.sighashType = convert$1.inputs.sighashType.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.REDEEM_SCRIPT:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.REDEEM_SCRIPT
          );
          if (input.redeemScript !== void 0) {
            throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
          }
          input.redeemScript = convert$1.inputs.redeemScript.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.WITNESS_SCRIPT:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.WITNESS_SCRIPT
          );
          if (input.witnessScript !== void 0) {
            throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
          }
          input.witnessScript = convert$1.inputs.witnessScript.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.BIP32_DERIVATION:
          if (input.bip32Derivation === void 0) {
            input.bip32Derivation = [];
          }
          input.bip32Derivation.push(
            convert$1.inputs.bip32Derivation.decode(keyVal)
          );
          break;
        case typeFields_1$1.InputTypes.FINAL_SCRIPTSIG:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.FINAL_SCRIPTSIG
          );
          input.finalScriptSig = convert$1.inputs.finalScriptSig.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.FINAL_SCRIPTWITNESS:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.FINAL_SCRIPTWITNESS
          );
          input.finalScriptWitness = convert$1.inputs.finalScriptWitness.decode(
            keyVal
          );
          break;
        case typeFields_1$1.InputTypes.POR_COMMITMENT:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.POR_COMMITMENT
          );
          input.porCommitment = convert$1.inputs.porCommitment.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.TAP_KEY_SIG:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.TAP_KEY_SIG
          );
          input.tapKeySig = convert$1.inputs.tapKeySig.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.TAP_SCRIPT_SIG:
          if (input.tapScriptSig === void 0) {
            input.tapScriptSig = [];
          }
          input.tapScriptSig.push(convert$1.inputs.tapScriptSig.decode(keyVal));
          break;
        case typeFields_1$1.InputTypes.TAP_LEAF_SCRIPT:
          if (input.tapLeafScript === void 0) {
            input.tapLeafScript = [];
          }
          input.tapLeafScript.push(convert$1.inputs.tapLeafScript.decode(keyVal));
          break;
        case typeFields_1$1.InputTypes.TAP_BIP32_DERIVATION:
          if (input.tapBip32Derivation === void 0) {
            input.tapBip32Derivation = [];
          }
          input.tapBip32Derivation.push(
            convert$1.inputs.tapBip32Derivation.decode(keyVal)
          );
          break;
        case typeFields_1$1.InputTypes.TAP_INTERNAL_KEY:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.TAP_INTERNAL_KEY
          );
          input.tapInternalKey = convert$1.inputs.tapInternalKey.decode(keyVal);
          break;
        case typeFields_1$1.InputTypes.TAP_MERKLE_ROOT:
          checkKeyBuffer(
            "input",
            keyVal.key,
            typeFields_1$1.InputTypes.TAP_MERKLE_ROOT
          );
          input.tapMerkleRoot = convert$1.inputs.tapMerkleRoot.decode(keyVal);
          break;
        default:
          if (!input.unknownKeyVals) input.unknownKeyVals = [];
          input.unknownKeyVals.push(keyVal);
      }
    }
    inputs2.push(input);
  }
  for (const index of tools_1$1.range(outputCount)) {
    const output2 = {};
    for (const keyVal of outputKeyVals[index]) {
      convert$1.outputs.checkPubkey(keyVal);
      switch (keyVal.key[0]) {
        case typeFields_1$1.OutputTypes.REDEEM_SCRIPT:
          checkKeyBuffer(
            "output",
            keyVal.key,
            typeFields_1$1.OutputTypes.REDEEM_SCRIPT
          );
          if (output2.redeemScript !== void 0) {
            throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
          }
          output2.redeemScript = convert$1.outputs.redeemScript.decode(keyVal);
          break;
        case typeFields_1$1.OutputTypes.WITNESS_SCRIPT:
          checkKeyBuffer(
            "output",
            keyVal.key,
            typeFields_1$1.OutputTypes.WITNESS_SCRIPT
          );
          if (output2.witnessScript !== void 0) {
            throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
          }
          output2.witnessScript = convert$1.outputs.witnessScript.decode(keyVal);
          break;
        case typeFields_1$1.OutputTypes.BIP32_DERIVATION:
          if (output2.bip32Derivation === void 0) {
            output2.bip32Derivation = [];
          }
          output2.bip32Derivation.push(
            convert$1.outputs.bip32Derivation.decode(keyVal)
          );
          break;
        case typeFields_1$1.OutputTypes.TAP_INTERNAL_KEY:
          checkKeyBuffer(
            "output",
            keyVal.key,
            typeFields_1$1.OutputTypes.TAP_INTERNAL_KEY
          );
          output2.tapInternalKey = convert$1.outputs.tapInternalKey.decode(keyVal);
          break;
        case typeFields_1$1.OutputTypes.TAP_TREE:
          checkKeyBuffer(
            "output",
            keyVal.key,
            typeFields_1$1.OutputTypes.TAP_TREE
          );
          output2.tapTree = convert$1.outputs.tapTree.decode(keyVal);
          break;
        case typeFields_1$1.OutputTypes.TAP_BIP32_DERIVATION:
          if (output2.tapBip32Derivation === void 0) {
            output2.tapBip32Derivation = [];
          }
          output2.tapBip32Derivation.push(
            convert$1.outputs.tapBip32Derivation.decode(keyVal)
          );
          break;
        default:
          if (!output2.unknownKeyVals) output2.unknownKeyVals = [];
          output2.unknownKeyVals.push(keyVal);
      }
    }
    outputs2.push(output2);
  }
  return { globalMap, inputs: inputs2, outputs: outputs2 };
}
fromBuffer.psbtFromKeyVals = psbtFromKeyVals;
var toBuffer$1 = {};
Object.defineProperty(toBuffer$1, "__esModule", { value: true });
const convert = converter;
const tools_1 = tools;
function psbtToBuffer({ globalMap, inputs: inputs2, outputs: outputs2 }) {
  const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({
    globalMap,
    inputs: inputs2,
    outputs: outputs2
  });
  const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);
  const keyValsOrEmptyToBuffer = (keyVals) => keyVals.length === 0 ? [Buffer$3.from([0])] : keyVals.map(tools_1.keyValsToBuffer);
  const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
  const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
  const header = Buffer$3.allocUnsafe(5);
  header.writeUIntBE(482972169471, 0, 5);
  return Buffer$3.concat(
    [header, globalBuffer].concat(inputBuffers, outputBuffers)
  );
}
toBuffer$1.psbtToBuffer = psbtToBuffer;
const sortKeyVals = (a2, b2) => {
  return a2.key.compare(b2.key);
};
function keyValsFromMap(keyValMap, converterFactory) {
  const keyHexSet = /* @__PURE__ */ new Set();
  const keyVals = Object.entries(keyValMap).reduce((result, [key2, value3]) => {
    if (key2 === "unknownKeyVals") return result;
    const converter2 = converterFactory[key2];
    if (converter2 === void 0) return result;
    const encodedKeyVals = (Array.isArray(value3) ? value3 : [value3]).map(
      converter2.encode
    );
    const keyHexes = encodedKeyVals.map((kv) => kv.key.toString("hex"));
    keyHexes.forEach((hex) => {
      if (keyHexSet.has(hex))
        throw new Error("Serialize Error: Duplicate key: " + hex);
      keyHexSet.add(hex);
    });
    return result.concat(encodedKeyVals);
  }, []);
  const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter((keyVal) => {
    return !keyHexSet.has(keyVal.key.toString("hex"));
  }) : [];
  return keyVals.concat(otherKeyVals).sort(sortKeyVals);
}
function psbtToKeyVals({ globalMap, inputs: inputs2, outputs: outputs2 }) {
  return {
    globalKeyVals: keyValsFromMap(globalMap, convert.globals),
    inputKeyVals: inputs2.map((i2) => keyValsFromMap(i2, convert.inputs)),
    outputKeyVals: outputs2.map((o3) => keyValsFromMap(o3, convert.outputs))
  };
}
toBuffer$1.psbtToKeyVals = psbtToKeyVals;
(function(exports2) {
  function __export(m2) {
    for (var p2 in m2) if (!exports2.hasOwnProperty(p2)) exports2[p2] = m2[p2];
  }
  Object.defineProperty(exports2, "__esModule", { value: true });
  __export(fromBuffer);
  __export(toBuffer$1);
})(parser);
Object.defineProperty(combiner, "__esModule", { value: true });
const parser_1$1 = parser;
function combine(psbts) {
  const self2 = psbts[0];
  const selfKeyVals = parser_1$1.psbtToKeyVals(self2);
  const others = psbts.slice(1);
  if (others.length === 0) throw new Error("Combine: Nothing to combine");
  const selfTx = getTx(self2);
  if (selfTx === void 0) {
    throw new Error("Combine: Self missing transaction");
  }
  const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
  const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
  const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
  for (const other of others) {
    const otherTx = getTx(other);
    if (otherTx === void 0 || !otherTx.toBuffer().equals(selfTx.toBuffer())) {
      throw new Error(
        "Combine: One of the Psbts does not have the same transaction."
      );
    }
    const otherKeyVals = parser_1$1.psbtToKeyVals(other);
    const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
    otherGlobalSet.forEach(
      keyPusher(
        selfGlobalSet,
        selfKeyVals.globalKeyVals,
        otherKeyVals.globalKeyVals
      )
    );
    const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
    otherInputSets.forEach(
      (inputSet, idx) => inputSet.forEach(
        keyPusher(
          selfInputSets[idx],
          selfKeyVals.inputKeyVals[idx],
          otherKeyVals.inputKeyVals[idx]
        )
      )
    );
    const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
    otherOutputSets.forEach(
      (outputSet, idx) => outputSet.forEach(
        keyPusher(
          selfOutputSets[idx],
          selfKeyVals.outputKeyVals[idx],
          otherKeyVals.outputKeyVals[idx]
        )
      )
    );
  }
  return parser_1$1.psbtFromKeyVals(selfTx, {
    globalMapKeyVals: selfKeyVals.globalKeyVals,
    inputKeyVals: selfKeyVals.inputKeyVals,
    outputKeyVals: selfKeyVals.outputKeyVals
  });
}
combiner.combine = combine;
function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
  return (key2) => {
    if (selfSet.has(key2)) return;
    const newKv = otherKeyVals.filter((kv) => kv.key.toString("hex") === key2)[0];
    selfKeyVals.push(newKv);
    selfSet.add(key2);
  };
}
function getTx(psbt2) {
  return psbt2.globalMap.unsignedTx;
}
function getKeySet(keyVals) {
  const set = /* @__PURE__ */ new Set();
  keyVals.forEach((keyVal) => {
    const hex = keyVal.key.toString("hex");
    if (set.has(hex))
      throw new Error("Combine: KeyValue Map keys should be unique");
    set.add(hex);
  });
  return set;
}
var utils$4 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  const converter$1 = converter;
  function checkForInput(inputs2, inputIndex) {
    const input = inputs2[inputIndex];
    if (input === void 0) throw new Error(`No input #${inputIndex}`);
    return input;
  }
  exports2.checkForInput = checkForInput;
  function checkForOutput(outputs2, outputIndex) {
    const output2 = outputs2[outputIndex];
    if (output2 === void 0) throw new Error(`No output #${outputIndex}`);
    return output2;
  }
  exports2.checkForOutput = checkForOutput;
  function checkHasKey(checkKeyVal, keyVals, enumLength) {
    if (checkKeyVal.key[0] < enumLength) {
      throw new Error(
        `Use the method for your specific key instead of addUnknownKeyVal*`
      );
    }
    if (keyVals && keyVals.filter((kv) => kv.key.equals(checkKeyVal.key)).length !== 0) {
      throw new Error(`Duplicate Key: ${checkKeyVal.key.toString("hex")}`);
    }
  }
  exports2.checkHasKey = checkHasKey;
  function getEnumLength(myenum) {
    let count = 0;
    Object.keys(myenum).forEach((val) => {
      if (Number(isNaN(Number(val)))) {
        count++;
      }
    });
    return count;
  }
  exports2.getEnumLength = getEnumLength;
  function inputCheckUncleanFinalized(inputIndex, input) {
    let result = false;
    if (input.nonWitnessUtxo || input.witnessUtxo) {
      const needScriptSig = !!input.redeemScript;
      const needWitnessScript = !!input.witnessScript;
      const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
      const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;
      const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;
      result = scriptSigOK && witnessScriptOK && hasOneFinal;
    }
    if (result === false) {
      throw new Error(
        `Input #${inputIndex} has too much or too little data to clean`
      );
    }
  }
  exports2.inputCheckUncleanFinalized = inputCheckUncleanFinalized;
  function throwForUpdateMaker(typeName2, name2, expected, data) {
    throw new Error(
      `Data for ${typeName2} key ${name2} is incorrect: Expected ${expected} and got ${JSON.stringify(data)}`
    );
  }
  function updateMaker(typeName2) {
    return (updateData, mainData) => {
      for (const name2 of Object.keys(updateData)) {
        const data = updateData[name2];
        const { canAdd: canAdd2, canAddToArray: canAddToArray2, check: check2, expected } = (
          // @ts-ignore
          converter$1[typeName2 + "s"][name2] || {}
        );
        const isArray = !!canAddToArray2;
        if (check2) {
          if (isArray) {
            if (!Array.isArray(data) || // @ts-ignore
            mainData[name2] && !Array.isArray(mainData[name2])) {
              throw new Error(`Key type ${name2} must be an array`);
            }
            if (!data.every(check2)) {
              throwForUpdateMaker(typeName2, name2, expected, data);
            }
            const arr = mainData[name2] || [];
            const dupeCheckSet = /* @__PURE__ */ new Set();
            if (!data.every((v2) => canAddToArray2(arr, v2, dupeCheckSet))) {
              throw new Error("Can not add duplicate data to array");
            }
            mainData[name2] = arr.concat(data);
          } else {
            if (!check2(data)) {
              throwForUpdateMaker(typeName2, name2, expected, data);
            }
            if (!canAdd2(mainData, data)) {
              throw new Error(`Can not add duplicate data to ${typeName2}`);
            }
            mainData[name2] = data;
          }
        }
      }
    };
  }
  exports2.updateGlobal = updateMaker("global");
  exports2.updateInput = updateMaker("input");
  exports2.updateOutput = updateMaker("output");
  function addInputAttributes(inputs2, data) {
    const index = inputs2.length - 1;
    const input = checkForInput(inputs2, index);
    exports2.updateInput(data, input);
  }
  exports2.addInputAttributes = addInputAttributes;
  function addOutputAttributes(outputs2, data) {
    const index = outputs2.length - 1;
    const output2 = checkForOutput(outputs2, index);
    exports2.updateOutput(data, output2);
  }
  exports2.addOutputAttributes = addOutputAttributes;
  function defaultVersionSetter(version2, txBuf) {
    if (!Buffer$3.isBuffer(txBuf) || txBuf.length < 4) {
      throw new Error("Set Version: Invalid Transaction");
    }
    txBuf.writeUInt32LE(version2, 0);
    return txBuf;
  }
  exports2.defaultVersionSetter = defaultVersionSetter;
  function defaultLocktimeSetter(locktime, txBuf) {
    if (!Buffer$3.isBuffer(txBuf) || txBuf.length < 4) {
      throw new Error("Set Locktime: Invalid Transaction");
    }
    txBuf.writeUInt32LE(locktime, txBuf.length - 4);
    return txBuf;
  }
  exports2.defaultLocktimeSetter = defaultLocktimeSetter;
})(utils$4);
Object.defineProperty(psbt, "__esModule", { value: true });
const combiner_1 = combiner;
const parser_1 = parser;
const typeFields_1 = typeFields;
const utils_1$2 = utils$4;
let Psbt$1 = class Psbt2 {
  constructor(tx) {
    this.inputs = [];
    this.outputs = [];
    this.globalMap = {
      unsignedTx: tx
    };
  }
  static fromBase64(data, txFromBuffer) {
    const buffer2 = Buffer$3.from(data, "base64");
    return this.fromBuffer(buffer2, txFromBuffer);
  }
  static fromHex(data, txFromBuffer) {
    const buffer2 = Buffer$3.from(data, "hex");
    return this.fromBuffer(buffer2, txFromBuffer);
  }
  static fromBuffer(buffer2, txFromBuffer) {
    const results = parser_1.psbtFromBuffer(buffer2, txFromBuffer);
    const psbt2 = new this(results.globalMap.unsignedTx);
    Object.assign(psbt2, results);
    return psbt2;
  }
  toBase64() {
    const buffer2 = this.toBuffer();
    return buffer2.toString("base64");
  }
  toHex() {
    const buffer2 = this.toBuffer();
    return buffer2.toString("hex");
  }
  toBuffer() {
    return parser_1.psbtToBuffer(this);
  }
  updateGlobal(updateData) {
    utils_1$2.updateGlobal(updateData, this.globalMap);
    return this;
  }
  updateInput(inputIndex, updateData) {
    const input = utils_1$2.checkForInput(this.inputs, inputIndex);
    utils_1$2.updateInput(updateData, input);
    return this;
  }
  updateOutput(outputIndex, updateData) {
    const output2 = utils_1$2.checkForOutput(this.outputs, outputIndex);
    utils_1$2.updateOutput(updateData, output2);
    return this;
  }
  addUnknownKeyValToGlobal(keyVal) {
    utils_1$2.checkHasKey(
      keyVal,
      this.globalMap.unknownKeyVals,
      utils_1$2.getEnumLength(typeFields_1.GlobalTypes)
    );
    if (!this.globalMap.unknownKeyVals) this.globalMap.unknownKeyVals = [];
    this.globalMap.unknownKeyVals.push(keyVal);
    return this;
  }
  addUnknownKeyValToInput(inputIndex, keyVal) {
    const input = utils_1$2.checkForInput(this.inputs, inputIndex);
    utils_1$2.checkHasKey(
      keyVal,
      input.unknownKeyVals,
      utils_1$2.getEnumLength(typeFields_1.InputTypes)
    );
    if (!input.unknownKeyVals) input.unknownKeyVals = [];
    input.unknownKeyVals.push(keyVal);
    return this;
  }
  addUnknownKeyValToOutput(outputIndex, keyVal) {
    const output2 = utils_1$2.checkForOutput(this.outputs, outputIndex);
    utils_1$2.checkHasKey(
      keyVal,
      output2.unknownKeyVals,
      utils_1$2.getEnumLength(typeFields_1.OutputTypes)
    );
    if (!output2.unknownKeyVals) output2.unknownKeyVals = [];
    output2.unknownKeyVals.push(keyVal);
    return this;
  }
  addInput(inputData) {
    this.globalMap.unsignedTx.addInput(inputData);
    this.inputs.push({
      unknownKeyVals: []
    });
    const addKeyVals = inputData.unknownKeyVals || [];
    const inputIndex = this.inputs.length - 1;
    if (!Array.isArray(addKeyVals)) {
      throw new Error("unknownKeyVals must be an Array");
    }
    addKeyVals.forEach(
      (keyVal) => this.addUnknownKeyValToInput(inputIndex, keyVal)
    );
    utils_1$2.addInputAttributes(this.inputs, inputData);
    return this;
  }
  addOutput(outputData) {
    this.globalMap.unsignedTx.addOutput(outputData);
    this.outputs.push({
      unknownKeyVals: []
    });
    const addKeyVals = outputData.unknownKeyVals || [];
    const outputIndex = this.outputs.length - 1;
    if (!Array.isArray(addKeyVals)) {
      throw new Error("unknownKeyVals must be an Array");
    }
    addKeyVals.forEach(
      (keyVal) => this.addUnknownKeyValToOutput(outputIndex, keyVal)
    );
    utils_1$2.addOutputAttributes(this.outputs, outputData);
    return this;
  }
  clearFinalizedInput(inputIndex) {
    const input = utils_1$2.checkForInput(this.inputs, inputIndex);
    utils_1$2.inputCheckUncleanFinalized(inputIndex, input);
    for (const key2 of Object.keys(input)) {
      if (![
        "witnessUtxo",
        "nonWitnessUtxo",
        "finalScriptSig",
        "finalScriptWitness",
        "unknownKeyVals"
      ].includes(key2)) {
        delete input[key2];
      }
    }
    return this;
  }
  combine(...those) {
    const result = combiner_1.combine([this].concat(those));
    Object.assign(this, result);
    return this;
  }
  getTransaction() {
    return this.globalMap.unsignedTx.toBuffer();
  }
};
psbt.Psbt = Psbt$1;
var bip371 = {};
var psbtutils = {};
Object.defineProperty(psbtutils, "__esModule", { value: true });
psbtutils.signatureBlocksAction = psbtutils.checkInputForSig = psbtutils.pubkeyInScript = psbtutils.pubkeyPositionInScript = psbtutils.witnessStackToScriptWitness = psbtutils.isP2TR = psbtutils.isP2SHScript = psbtutils.isP2WSHScript = psbtutils.isP2WPKH = psbtutils.isP2PKH = psbtutils.isP2PK = psbtutils.isP2MS = void 0;
const varuint$1 = varint;
const bscript$1 = requireScript();
const transaction_1$2 = transaction;
const crypto_1 = crypto$5;
const payments$1 = requirePayments();
function isPaymentFactory$1(payment) {
  return (script2) => {
    try {
      payment({ output: script2 });
      return true;
    } catch (err) {
      return false;
    }
  };
}
psbtutils.isP2MS = isPaymentFactory$1(payments$1.p2ms);
psbtutils.isP2PK = isPaymentFactory$1(payments$1.p2pk);
psbtutils.isP2PKH = isPaymentFactory$1(payments$1.p2pkh);
psbtutils.isP2WPKH = isPaymentFactory$1(payments$1.p2wpkh);
psbtutils.isP2WSHScript = isPaymentFactory$1(payments$1.p2wsh);
psbtutils.isP2SHScript = isPaymentFactory$1(payments$1.p2sh);
psbtutils.isP2TR = isPaymentFactory$1(payments$1.p2tr);
function witnessStackToScriptWitness(witness) {
  let buffer2 = Buffer$3.allocUnsafe(0);
  function writeSlice(slice) {
    buffer2 = Buffer$3.concat([buffer2, Buffer$3.from(slice)]);
  }
  function writeVarInt(i2) {
    const currentLen = buffer2.length;
    const varintLen = varuint$1.encodingLength(i2);
    buffer2 = Buffer$3.concat([buffer2, Buffer$3.allocUnsafe(varintLen)]);
    varuint$1.encode(i2, buffer2, currentLen);
  }
  function writeVarSlice(slice) {
    writeVarInt(slice.length);
    writeSlice(slice);
  }
  function writeVector(vector) {
    writeVarInt(vector.length);
    vector.forEach(writeVarSlice);
  }
  writeVector(witness);
  return buffer2;
}
psbtutils.witnessStackToScriptWitness = witnessStackToScriptWitness;
function pubkeyPositionInScript(pubkey, script2) {
  const pubkeyHash = (0, crypto_1.hash160)(pubkey);
  const pubkeyXOnly = pubkey.slice(1, 33);
  const decompiled = bscript$1.decompile(script2);
  if (decompiled === null) throw new Error("Unknown script error");
  return decompiled.findIndex((element) => {
    if (typeof element === "number") return false;
    return element.equals(pubkey) || element.equals(pubkeyHash) || element.equals(pubkeyXOnly);
  });
}
psbtutils.pubkeyPositionInScript = pubkeyPositionInScript;
function pubkeyInScript(pubkey, script2) {
  return pubkeyPositionInScript(pubkey, script2) !== -1;
}
psbtutils.pubkeyInScript = pubkeyInScript;
function checkInputForSig(input, action) {
  const pSigs = extractPartialSigs(input);
  return pSigs.some(
    (pSig) => signatureBlocksAction(pSig, bscript$1.signature.decode, action)
  );
}
psbtutils.checkInputForSig = checkInputForSig;
function signatureBlocksAction(signature2, signatureDecodeFn, action) {
  const { hashType } = signatureDecodeFn(signature2);
  const whitelist = [];
  const isAnyoneCanPay = hashType & transaction_1$2.Transaction.SIGHASH_ANYONECANPAY;
  if (isAnyoneCanPay) whitelist.push("addInput");
  const hashMod = hashType & 31;
  switch (hashMod) {
    case transaction_1$2.Transaction.SIGHASH_ALL:
      break;
    case transaction_1$2.Transaction.SIGHASH_SINGLE:
    case transaction_1$2.Transaction.SIGHASH_NONE:
      whitelist.push("addOutput");
      whitelist.push("setInputSequence");
      break;
  }
  if (whitelist.indexOf(action) === -1) {
    return true;
  }
  return false;
}
psbtutils.signatureBlocksAction = signatureBlocksAction;
function extractPartialSigs(input) {
  let pSigs = [];
  if ((input.partialSig || []).length === 0) {
    if (!input.finalScriptSig && !input.finalScriptWitness) return [];
    pSigs = getPsigsFromInputFinalScripts(input);
  } else {
    pSigs = input.partialSig;
  }
  return pSigs.map((p2) => p2.signature);
}
function getPsigsFromInputFinalScripts(input) {
  const scriptItems = !input.finalScriptSig ? [] : bscript$1.decompile(input.finalScriptSig) || [];
  const witnessItems = !input.finalScriptWitness ? [] : bscript$1.decompile(input.finalScriptWitness) || [];
  return scriptItems.concat(witnessItems).filter((item) => {
    return Buffer$3.isBuffer(item) && bscript$1.isCanonicalScriptSignature(item);
  }).map((sig) => ({ signature: sig }));
}
Object.defineProperty(bip371, "__esModule", { value: true });
bip371.checkTaprootInputForSigs = bip371.tapTreeFromList = bip371.tapTreeToList = bip371.tweakInternalPubKey = bip371.checkTaprootOutputFields = bip371.checkTaprootInputFields = bip371.isTaprootOutput = bip371.isTaprootInput = bip371.serializeTaprootSignature = bip371.tapScriptFinalizer = bip371.toXOnly = void 0;
const types_1 = types$7;
const transaction_1$1 = transaction;
const psbtutils_1$1 = psbtutils;
const bip341_1$1 = bip341;
const payments_1 = requirePayments();
const psbtutils_2 = psbtutils;
const toXOnly$2 = (pubKey) => pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
bip371.toXOnly = toXOnly$2;
function tapScriptFinalizer(inputIndex, input, tapLeafHashToFinalize) {
  const tapLeaf = findTapLeafToFinalize(
    input,
    inputIndex,
    tapLeafHashToFinalize
  );
  try {
    const sigs = sortSignatures(input, tapLeaf);
    const witness = sigs.concat(tapLeaf.script).concat(tapLeaf.controlBlock);
    return {
      finalScriptWitness: (0, psbtutils_1$1.witnessStackToScriptWitness)(witness)
    };
  } catch (err) {
    throw new Error(`Can not finalize taproot input #${inputIndex}: ${err}`);
  }
}
bip371.tapScriptFinalizer = tapScriptFinalizer;
function serializeTaprootSignature(sig, sighashType2) {
  const sighashTypeByte = sighashType2 ? Buffer$3.from([sighashType2]) : Buffer$3.from([]);
  return Buffer$3.concat([sig, sighashTypeByte]);
}
bip371.serializeTaprootSignature = serializeTaprootSignature;
function isTaprootInput(input) {
  return input && !!(input.tapInternalKey || input.tapMerkleRoot || input.tapLeafScript && input.tapLeafScript.length || input.tapBip32Derivation && input.tapBip32Derivation.length || input.witnessUtxo && (0, psbtutils_1$1.isP2TR)(input.witnessUtxo.script));
}
bip371.isTaprootInput = isTaprootInput;
function isTaprootOutput(output2, script2) {
  return output2 && !!(output2.tapInternalKey || output2.tapTree || output2.tapBip32Derivation && output2.tapBip32Derivation.length || script2 && (0, psbtutils_1$1.isP2TR)(script2));
}
bip371.isTaprootOutput = isTaprootOutput;
function checkTaprootInputFields(inputData, newInputData, action) {
  checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action);
  checkIfTapLeafInTree(inputData, newInputData, action);
}
bip371.checkTaprootInputFields = checkTaprootInputFields;
function checkTaprootOutputFields(outputData, newOutputData, action) {
  checkMixedTaprootAndNonTaprootOutputFields(outputData, newOutputData, action);
  checkTaprootScriptPubkey(outputData, newOutputData);
}
bip371.checkTaprootOutputFields = checkTaprootOutputFields;
function checkTaprootScriptPubkey(outputData, newOutputData) {
  if (!newOutputData.tapTree && !newOutputData.tapInternalKey) return;
  const tapInternalKey2 = newOutputData.tapInternalKey || outputData.tapInternalKey;
  const tapTree2 = newOutputData.tapTree || outputData.tapTree;
  if (tapInternalKey2) {
    const { script: scriptPubkey } = outputData;
    const script2 = getTaprootScripPubkey(tapInternalKey2, tapTree2);
    if (scriptPubkey && !scriptPubkey.equals(script2))
      throw new Error("Error adding output. Script or address missmatch.");
  }
}
function getTaprootScripPubkey(tapInternalKey2, tapTree2) {
  const scriptTree = tapTree2 && tapTreeFromList(tapTree2.leaves);
  const { output: output2 } = (0, payments_1.p2tr)({
    internalPubkey: tapInternalKey2,
    scriptTree
  });
  return output2;
}
function tweakInternalPubKey(inputIndex, input) {
  const tapInternalKey2 = input.tapInternalKey;
  const outputKey = tapInternalKey2 && (0, bip341_1$1.tweakKey)(tapInternalKey2, input.tapMerkleRoot);
  if (!outputKey)
    throw new Error(
      `Cannot tweak tap internal key for input #${inputIndex}. Public key: ${tapInternalKey2 && tapInternalKey2.toString("hex")}`
    );
  return outputKey.x;
}
bip371.tweakInternalPubKey = tweakInternalPubKey;
function tapTreeToList(tree) {
  if (!(0, types_1.isTaptree)(tree))
    throw new Error(
      "Cannot convert taptree to tapleaf list. Expecting a tapree structure."
    );
  return _tapTreeToList(tree);
}
bip371.tapTreeToList = tapTreeToList;
function tapTreeFromList(leaves = []) {
  if (leaves.length === 1 && leaves[0].depth === 0)
    return {
      output: leaves[0].script,
      version: leaves[0].leafVersion
    };
  return instertLeavesInTree(leaves);
}
bip371.tapTreeFromList = tapTreeFromList;
function checkTaprootInputForSigs(input, action) {
  const sigs = extractTaprootSigs(input);
  return sigs.some(
    (sig) => (0, psbtutils_2.signatureBlocksAction)(sig, decodeSchnorrSignature, action)
  );
}
bip371.checkTaprootInputForSigs = checkTaprootInputForSigs;
function decodeSchnorrSignature(signature2) {
  return {
    signature: signature2.slice(0, 64),
    hashType: signature2.slice(64)[0] || transaction_1$1.Transaction.SIGHASH_DEFAULT
  };
}
function extractTaprootSigs(input) {
  const sigs = [];
  if (input.tapKeySig) sigs.push(input.tapKeySig);
  if (input.tapScriptSig)
    sigs.push(...input.tapScriptSig.map((s2) => s2.signature));
  if (!sigs.length) {
    const finalTapKeySig = getTapKeySigFromWithness(input.finalScriptWitness);
    if (finalTapKeySig) sigs.push(finalTapKeySig);
  }
  return sigs;
}
function getTapKeySigFromWithness(finalScriptWitness2) {
  if (!finalScriptWitness2) return;
  const witness = finalScriptWitness2.slice(2);
  if (witness.length === 64 || witness.length === 65) return witness;
}
function _tapTreeToList(tree, leaves = [], depth = 0) {
  if (depth > bip341_1$1.MAX_TAPTREE_DEPTH)
    throw new Error("Max taptree depth exceeded.");
  if (!tree) return [];
  if ((0, types_1.isTapleaf)(tree)) {
    leaves.push({
      depth,
      leafVersion: tree.version || bip341_1$1.LEAF_VERSION_TAPSCRIPT,
      script: tree.output
    });
    return leaves;
  }
  if (tree[0]) _tapTreeToList(tree[0], leaves, depth + 1);
  if (tree[1]) _tapTreeToList(tree[1], leaves, depth + 1);
  return leaves;
}
function instertLeavesInTree(leaves) {
  let tree;
  for (const leaf of leaves) {
    tree = instertLeafInTree(leaf, tree);
    if (!tree) throw new Error(`No room left to insert tapleaf in tree`);
  }
  return tree;
}
function instertLeafInTree(leaf, tree, depth = 0) {
  if (depth > bip341_1$1.MAX_TAPTREE_DEPTH)
    throw new Error("Max taptree depth exceeded.");
  if (leaf.depth === depth) {
    if (!tree)
      return {
        output: leaf.script,
        version: leaf.leafVersion
      };
    return;
  }
  if ((0, types_1.isTapleaf)(tree)) return;
  const leftSide = instertLeafInTree(leaf, tree && tree[0], depth + 1);
  if (leftSide) return [leftSide, tree && tree[1]];
  const rightSide = instertLeafInTree(leaf, tree && tree[1], depth + 1);
  if (rightSide) return [tree && tree[0], rightSide];
}
function checkMixedTaprootAndNonTaprootInputFields(inputData, newInputData, action) {
  const isBadTaprootUpdate = isTaprootInput(inputData) && hasNonTaprootFields(newInputData);
  const isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootInput(newInputData);
  const hasMixedFields = inputData === newInputData && isTaprootInput(newInputData) && hasNonTaprootFields(newInputData);
  if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields)
    throw new Error(
      `Invalid arguments for Psbt.${action}. Cannot use both taproot and non-taproot fields.`
    );
}
function checkMixedTaprootAndNonTaprootOutputFields(inputData, newInputData, action) {
  const isBadTaprootUpdate = isTaprootOutput(inputData) && hasNonTaprootFields(newInputData);
  const isBadNonTaprootUpdate = hasNonTaprootFields(inputData) && isTaprootOutput(newInputData);
  const hasMixedFields = inputData === newInputData && isTaprootOutput(newInputData) && hasNonTaprootFields(newInputData);
  if (isBadTaprootUpdate || isBadNonTaprootUpdate || hasMixedFields)
    throw new Error(
      `Invalid arguments for Psbt.${action}. Cannot use both taproot and non-taproot fields.`
    );
}
function checkIfTapLeafInTree(inputData, newInputData, action) {
  if (newInputData.tapMerkleRoot) {
    const newLeafsInTree = (newInputData.tapLeafScript || []).every(
      (l2) => isTapLeafInTree(l2, newInputData.tapMerkleRoot)
    );
    const oldLeafsInTree = (inputData.tapLeafScript || []).every(
      (l2) => isTapLeafInTree(l2, newInputData.tapMerkleRoot)
    );
    if (!newLeafsInTree || !oldLeafsInTree)
      throw new Error(
        `Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`
      );
  } else if (inputData.tapMerkleRoot) {
    const newLeafsInTree = (newInputData.tapLeafScript || []).every(
      (l2) => isTapLeafInTree(l2, inputData.tapMerkleRoot)
    );
    if (!newLeafsInTree)
      throw new Error(
        `Invalid arguments for Psbt.${action}. Tapleaf not part of taptree.`
      );
  }
}
function isTapLeafInTree(tapLeaf, merkleRoot) {
  if (!merkleRoot) return true;
  const leafHash = (0, bip341_1$1.tapleafHash)({
    output: tapLeaf.script,
    version: tapLeaf.leafVersion
  });
  const rootHash = (0, bip341_1$1.rootHashFromPath)(
    tapLeaf.controlBlock,
    leafHash
  );
  return rootHash.equals(merkleRoot);
}
function sortSignatures(input, tapLeaf) {
  const leafHash = (0, bip341_1$1.tapleafHash)({
    output: tapLeaf.script,
    version: tapLeaf.leafVersion
  });
  return (input.tapScriptSig || []).filter((tss) => tss.leafHash.equals(leafHash)).map((tss) => addPubkeyPositionInScript(tapLeaf.script, tss)).sort((t1, t2) => t2.positionInScript - t1.positionInScript).map((t2) => t2.signature);
}
function addPubkeyPositionInScript(script2, tss) {
  return Object.assign(
    {
      positionInScript: (0, psbtutils_1$1.pubkeyPositionInScript)(
        tss.pubkey,
        script2
      )
    },
    tss
  );
}
function findTapLeafToFinalize(input, inputIndex, leafHashToFinalize) {
  if (!input.tapScriptSig || !input.tapScriptSig.length)
    throw new Error(
      `Can not finalize taproot input #${inputIndex}. No tapleaf script signature provided.`
    );
  const tapLeaf = (input.tapLeafScript || []).sort((a2, b2) => a2.controlBlock.length - b2.controlBlock.length).find(
    (leaf) => canFinalizeLeaf(leaf, input.tapScriptSig, leafHashToFinalize)
  );
  if (!tapLeaf)
    throw new Error(
      `Can not finalize taproot input #${inputIndex}. Signature for tapleaf script not found.`
    );
  return tapLeaf;
}
function canFinalizeLeaf(leaf, tapScriptSig2, hash2) {
  const leafHash = (0, bip341_1$1.tapleafHash)({
    output: leaf.script,
    version: leaf.leafVersion
  });
  const whiteListedHash = !hash2 || hash2.equals(leafHash);
  return whiteListedHash && tapScriptSig2.find((tss) => tss.leafHash.equals(leafHash)) !== void 0;
}
function hasNonTaprootFields(io) {
  return io && !!(io.redeemScript || io.witnessScript || io.bip32Derivation && io.bip32Derivation.length);
}
Object.defineProperty(psbt$1, "__esModule", { value: true });
psbt$1.Psbt = void 0;
const bip174_1 = psbt;
const varuint = varint;
const utils_1$1 = utils$4;
const address_1 = requireAddress();
const bufferutils_1 = bufferutils;
const networks_1 = networks$2;
const payments = requirePayments();
const bip341_1 = bip341;
const bscript = requireScript();
const transaction_1 = transaction;
const bip371_1 = bip371;
const psbtutils_1 = psbtutils;
const DEFAULT_OPTS = {
  /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */
  network: networks_1.bitcoin,
  /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */
  maximumFeeRate: 5e3
  // satoshi per byte
};
class Psbt {
  static fromBase64(data, opts = {}) {
    const buffer2 = Buffer$3.from(data, "base64");
    return this.fromBuffer(buffer2, opts);
  }
  static fromHex(data, opts = {}) {
    const buffer2 = Buffer$3.from(data, "hex");
    return this.fromBuffer(buffer2, opts);
  }
  static fromBuffer(buffer2, opts = {}) {
    const psbtBase = bip174_1.Psbt.fromBuffer(buffer2, transactionFromBuffer);
    const psbt2 = new Psbt(opts, psbtBase);
    checkTxForDupeIns(psbt2.__CACHE.__TX, psbt2.__CACHE);
    return psbt2;
  }
  constructor(opts = {}, data = new bip174_1.Psbt(new PsbtTransaction())) {
    this.data = data;
    this.opts = Object.assign({}, DEFAULT_OPTS, opts);
    this.__CACHE = {
      __NON_WITNESS_UTXO_TX_CACHE: [],
      __NON_WITNESS_UTXO_BUF_CACHE: [],
      __TX_IN_CACHE: {},
      __TX: this.data.globalMap.unsignedTx.tx,
      // Psbt's predecessor (TransactionBuilder - now removed) behavior
      // was to not confirm input values  before signing.
      // Even though we highly encourage people to get
      // the full parent transaction to verify values, the ability to
      // sign non-segwit inputs without the full transaction was often
      // requested. So the only way to activate is to use @ts-ignore.
      // We will disable exporting the Psbt when unsafe sign is active.
      // because it is not BIP174 compliant.
      __UNSAFE_SIGN_NONSEGWIT: false
    };
    if (this.data.inputs.length === 0) this.setVersion(2);
    const dpew = (obj, attr, enumerable, writable) => Object.defineProperty(obj, attr, {
      enumerable,
      writable
    });
    dpew(this, "__CACHE", false, true);
    dpew(this, "opts", false, true);
  }
  get inputCount() {
    return this.data.inputs.length;
  }
  get version() {
    return this.__CACHE.__TX.version;
  }
  set version(version2) {
    this.setVersion(version2);
  }
  get locktime() {
    return this.__CACHE.__TX.locktime;
  }
  set locktime(locktime) {
    this.setLocktime(locktime);
  }
  get txInputs() {
    return this.__CACHE.__TX.ins.map((input) => ({
      hash: (0, bufferutils_1.cloneBuffer)(input.hash),
      index: input.index,
      sequence: input.sequence
    }));
  }
  get txOutputs() {
    return this.__CACHE.__TX.outs.map((output2) => {
      let address2;
      try {
        address2 = (0, address_1.fromOutputScript)(
          output2.script,
          this.opts.network
        );
      } catch (_2) {
      }
      return {
        script: (0, bufferutils_1.cloneBuffer)(output2.script),
        value: output2.value,
        address: address2
      };
    });
  }
  combine(...those) {
    this.data.combine(...those.map((o3) => o3.data));
    return this;
  }
  clone() {
    const res = Psbt.fromBuffer(this.data.toBuffer());
    res.opts = JSON.parse(JSON.stringify(this.opts));
    return res;
  }
  setMaximumFeeRate(satoshiPerByte) {
    check32Bit(satoshiPerByte);
    this.opts.maximumFeeRate = satoshiPerByte;
  }
  setVersion(version2) {
    check32Bit(version2);
    checkInputsForPartialSig(this.data.inputs, "setVersion");
    const c2 = this.__CACHE;
    c2.__TX.version = version2;
    c2.__EXTRACTED_TX = void 0;
    return this;
  }
  setLocktime(locktime) {
    check32Bit(locktime);
    checkInputsForPartialSig(this.data.inputs, "setLocktime");
    const c2 = this.__CACHE;
    c2.__TX.locktime = locktime;
    c2.__EXTRACTED_TX = void 0;
    return this;
  }
  setInputSequence(inputIndex, sequence) {
    check32Bit(sequence);
    checkInputsForPartialSig(this.data.inputs, "setInputSequence");
    const c2 = this.__CACHE;
    if (c2.__TX.ins.length <= inputIndex) {
      throw new Error("Input index too high");
    }
    c2.__TX.ins[inputIndex].sequence = sequence;
    c2.__EXTRACTED_TX = void 0;
    return this;
  }
  addInputs(inputDatas) {
    inputDatas.forEach((inputData) => this.addInput(inputData));
    return this;
  }
  addInput(inputData) {
    if (arguments.length > 1 || !inputData || inputData.hash === void 0 || inputData.index === void 0) {
      throw new Error(
        `Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]`
      );
    }
    (0, bip371_1.checkTaprootInputFields)(inputData, inputData, "addInput");
    checkInputsForPartialSig(this.data.inputs, "addInput");
    if (inputData.witnessScript) checkInvalidP2WSH(inputData.witnessScript);
    const c2 = this.__CACHE;
    this.data.addInput(inputData);
    const txIn = c2.__TX.ins[c2.__TX.ins.length - 1];
    checkTxInputCache(c2, txIn);
    const inputIndex = this.data.inputs.length - 1;
    const input = this.data.inputs[inputIndex];
    if (input.nonWitnessUtxo) {
      addNonWitnessTxCache(this.__CACHE, input, inputIndex);
    }
    c2.__FEE = void 0;
    c2.__FEE_RATE = void 0;
    c2.__EXTRACTED_TX = void 0;
    return this;
  }
  addOutputs(outputDatas) {
    outputDatas.forEach((outputData) => this.addOutput(outputData));
    return this;
  }
  addOutput(outputData) {
    if (arguments.length > 1 || !outputData || outputData.value === void 0 || outputData.address === void 0 && outputData.script === void 0) {
      throw new Error(
        `Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]`
      );
    }
    checkInputsForPartialSig(this.data.inputs, "addOutput");
    const { address: address2 } = outputData;
    if (typeof address2 === "string") {
      const { network } = this.opts;
      const script2 = (0, address_1.toOutputScript)(address2, network);
      outputData = Object.assign({}, outputData, { script: script2 });
    }
    (0, bip371_1.checkTaprootOutputFields)(outputData, outputData, "addOutput");
    const c2 = this.__CACHE;
    this.data.addOutput(outputData);
    c2.__FEE = void 0;
    c2.__FEE_RATE = void 0;
    c2.__EXTRACTED_TX = void 0;
    return this;
  }
  extractTransaction(disableFeeCheck) {
    if (!this.data.inputs.every(isFinalized)) throw new Error("Not finalized");
    const c2 = this.__CACHE;
    if (!disableFeeCheck) {
      checkFees(this, c2, this.opts);
    }
    if (c2.__EXTRACTED_TX) return c2.__EXTRACTED_TX;
    const tx = c2.__TX.clone();
    inputFinalizeGetAmts(this.data.inputs, tx, c2, true);
    return tx;
  }
  getFeeRate() {
    return getTxCacheValue(
      "__FEE_RATE",
      "fee rate",
      this.data.inputs,
      this.__CACHE
    );
  }
  getFee() {
    return getTxCacheValue("__FEE", "fee", this.data.inputs, this.__CACHE);
  }
  finalizeAllInputs() {
    (0, utils_1$1.checkForInput)(this.data.inputs, 0);
    range$1(this.data.inputs.length).forEach((idx) => this.finalizeInput(idx));
    return this;
  }
  finalizeInput(inputIndex, finalScriptsFunc) {
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    if ((0, bip371_1.isTaprootInput)(input))
      return this._finalizeTaprootInput(
        inputIndex,
        input,
        void 0,
        finalScriptsFunc
      );
    return this._finalizeInput(inputIndex, input, finalScriptsFunc);
  }
  finalizeTaprootInput(inputIndex, tapLeafHashToFinalize, finalScriptsFunc = bip371_1.tapScriptFinalizer) {
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    if ((0, bip371_1.isTaprootInput)(input))
      return this._finalizeTaprootInput(
        inputIndex,
        input,
        tapLeafHashToFinalize,
        finalScriptsFunc
      );
    throw new Error(`Cannot finalize input #${inputIndex}. Not Taproot.`);
  }
  _finalizeInput(inputIndex, input, finalScriptsFunc = getFinalScripts) {
    const { script: script2, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(
      inputIndex,
      input,
      this.__CACHE
    );
    if (!script2) throw new Error(`No script found for input #${inputIndex}`);
    checkPartialSigSighashes(input);
    const { finalScriptSig: finalScriptSig2, finalScriptWitness: finalScriptWitness2 } = finalScriptsFunc(
      inputIndex,
      input,
      script2,
      isSegwit,
      isP2SH,
      isP2WSH
    );
    if (finalScriptSig2) this.data.updateInput(inputIndex, { finalScriptSig: finalScriptSig2 });
    if (finalScriptWitness2)
      this.data.updateInput(inputIndex, { finalScriptWitness: finalScriptWitness2 });
    if (!finalScriptSig2 && !finalScriptWitness2)
      throw new Error(`Unknown error finalizing input #${inputIndex}`);
    this.data.clearFinalizedInput(inputIndex);
    return this;
  }
  _finalizeTaprootInput(inputIndex, input, tapLeafHashToFinalize, finalScriptsFunc = bip371_1.tapScriptFinalizer) {
    if (!input.witnessUtxo)
      throw new Error(
        `Cannot finalize input #${inputIndex}. Missing withness utxo.`
      );
    if (input.tapKeySig) {
      const payment = payments.p2tr({
        output: input.witnessUtxo.script,
        signature: input.tapKeySig
      });
      const finalScriptWitness2 = (0, psbtutils_1.witnessStackToScriptWitness)(
        payment.witness
      );
      this.data.updateInput(inputIndex, { finalScriptWitness: finalScriptWitness2 });
    } else {
      const { finalScriptWitness: finalScriptWitness2 } = finalScriptsFunc(
        inputIndex,
        input,
        tapLeafHashToFinalize
      );
      this.data.updateInput(inputIndex, { finalScriptWitness: finalScriptWitness2 });
    }
    this.data.clearFinalizedInput(inputIndex);
    return this;
  }
  getInputType(inputIndex) {
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    const script2 = getScriptFromUtxo(inputIndex, input, this.__CACHE);
    const result = getMeaningfulScript(
      script2,
      inputIndex,
      "input",
      input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig),
      input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness)
    );
    const type2 = result.type === "raw" ? "" : result.type + "-";
    const mainType = classifyScript(result.meaningfulScript);
    return type2 + mainType;
  }
  inputHasPubkey(inputIndex, pubkey) {
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);
  }
  inputHasHDKey(inputIndex, root2) {
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    const derivationIsMine = bip32DerivationIsMine(root2);
    return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);
  }
  outputHasPubkey(outputIndex, pubkey) {
    const output2 = (0, utils_1$1.checkForOutput)(this.data.outputs, outputIndex);
    return pubkeyInOutput(pubkey, output2, outputIndex, this.__CACHE);
  }
  outputHasHDKey(outputIndex, root2) {
    const output2 = (0, utils_1$1.checkForOutput)(this.data.outputs, outputIndex);
    const derivationIsMine = bip32DerivationIsMine(root2);
    return !!output2.bip32Derivation && output2.bip32Derivation.some(derivationIsMine);
  }
  validateSignaturesOfAllInputs(validator) {
    (0, utils_1$1.checkForInput)(this.data.inputs, 0);
    const results = range$1(this.data.inputs.length).map(
      (idx) => this.validateSignaturesOfInput(idx, validator)
    );
    return results.reduce((final, res) => res === true && final, true);
  }
  validateSignaturesOfInput(inputIndex, validator, pubkey) {
    const input = this.data.inputs[inputIndex];
    if ((0, bip371_1.isTaprootInput)(input))
      return this.validateSignaturesOfTaprootInput(
        inputIndex,
        validator,
        pubkey
      );
    return this._validateSignaturesOfInput(inputIndex, validator, pubkey);
  }
  _validateSignaturesOfInput(inputIndex, validator, pubkey) {
    const input = this.data.inputs[inputIndex];
    const partialSig2 = (input || {}).partialSig;
    if (!input || !partialSig2 || partialSig2.length < 1)
      throw new Error("No signatures to validate");
    if (typeof validator !== "function")
      throw new Error("Need validator function to validate signatures");
    const mySigs = pubkey ? partialSig2.filter((sig) => sig.pubkey.equals(pubkey)) : partialSig2;
    if (mySigs.length < 1) throw new Error("No signatures for this pubkey");
    const results = [];
    let hashCache;
    let scriptCache;
    let sighashCache;
    for (const pSig of mySigs) {
      const sig = bscript.signature.decode(pSig.signature);
      const { hash: hash2, script: script2 } = sighashCache !== sig.hashType ? getHashForSig(
        inputIndex,
        Object.assign({}, input, { sighashType: sig.hashType }),
        this.__CACHE,
        true
      ) : { hash: hashCache, script: scriptCache };
      sighashCache = sig.hashType;
      hashCache = hash2;
      scriptCache = script2;
      checkScriptForPubkey(pSig.pubkey, script2, "verify");
      results.push(validator(pSig.pubkey, hash2, sig.signature));
    }
    return results.every((res) => res === true);
  }
  validateSignaturesOfTaprootInput(inputIndex, validator, pubkey) {
    const input = this.data.inputs[inputIndex];
    const tapKeySig2 = (input || {}).tapKeySig;
    const tapScriptSig2 = (input || {}).tapScriptSig;
    if (!input && !tapKeySig2 && !(tapScriptSig2 && !tapScriptSig2.length))
      throw new Error("No signatures to validate");
    if (typeof validator !== "function")
      throw new Error("Need validator function to validate signatures");
    pubkey = pubkey && (0, bip371_1.toXOnly)(pubkey);
    const allHashses = pubkey ? getTaprootHashesForSig(
      inputIndex,
      input,
      this.data.inputs,
      pubkey,
      this.__CACHE
    ) : getAllTaprootHashesForSig(
      inputIndex,
      input,
      this.data.inputs,
      this.__CACHE
    );
    if (!allHashses.length) throw new Error("No signatures for this pubkey");
    const tapKeyHash = allHashses.find((h2) => !h2.leafHash);
    let validationResultCount = 0;
    if (tapKeySig2 && tapKeyHash) {
      const isValidTapkeySig = validator(
        tapKeyHash.pubkey,
        tapKeyHash.hash,
        trimTaprootSig(tapKeySig2)
      );
      if (!isValidTapkeySig) return false;
      validationResultCount++;
    }
    if (tapScriptSig2) {
      for (const tapSig of tapScriptSig2) {
        const tapSigHash = allHashses.find((h2) => tapSig.pubkey.equals(h2.pubkey));
        if (tapSigHash) {
          const isValidTapScriptSig = validator(
            tapSig.pubkey,
            tapSigHash.hash,
            trimTaprootSig(tapSig.signature)
          );
          if (!isValidTapScriptSig) return false;
          validationResultCount++;
        }
      }
    }
    return validationResultCount > 0;
  }
  signAllInputsHD(hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
    if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
      throw new Error("Need HDSigner to sign input");
    }
    const results = [];
    for (const i2 of range$1(this.data.inputs.length)) {
      try {
        this.signInputHD(i2, hdKeyPair, sighashTypes);
        results.push(true);
      } catch (err) {
        results.push(false);
      }
    }
    if (results.every((v2) => v2 === false)) {
      throw new Error("No inputs were signed");
    }
    return this;
  }
  signAllInputsHDAsync(hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
    return new Promise((resolve, reject) => {
      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
        return reject(new Error("Need HDSigner to sign input"));
      }
      const results = [];
      const promises = [];
      for (const i2 of range$1(this.data.inputs.length)) {
        promises.push(
          this.signInputHDAsync(i2, hdKeyPair, sighashTypes).then(
            () => {
              results.push(true);
            },
            () => {
              results.push(false);
            }
          )
        );
      }
      return Promise.all(promises).then(() => {
        if (results.every((v2) => v2 === false)) {
          return reject(new Error("No inputs were signed"));
        }
        resolve();
      });
    });
  }
  signInputHD(inputIndex, hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
    if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
      throw new Error("Need HDSigner to sign input");
    }
    const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
    signers.forEach((signer2) => this.signInput(inputIndex, signer2, sighashTypes));
    return this;
  }
  signInputHDAsync(inputIndex, hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
    return new Promise((resolve, reject) => {
      if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
        return reject(new Error("Need HDSigner to sign input"));
      }
      const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
      const promises = signers.map(
        (signer2) => this.signInputAsync(inputIndex, signer2, sighashTypes)
      );
      return Promise.all(promises).then(() => {
        resolve();
      }).catch(reject);
    });
  }
  signAllInputs(keyPair, sighashTypes) {
    if (!keyPair || !keyPair.publicKey)
      throw new Error("Need Signer to sign input");
    const results = [];
    for (const i2 of range$1(this.data.inputs.length)) {
      try {
        this.signInput(i2, keyPair, sighashTypes);
        results.push(true);
      } catch (err) {
        results.push(false);
      }
    }
    if (results.every((v2) => v2 === false)) {
      throw new Error("No inputs were signed");
    }
    return this;
  }
  signAllInputsAsync(keyPair, sighashTypes) {
    return new Promise((resolve, reject) => {
      if (!keyPair || !keyPair.publicKey)
        return reject(new Error("Need Signer to sign input"));
      const results = [];
      const promises = [];
      for (const [i2] of this.data.inputs.entries()) {
        promises.push(
          this.signInputAsync(i2, keyPair, sighashTypes).then(
            () => {
              results.push(true);
            },
            () => {
              results.push(false);
            }
          )
        );
      }
      return Promise.all(promises).then(() => {
        if (results.every((v2) => v2 === false)) {
          return reject(new Error("No inputs were signed"));
        }
        resolve();
      });
    });
  }
  signInput(inputIndex, keyPair, sighashTypes) {
    if (!keyPair || !keyPair.publicKey)
      throw new Error("Need Signer to sign input");
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    if ((0, bip371_1.isTaprootInput)(input)) {
      return this._signTaprootInput(
        inputIndex,
        input,
        keyPair,
        void 0,
        sighashTypes
      );
    }
    return this._signInput(inputIndex, keyPair, sighashTypes);
  }
  signTaprootInput(inputIndex, keyPair, tapLeafHashToSign, sighashTypes) {
    if (!keyPair || !keyPair.publicKey)
      throw new Error("Need Signer to sign input");
    const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
    if ((0, bip371_1.isTaprootInput)(input))
      return this._signTaprootInput(
        inputIndex,
        input,
        keyPair,
        tapLeafHashToSign,
        sighashTypes
      );
    throw new Error(`Input #${inputIndex} is not of type Taproot.`);
  }
  _signInput(inputIndex, keyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
    const { hash: hash2, sighashType: sighashType2 } = getHashAndSighashType(
      this.data.inputs,
      inputIndex,
      keyPair.publicKey,
      this.__CACHE,
      sighashTypes
    );
    const partialSig2 = [
      {
        pubkey: keyPair.publicKey,
        signature: bscript.signature.encode(keyPair.sign(hash2), sighashType2)
      }
    ];
    this.data.updateInput(inputIndex, { partialSig: partialSig2 });
    return this;
  }
  _signTaprootInput(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes = [transaction_1.Transaction.SIGHASH_DEFAULT]) {
    const hashesForSig = this.checkTaprootHashesForSig(
      inputIndex,
      input,
      keyPair,
      tapLeafHashToSign,
      allowedSighashTypes
    );
    const tapKeySig2 = hashesForSig.filter((h2) => !h2.leafHash).map(
      (h2) => (0, bip371_1.serializeTaprootSignature)(
        keyPair.signSchnorr(h2.hash),
        input.sighashType
      )
    )[0];
    const tapScriptSig2 = hashesForSig.filter((h2) => !!h2.leafHash).map((h2) => ({
      pubkey: (0, bip371_1.toXOnly)(keyPair.publicKey),
      signature: (0, bip371_1.serializeTaprootSignature)(
        keyPair.signSchnorr(h2.hash),
        input.sighashType
      ),
      leafHash: h2.leafHash
    }));
    if (tapKeySig2) {
      this.data.updateInput(inputIndex, { tapKeySig: tapKeySig2 });
    }
    if (tapScriptSig2.length) {
      this.data.updateInput(inputIndex, { tapScriptSig: tapScriptSig2 });
    }
    return this;
  }
  signInputAsync(inputIndex, keyPair, sighashTypes) {
    return Promise.resolve().then(() => {
      if (!keyPair || !keyPair.publicKey)
        throw new Error("Need Signer to sign input");
      const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
      if ((0, bip371_1.isTaprootInput)(input))
        return this._signTaprootInputAsync(
          inputIndex,
          input,
          keyPair,
          void 0,
          sighashTypes
        );
      return this._signInputAsync(inputIndex, keyPair, sighashTypes);
    });
  }
  signTaprootInputAsync(inputIndex, keyPair, tapLeafHash, sighashTypes) {
    return Promise.resolve().then(() => {
      if (!keyPair || !keyPair.publicKey)
        throw new Error("Need Signer to sign input");
      const input = (0, utils_1$1.checkForInput)(this.data.inputs, inputIndex);
      if ((0, bip371_1.isTaprootInput)(input))
        return this._signTaprootInputAsync(
          inputIndex,
          input,
          keyPair,
          tapLeafHash,
          sighashTypes
        );
      throw new Error(`Input #${inputIndex} is not of type Taproot.`);
    });
  }
  _signInputAsync(inputIndex, keyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
    const { hash: hash2, sighashType: sighashType2 } = getHashAndSighashType(
      this.data.inputs,
      inputIndex,
      keyPair.publicKey,
      this.__CACHE,
      sighashTypes
    );
    return Promise.resolve(keyPair.sign(hash2)).then((signature2) => {
      const partialSig2 = [
        {
          pubkey: keyPair.publicKey,
          signature: bscript.signature.encode(signature2, sighashType2)
        }
      ];
      this.data.updateInput(inputIndex, { partialSig: partialSig2 });
    });
  }
  async _signTaprootInputAsync(inputIndex, input, keyPair, tapLeafHash, sighashTypes = [transaction_1.Transaction.SIGHASH_DEFAULT]) {
    const hashesForSig = this.checkTaprootHashesForSig(
      inputIndex,
      input,
      keyPair,
      tapLeafHash,
      sighashTypes
    );
    const signaturePromises = [];
    const tapKeyHash = hashesForSig.filter((h2) => !h2.leafHash)[0];
    if (tapKeyHash) {
      const tapKeySigPromise = Promise.resolve(
        keyPair.signSchnorr(tapKeyHash.hash)
      ).then((sig) => {
        return {
          tapKeySig: (0, bip371_1.serializeTaprootSignature)(
            sig,
            input.sighashType
          )
        };
      });
      signaturePromises.push(tapKeySigPromise);
    }
    const tapScriptHashes = hashesForSig.filter((h2) => !!h2.leafHash);
    if (tapScriptHashes.length) {
      const tapScriptSigPromises = tapScriptHashes.map((tsh) => {
        return Promise.resolve(keyPair.signSchnorr(tsh.hash)).then(
          (signature2) => {
            const tapScriptSig2 = [
              {
                pubkey: (0, bip371_1.toXOnly)(keyPair.publicKey),
                signature: (0, bip371_1.serializeTaprootSignature)(
                  signature2,
                  input.sighashType
                ),
                leafHash: tsh.leafHash
              }
            ];
            return { tapScriptSig: tapScriptSig2 };
          }
        );
      });
      signaturePromises.push(...tapScriptSigPromises);
    }
    return Promise.all(signaturePromises).then((results) => {
      results.forEach((v2) => this.data.updateInput(inputIndex, v2));
    });
  }
  checkTaprootHashesForSig(inputIndex, input, keyPair, tapLeafHashToSign, allowedSighashTypes) {
    if (typeof keyPair.signSchnorr !== "function")
      throw new Error(
        `Need Schnorr Signer to sign taproot input #${inputIndex}.`
      );
    const hashesForSig = getTaprootHashesForSig(
      inputIndex,
      input,
      this.data.inputs,
      keyPair.publicKey,
      this.__CACHE,
      tapLeafHashToSign,
      allowedSighashTypes
    );
    if (!hashesForSig || !hashesForSig.length)
      throw new Error(
        `Can not sign for input #${inputIndex} with the key ${keyPair.publicKey.toString(
          "hex"
        )}`
      );
    return hashesForSig;
  }
  toBuffer() {
    checkCache(this.__CACHE);
    return this.data.toBuffer();
  }
  toHex() {
    checkCache(this.__CACHE);
    return this.data.toHex();
  }
  toBase64() {
    checkCache(this.__CACHE);
    return this.data.toBase64();
  }
  updateGlobal(updateData) {
    this.data.updateGlobal(updateData);
    return this;
  }
  updateInput(inputIndex, updateData) {
    if (updateData.witnessScript) checkInvalidP2WSH(updateData.witnessScript);
    (0, bip371_1.checkTaprootInputFields)(
      this.data.inputs[inputIndex],
      updateData,
      "updateInput"
    );
    this.data.updateInput(inputIndex, updateData);
    if (updateData.nonWitnessUtxo) {
      addNonWitnessTxCache(
        this.__CACHE,
        this.data.inputs[inputIndex],
        inputIndex
      );
    }
    return this;
  }
  updateOutput(outputIndex, updateData) {
    const outputData = this.data.outputs[outputIndex];
    (0, bip371_1.checkTaprootOutputFields)(
      outputData,
      updateData,
      "updateOutput"
    );
    this.data.updateOutput(outputIndex, updateData);
    return this;
  }
  addUnknownKeyValToGlobal(keyVal) {
    this.data.addUnknownKeyValToGlobal(keyVal);
    return this;
  }
  addUnknownKeyValToInput(inputIndex, keyVal) {
    this.data.addUnknownKeyValToInput(inputIndex, keyVal);
    return this;
  }
  addUnknownKeyValToOutput(outputIndex, keyVal) {
    this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
    return this;
  }
  clearFinalizedInput(inputIndex) {
    this.data.clearFinalizedInput(inputIndex);
    return this;
  }
}
psbt$1.Psbt = Psbt;
const transactionFromBuffer = (buffer2) => new PsbtTransaction(buffer2);
class PsbtTransaction {
  constructor(buffer2 = Buffer$3.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
    this.tx = transaction_1.Transaction.fromBuffer(buffer2);
    checkTxEmpty(this.tx);
    Object.defineProperty(this, "tx", {
      enumerable: false,
      writable: true
    });
  }
  getInputOutputCounts() {
    return {
      inputCount: this.tx.ins.length,
      outputCount: this.tx.outs.length
    };
  }
  addInput(input) {
    if (input.hash === void 0 || input.index === void 0 || !Buffer$3.isBuffer(input.hash) && typeof input.hash !== "string" || typeof input.index !== "number") {
      throw new Error("Error adding input.");
    }
    const hash2 = typeof input.hash === "string" ? (0, bufferutils_1.reverseBuffer)(Buffer$3.from(input.hash, "hex")) : input.hash;
    this.tx.addInput(hash2, input.index, input.sequence);
  }
  addOutput(output2) {
    if (output2.script === void 0 || output2.value === void 0 || !Buffer$3.isBuffer(output2.script) || typeof output2.value !== "number") {
      throw new Error("Error adding output.");
    }
    this.tx.addOutput(output2.script, output2.value);
  }
  toBuffer() {
    return this.tx.toBuffer();
  }
}
function canFinalize(input, script2, scriptType) {
  switch (scriptType) {
    case "pubkey":
    case "pubkeyhash":
    case "witnesspubkeyhash":
      return hasSigs(1, input.partialSig);
    case "multisig":
      const p2ms2 = payments.p2ms({ output: script2 });
      return hasSigs(p2ms2.m, input.partialSig, p2ms2.pubkeys);
    default:
      return false;
  }
}
function checkCache(cache) {
  if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {
    throw new Error("Not BIP174 compliant, can not export");
  }
}
function hasSigs(neededSigs, partialSig2, pubkeys) {
  if (!partialSig2) return false;
  let sigs;
  if (pubkeys) {
    sigs = pubkeys.map((pkey) => {
      const pubkey = compressPubkey(pkey);
      return partialSig2.find((pSig) => pSig.pubkey.equals(pubkey));
    }).filter((v2) => !!v2);
  } else {
    sigs = partialSig2;
  }
  if (sigs.length > neededSigs) throw new Error("Too many signatures");
  return sigs.length === neededSigs;
}
function isFinalized(input) {
  return !!input.finalScriptSig || !!input.finalScriptWitness;
}
function bip32DerivationIsMine(root2) {
  return (d2) => {
    if (!d2.masterFingerprint.equals(root2.fingerprint)) return false;
    if (!root2.derivePath(d2.path).publicKey.equals(d2.pubkey)) return false;
    return true;
  };
}
function check32Bit(num) {
  if (typeof num !== "number" || num !== Math.floor(num) || num > 4294967295 || num < 0) {
    throw new Error("Invalid 32 bit integer");
  }
}
function checkFees(psbt2, cache, opts) {
  const feeRate = cache.__FEE_RATE || psbt2.getFeeRate();
  const vsize = cache.__EXTRACTED_TX.virtualSize();
  const satoshis = feeRate * vsize;
  if (feeRate >= opts.maximumFeeRate) {
    throw new Error(
      `Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in fees, which is ${feeRate} satoshi per byte for a transaction with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
    );
  }
}
function checkInputsForPartialSig(inputs2, action) {
  inputs2.forEach((input) => {
    const throws = (0, bip371_1.isTaprootInput)(input) ? (0, bip371_1.checkTaprootInputForSigs)(input, action) : (0, psbtutils_1.checkInputForSig)(input, action);
    if (throws)
      throw new Error("Can not modify transaction, signatures exist.");
  });
}
function checkPartialSigSighashes(input) {
  if (!input.sighashType || !input.partialSig) return;
  const { partialSig: partialSig2, sighashType: sighashType2 } = input;
  partialSig2.forEach((pSig) => {
    const { hashType } = bscript.signature.decode(pSig.signature);
    if (sighashType2 !== hashType) {
      throw new Error("Signature sighash does not match input sighash type");
    }
  });
}
function checkScriptForPubkey(pubkey, script2, action) {
  if (!(0, psbtutils_1.pubkeyInScript)(pubkey, script2)) {
    throw new Error(
      `Can not ${action} for this input with the key ${pubkey.toString("hex")}`
    );
  }
}
function checkTxEmpty(tx) {
  const isEmpty = tx.ins.every(
    (input) => input.script && input.script.length === 0 && input.witness && input.witness.length === 0
  );
  if (!isEmpty) {
    throw new Error("Format Error: Transaction ScriptSigs are not empty");
  }
}
function checkTxForDupeIns(tx, cache) {
  tx.ins.forEach((input) => {
    checkTxInputCache(cache, input);
  });
}
function checkTxInputCache(cache, input) {
  const key2 = (0, bufferutils_1.reverseBuffer)(Buffer$3.from(input.hash)).toString("hex") + ":" + input.index;
  if (cache.__TX_IN_CACHE[key2]) throw new Error("Duplicate input detected.");
  cache.__TX_IN_CACHE[key2] = 1;
}
function scriptCheckerFactory(payment, paymentScriptName) {
  return (inputIndex, scriptPubKey, redeemScript2, ioType) => {
    const redeemScriptOutput = payment({
      redeem: { output: redeemScript2 }
    }).output;
    if (!scriptPubKey.equals(redeemScriptOutput)) {
      throw new Error(
        `${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`
      );
    }
  };
}
const checkRedeemScript = scriptCheckerFactory(payments.p2sh, "Redeem script");
const checkWitnessScript = scriptCheckerFactory(
  payments.p2wsh,
  "Witness script"
);
function getTxCacheValue(key2, name2, inputs2, c2) {
  if (!inputs2.every(isFinalized))
    throw new Error(`PSBT must be finalized to calculate ${name2}`);
  if (key2 === "__FEE_RATE" && c2.__FEE_RATE) return c2.__FEE_RATE;
  if (key2 === "__FEE" && c2.__FEE) return c2.__FEE;
  let tx;
  let mustFinalize = true;
  if (c2.__EXTRACTED_TX) {
    tx = c2.__EXTRACTED_TX;
    mustFinalize = false;
  } else {
    tx = c2.__TX.clone();
  }
  inputFinalizeGetAmts(inputs2, tx, c2, mustFinalize);
  if (key2 === "__FEE_RATE") return c2.__FEE_RATE;
  else if (key2 === "__FEE") return c2.__FEE;
}
function getFinalScripts(inputIndex, input, script2, isSegwit, isP2SH, isP2WSH) {
  const scriptType = classifyScript(script2);
  if (!canFinalize(input, script2, scriptType))
    throw new Error(`Can not finalize input #${inputIndex}`);
  return prepareFinalScripts(
    script2,
    scriptType,
    input.partialSig,
    isSegwit,
    isP2SH,
    isP2WSH
  );
}
function prepareFinalScripts(script2, scriptType, partialSig2, isSegwit, isP2SH, isP2WSH) {
  let finalScriptSig2;
  let finalScriptWitness2;
  const payment = getPayment(script2, scriptType, partialSig2);
  const p2wsh2 = !isP2WSH ? null : payments.p2wsh({ redeem: payment });
  const p2sh2 = !isP2SH ? null : payments.p2sh({ redeem: p2wsh2 || payment });
  if (isSegwit) {
    if (p2wsh2) {
      finalScriptWitness2 = (0, psbtutils_1.witnessStackToScriptWitness)(
        p2wsh2.witness
      );
    } else {
      finalScriptWitness2 = (0, psbtutils_1.witnessStackToScriptWitness)(
        payment.witness
      );
    }
    if (p2sh2) {
      finalScriptSig2 = p2sh2.input;
    }
  } else {
    if (p2sh2) {
      finalScriptSig2 = p2sh2.input;
    } else {
      finalScriptSig2 = payment.input;
    }
  }
  return {
    finalScriptSig: finalScriptSig2,
    finalScriptWitness: finalScriptWitness2
  };
}
function getHashAndSighashType(inputs2, inputIndex, pubkey, cache, sighashTypes) {
  const input = (0, utils_1$1.checkForInput)(inputs2, inputIndex);
  const { hash: hash2, sighashType: sighashType2, script: script2 } = getHashForSig(
    inputIndex,
    input,
    cache,
    false,
    sighashTypes
  );
  checkScriptForPubkey(pubkey, script2, "sign");
  return {
    hash: hash2,
    sighashType: sighashType2
  };
}
function getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {
  const unsignedTx2 = cache.__TX;
  const sighashType2 = input.sighashType || transaction_1.Transaction.SIGHASH_ALL;
  checkSighashTypeAllowed(sighashType2, sighashTypes);
  let hash2;
  let prevout;
  if (input.nonWitnessUtxo) {
    const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
      cache,
      input,
      inputIndex
    );
    const prevoutHash = unsignedTx2.ins[inputIndex].hash;
    const utxoHash = nonWitnessUtxoTx.getHash();
    if (!prevoutHash.equals(utxoHash)) {
      throw new Error(
        `Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`
      );
    }
    const prevoutIndex = unsignedTx2.ins[inputIndex].index;
    prevout = nonWitnessUtxoTx.outs[prevoutIndex];
  } else if (input.witnessUtxo) {
    prevout = input.witnessUtxo;
  } else {
    throw new Error("Need a Utxo input item for signing");
  }
  const { meaningfulScript, type: type2 } = getMeaningfulScript(
    prevout.script,
    inputIndex,
    "input",
    input.redeemScript,
    input.witnessScript
  );
  if (["p2sh-p2wsh", "p2wsh"].indexOf(type2) >= 0) {
    hash2 = unsignedTx2.hashForWitnessV0(
      inputIndex,
      meaningfulScript,
      prevout.value,
      sighashType2
    );
  } else if ((0, psbtutils_1.isP2WPKH)(meaningfulScript)) {
    const signingScript = payments.p2pkh({
      hash: meaningfulScript.slice(2)
    }).output;
    hash2 = unsignedTx2.hashForWitnessV0(
      inputIndex,
      signingScript,
      prevout.value,
      sighashType2
    );
  } else {
    if (input.nonWitnessUtxo === void 0 && cache.__UNSAFE_SIGN_NONSEGWIT === false)
      throw new Error(
        `Input #${inputIndex} has witnessUtxo but non-segwit script: ${meaningfulScript.toString("hex")}`
      );
    if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false)
      console.warn(
        "Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecessor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.\n*********************\nPROCEED WITH CAUTION!\n*********************"
      );
    hash2 = unsignedTx2.hashForSignature(
      inputIndex,
      meaningfulScript,
      sighashType2
    );
  }
  return {
    script: meaningfulScript,
    sighashType: sighashType2,
    hash: hash2
  };
}
function getAllTaprootHashesForSig(inputIndex, input, inputs2, cache) {
  const allPublicKeys = [];
  if (input.tapInternalKey) {
    const key2 = getPrevoutTaprootKey(inputIndex, input, cache);
    if (key2) {
      allPublicKeys.push(key2);
    }
  }
  if (input.tapScriptSig) {
    const tapScriptPubkeys = input.tapScriptSig.map((tss) => tss.pubkey);
    allPublicKeys.push(...tapScriptPubkeys);
  }
  const allHashes = allPublicKeys.map(
    (pubicKey) => getTaprootHashesForSig(inputIndex, input, inputs2, pubicKey, cache)
  );
  return allHashes.flat();
}
function getPrevoutTaprootKey(inputIndex, input, cache) {
  const { script: script2 } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
  return (0, psbtutils_1.isP2TR)(script2) ? script2.subarray(2, 34) : null;
}
function trimTaprootSig(signature2) {
  return signature2.length === 64 ? signature2 : signature2.subarray(0, 64);
}
function getTaprootHashesForSig(inputIndex, input, inputs2, pubkey, cache, tapLeafHashToSign, allowedSighashTypes) {
  const unsignedTx2 = cache.__TX;
  const sighashType2 = input.sighashType || transaction_1.Transaction.SIGHASH_DEFAULT;
  checkSighashTypeAllowed(sighashType2, allowedSighashTypes);
  const prevOuts = inputs2.map(
    (i2, index) => getScriptAndAmountFromUtxo(index, i2, cache)
  );
  const signingScripts = prevOuts.map((o3) => o3.script);
  const values = prevOuts.map((o3) => o3.value);
  const hashes = [];
  if (input.tapInternalKey && !tapLeafHashToSign) {
    const outputKey = getPrevoutTaprootKey(inputIndex, input, cache) || Buffer$3.from([]);
    if ((0, bip371_1.toXOnly)(pubkey).equals(outputKey)) {
      const tapKeyHash = unsignedTx2.hashForWitnessV1(
        inputIndex,
        signingScripts,
        values,
        sighashType2
      );
      hashes.push({ pubkey, hash: tapKeyHash });
    }
  }
  const tapLeafHashes = (input.tapLeafScript || []).filter((tapLeaf) => (0, psbtutils_1.pubkeyInScript)(pubkey, tapLeaf.script)).map((tapLeaf) => {
    const hash2 = (0, bip341_1.tapleafHash)({
      output: tapLeaf.script,
      version: tapLeaf.leafVersion
    });
    return Object.assign({ hash: hash2 }, tapLeaf);
  }).filter(
    (tapLeaf) => !tapLeafHashToSign || tapLeafHashToSign.equals(tapLeaf.hash)
  ).map((tapLeaf) => {
    const tapScriptHash = unsignedTx2.hashForWitnessV1(
      inputIndex,
      signingScripts,
      values,
      sighashType2,
      tapLeaf.hash
    );
    return {
      pubkey,
      hash: tapScriptHash,
      leafHash: tapLeaf.hash
    };
  });
  return hashes.concat(tapLeafHashes);
}
function checkSighashTypeAllowed(sighashType2, sighashTypes) {
  if (sighashTypes && sighashTypes.indexOf(sighashType2) < 0) {
    const str = sighashTypeToString(sighashType2);
    throw new Error(
      `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${str}`
    );
  }
}
function getPayment(script2, scriptType, partialSig2) {
  let payment;
  switch (scriptType) {
    case "multisig":
      const sigs = getSortedSigs(script2, partialSig2);
      payment = payments.p2ms({
        output: script2,
        signatures: sigs
      });
      break;
    case "pubkey":
      payment = payments.p2pk({
        output: script2,
        signature: partialSig2[0].signature
      });
      break;
    case "pubkeyhash":
      payment = payments.p2pkh({
        output: script2,
        pubkey: partialSig2[0].pubkey,
        signature: partialSig2[0].signature
      });
      break;
    case "witnesspubkeyhash":
      payment = payments.p2wpkh({
        output: script2,
        pubkey: partialSig2[0].pubkey,
        signature: partialSig2[0].signature
      });
      break;
  }
  return payment;
}
function getScriptFromInput(inputIndex, input, cache) {
  const unsignedTx2 = cache.__TX;
  const res = {
    script: null,
    isSegwit: false,
    isP2SH: false,
    isP2WSH: false
  };
  res.isP2SH = !!input.redeemScript;
  res.isP2WSH = !!input.witnessScript;
  if (input.witnessScript) {
    res.script = input.witnessScript;
  } else if (input.redeemScript) {
    res.script = input.redeemScript;
  } else {
    if (input.nonWitnessUtxo) {
      const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
        cache,
        input,
        inputIndex
      );
      const prevoutIndex = unsignedTx2.ins[inputIndex].index;
      res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
    } else if (input.witnessUtxo) {
      res.script = input.witnessUtxo.script;
    }
  }
  if (input.witnessScript || (0, psbtutils_1.isP2WPKH)(res.script)) {
    res.isSegwit = true;
  }
  return res;
}
function getSignersFromHD(inputIndex, inputs2, hdKeyPair) {
  const input = (0, utils_1$1.checkForInput)(inputs2, inputIndex);
  if (!input.bip32Derivation || input.bip32Derivation.length === 0) {
    throw new Error("Need bip32Derivation to sign with HD");
  }
  const myDerivations = input.bip32Derivation.map((bipDv) => {
    if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {
      return bipDv;
    } else {
      return;
    }
  }).filter((v2) => !!v2);
  if (myDerivations.length === 0) {
    throw new Error(
      "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
    );
  }
  const signers = myDerivations.map((bipDv) => {
    const node2 = hdKeyPair.derivePath(bipDv.path);
    if (!bipDv.pubkey.equals(node2.publicKey)) {
      throw new Error("pubkey did not match bip32Derivation");
    }
    return node2;
  });
  return signers;
}
function getSortedSigs(script2, partialSig2) {
  const p2ms2 = payments.p2ms({ output: script2 });
  return p2ms2.pubkeys.map((pk) => {
    return (partialSig2.filter((ps) => {
      return ps.pubkey.equals(pk);
    })[0] || {}).signature;
  }).filter((v2) => !!v2);
}
function scriptWitnessToWitnessStack(buffer2) {
  let offset = 0;
  function readSlice(n2) {
    offset += n2;
    return buffer2.slice(offset - n2, offset);
  }
  function readVarInt() {
    const vi = varuint.decode(buffer2, offset);
    offset += varuint.decode.bytes;
    return vi;
  }
  function readVarSlice() {
    return readSlice(readVarInt());
  }
  function readVector() {
    const count = readVarInt();
    const vector = [];
    for (let i2 = 0; i2 < count; i2++) vector.push(readVarSlice());
    return vector;
  }
  return readVector();
}
function sighashTypeToString(sighashType2) {
  let text = sighashType2 & transaction_1.Transaction.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
  const sigMod = sighashType2 & 31;
  switch (sigMod) {
    case transaction_1.Transaction.SIGHASH_ALL:
      text += "SIGHASH_ALL";
      break;
    case transaction_1.Transaction.SIGHASH_SINGLE:
      text += "SIGHASH_SINGLE";
      break;
    case transaction_1.Transaction.SIGHASH_NONE:
      text += "SIGHASH_NONE";
      break;
  }
  return text;
}
function addNonWitnessTxCache(cache, input, inputIndex) {
  cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;
  const tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);
  cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
  const self2 = cache;
  const selfIndex = inputIndex;
  delete input.nonWitnessUtxo;
  Object.defineProperty(input, "nonWitnessUtxo", {
    enumerable: true,
    get() {
      const buf = self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
      const txCache = self2.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
      if (buf !== void 0) {
        return buf;
      } else {
        const newBuf = txCache.toBuffer();
        self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
        return newBuf;
      }
    },
    set(data) {
      self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
    }
  });
}
function inputFinalizeGetAmts(inputs2, tx, cache, mustFinalize) {
  let inputAmount = 0;
  inputs2.forEach((input, idx) => {
    if (mustFinalize && input.finalScriptSig)
      tx.ins[idx].script = input.finalScriptSig;
    if (mustFinalize && input.finalScriptWitness) {
      tx.ins[idx].witness = scriptWitnessToWitnessStack(
        input.finalScriptWitness
      );
    }
    if (input.witnessUtxo) {
      inputAmount += input.witnessUtxo.value;
    } else if (input.nonWitnessUtxo) {
      const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);
      const vout = tx.ins[idx].index;
      const out = nwTx.outs[vout];
      inputAmount += out.value;
    }
  });
  const outputAmount = tx.outs.reduce((total, o3) => total + o3.value, 0);
  const fee = inputAmount - outputAmount;
  if (fee < 0) {
    throw new Error("Outputs are spending more than Inputs");
  }
  const bytes2 = tx.virtualSize();
  cache.__FEE = fee;
  cache.__EXTRACTED_TX = tx;
  cache.__FEE_RATE = Math.floor(fee / bytes2);
}
function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
  const c2 = cache.__NON_WITNESS_UTXO_TX_CACHE;
  if (!c2[inputIndex]) {
    addNonWitnessTxCache(cache, input, inputIndex);
  }
  return c2[inputIndex];
}
function getScriptFromUtxo(inputIndex, input, cache) {
  const { script: script2 } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
  return script2;
}
function getScriptAndAmountFromUtxo(inputIndex, input, cache) {
  if (input.witnessUtxo !== void 0) {
    return {
      script: input.witnessUtxo.script,
      value: input.witnessUtxo.value
    };
  } else if (input.nonWitnessUtxo !== void 0) {
    const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
      cache,
      input,
      inputIndex
    );
    const o3 = nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index];
    return { script: o3.script, value: o3.value };
  } else {
    throw new Error("Can't find pubkey in input without Utxo data");
  }
}
function pubkeyInInput(pubkey, input, inputIndex, cache) {
  const script2 = getScriptFromUtxo(inputIndex, input, cache);
  const { meaningfulScript } = getMeaningfulScript(
    script2,
    inputIndex,
    "input",
    input.redeemScript,
    input.witnessScript
  );
  return (0, psbtutils_1.pubkeyInScript)(pubkey, meaningfulScript);
}
function pubkeyInOutput(pubkey, output2, outputIndex, cache) {
  const script2 = cache.__TX.outs[outputIndex].script;
  const { meaningfulScript } = getMeaningfulScript(
    script2,
    outputIndex,
    "output",
    output2.redeemScript,
    output2.witnessScript
  );
  return (0, psbtutils_1.pubkeyInScript)(pubkey, meaningfulScript);
}
function redeemFromFinalScriptSig(finalScript) {
  if (!finalScript) return;
  const decomp = bscript.decompile(finalScript);
  if (!decomp) return;
  const lastItem = decomp[decomp.length - 1];
  if (!Buffer$3.isBuffer(lastItem) || isPubkeyLike(lastItem) || isSigLike(lastItem))
    return;
  const sDecomp = bscript.decompile(lastItem);
  if (!sDecomp) return;
  return lastItem;
}
function redeemFromFinalWitnessScript(finalScript) {
  if (!finalScript) return;
  const decomp = scriptWitnessToWitnessStack(finalScript);
  const lastItem = decomp[decomp.length - 1];
  if (isPubkeyLike(lastItem)) return;
  const sDecomp = bscript.decompile(lastItem);
  if (!sDecomp) return;
  return lastItem;
}
function compressPubkey(pubkey) {
  if (pubkey.length === 65) {
    const parity = pubkey[64] & 1;
    const newKey = pubkey.slice(0, 33);
    newKey[0] = 2 | parity;
    return newKey;
  }
  return pubkey.slice();
}
function isPubkeyLike(buf) {
  return buf.length === 33 && bscript.isCanonicalPubKey(buf);
}
function isSigLike(buf) {
  return bscript.isCanonicalScriptSignature(buf);
}
function getMeaningfulScript(script2, index, ioType, redeemScript2, witnessScript2) {
  const isP2SH = (0, psbtutils_1.isP2SHScript)(script2);
  const isP2SHP2WSH = isP2SH && redeemScript2 && (0, psbtutils_1.isP2WSHScript)(redeemScript2);
  const isP2WSH = (0, psbtutils_1.isP2WSHScript)(script2);
  if (isP2SH && redeemScript2 === void 0)
    throw new Error("scriptPubkey is P2SH but redeemScript missing");
  if ((isP2WSH || isP2SHP2WSH) && witnessScript2 === void 0)
    throw new Error(
      "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
    );
  let meaningfulScript;
  if (isP2SHP2WSH) {
    meaningfulScript = witnessScript2;
    checkRedeemScript(index, script2, redeemScript2, ioType);
    checkWitnessScript(index, redeemScript2, witnessScript2, ioType);
    checkInvalidP2WSH(meaningfulScript);
  } else if (isP2WSH) {
    meaningfulScript = witnessScript2;
    checkWitnessScript(index, script2, witnessScript2, ioType);
    checkInvalidP2WSH(meaningfulScript);
  } else if (isP2SH) {
    meaningfulScript = redeemScript2;
    checkRedeemScript(index, script2, redeemScript2, ioType);
  } else {
    meaningfulScript = script2;
  }
  return {
    meaningfulScript,
    type: isP2SHP2WSH ? "p2sh-p2wsh" : isP2SH ? "p2sh" : isP2WSH ? "p2wsh" : "raw"
  };
}
function checkInvalidP2WSH(script2) {
  if ((0, psbtutils_1.isP2WPKH)(script2) || (0, psbtutils_1.isP2SHScript)(script2)) {
    throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
  }
}
function classifyScript(script2) {
  if ((0, psbtutils_1.isP2WPKH)(script2)) return "witnesspubkeyhash";
  if ((0, psbtutils_1.isP2PKH)(script2)) return "pubkeyhash";
  if ((0, psbtutils_1.isP2MS)(script2)) return "multisig";
  if ((0, psbtutils_1.isP2PK)(script2)) return "pubkey";
  return "nonstandard";
}
function range$1(n2) {
  return [...Array(n2).keys()];
}
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.initEccLib = exports2.Transaction = exports2.opcodes = exports2.Psbt = exports2.Block = exports2.script = exports2.payments = exports2.networks = exports2.crypto = exports2.address = void 0;
  const address2 = requireAddress();
  exports2.address = address2;
  const crypto2 = crypto$5;
  exports2.crypto = crypto2;
  const networks2 = networks$2;
  exports2.networks = networks2;
  const payments2 = requirePayments();
  exports2.payments = payments2;
  const script2 = requireScript();
  exports2.script = script2;
  var block_1 = block;
  Object.defineProperty(exports2, "Block", {
    enumerable: true,
    get: function() {
      return block_1.Block;
    }
  });
  var psbt_1 = psbt$1;
  Object.defineProperty(exports2, "Psbt", {
    enumerable: true,
    get: function() {
      return psbt_1.Psbt;
    }
  });
  var ops_12 = ops;
  Object.defineProperty(exports2, "opcodes", {
    enumerable: true,
    get: function() {
      return ops_12.OPS;
    }
  });
  var transaction_12 = transaction;
  Object.defineProperty(exports2, "Transaction", {
    enumerable: true,
    get: function() {
      return transaction_12.Transaction;
    }
  });
  var ecc_lib_1 = ecc_lib;
  Object.defineProperty(exports2, "initEccLib", {
    enumerable: true,
    get: function() {
      return ecc_lib_1.initEccLib;
    }
  });
})(src$4);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var t = function() {
  return t = Object.assign || function(t2) {
    for (var r2, e2 = 1, n2 = arguments.length; e2 < n2; e2++) for (var s2 in r2 = arguments[e2]) Object.prototype.hasOwnProperty.call(r2, s2) && (t2[s2] = r2[s2]);
    return t2;
  }, t.apply(this, arguments);
};
var r = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var e = (t2) => {
  if (!t2 || "string" != typeof t2) throw new Error(`Expected base58 string but got “${t2}”`);
  if (t2.match(/[IOl0]/gmu)) throw new Error(`Invalid base58 character “${t2.match(/[IOl0]/gmu)}”`);
  const e2 = t2.match(/^1+/gmu), n2 = e2 ? e2[0].length : 0, s2 = (t2.length - n2) * (Math.log(58) / Math.log(256)) + 1 >>> 0;
  return new Uint8Array([...new Uint8Array(n2), ...t2.match(/.{1}/gmu).map((t3) => r.indexOf(t3)).reduce((t3, r2) => t3 = t3.map((t4) => {
    const e3 = 58 * t4 + r2;
    return r2 = e3 >> 8, e3;
  }), new Uint8Array(s2)).reverse().filter((i2 = false, (t3) => i2 = i2 || t3))]);
  var i2;
};
(() => {
  const t2 = Array(256).fill(-1);
  for (let e2 = 0; e2 < r.length; ++e2) t2[r.charCodeAt(e2)] = e2;
})();
var n = e;
var s, i$1, o, h$2 = (s = function(t2, r2) {
  Object.defineProperty(r2, "__esModule", { value: true }), r2.bech32m = r2.bech32 = void 0;
  const e2 = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", n2 = {};
  for (let t3 = 0; t3 < 32; t3++) {
    const r3 = e2.charAt(t3);
    n2[r3] = t3;
  }
  function s2(t3) {
    const r3 = t3 >> 25;
    return (33554431 & t3) << 5 ^ 996825010 & -(r3 >> 0 & 1) ^ 642813549 & -(r3 >> 1 & 1) ^ 513874426 & -(r3 >> 2 & 1) ^ 1027748829 & -(r3 >> 3 & 1) ^ 705979059 & -(r3 >> 4 & 1);
  }
  function i2(t3) {
    let r3 = 1;
    for (let e3 = 0; e3 < t3.length; ++e3) {
      const n3 = t3.charCodeAt(e3);
      if (n3 < 33 || n3 > 126) return "Invalid prefix (" + t3 + ")";
      r3 = s2(r3) ^ n3 >> 5;
    }
    r3 = s2(r3);
    for (let e3 = 0; e3 < t3.length; ++e3) {
      const n3 = t3.charCodeAt(e3);
      r3 = s2(r3) ^ 31 & n3;
    }
    return r3;
  }
  function o3(t3, r3, e3, n3) {
    let s3 = 0, i3 = 0;
    const o4 = (1 << e3) - 1, h3 = [];
    for (let n4 = 0; n4 < t3.length; ++n4) for (s3 = s3 << r3 | t3[n4], i3 += r3; i3 >= e3; ) i3 -= e3, h3.push(s3 >> i3 & o4);
    if (n3) i3 > 0 && h3.push(s3 << e3 - i3 & o4);
    else {
      if (i3 >= r3) return "Excess padding";
      if (s3 << e3 - i3 & o4) return "Non-zero padding";
    }
    return h3;
  }
  function h2(t3) {
    return o3(t3, 8, 5, true);
  }
  function c2(t3) {
    const r3 = o3(t3, 5, 8, false);
    if (Array.isArray(r3)) return r3;
  }
  function a2(t3) {
    const r3 = o3(t3, 5, 8, false);
    if (Array.isArray(r3)) return r3;
    throw new Error(r3);
  }
  function f2(t3) {
    let r3;
    function o4(t4, e3) {
      if (e3 = e3 || 90, t4.length < 8) return t4 + " too short";
      if (t4.length > e3) return "Exceeds length limit";
      const o5 = t4.toLowerCase(), h3 = t4.toUpperCase();
      if (t4 !== o5 && t4 !== h3) return "Mixed-case string " + t4;
      const c3 = (t4 = o5).lastIndexOf("1");
      if (-1 === c3) return "No separator character for " + t4;
      if (0 === c3) return "Missing prefix for " + t4;
      const a3 = t4.slice(0, c3), f3 = t4.slice(c3 + 1);
      if (f3.length < 6) return "Data too short";
      let u2 = i2(a3);
      if ("string" == typeof u2) return u2;
      const l2 = [];
      for (let t5 = 0; t5 < f3.length; ++t5) {
        const r4 = f3.charAt(t5), e4 = n2[r4];
        if (void 0 === e4) return "Unknown character " + r4;
        u2 = s2(u2) ^ e4, t5 + 6 >= f3.length || l2.push(e4);
      }
      return u2 !== r3 ? "Invalid checksum for " + t4 : { prefix: a3, words: l2 };
    }
    return r3 = "bech32" === t3 ? 1 : 734539939, { decodeUnsafe: function(t4, r4) {
      const e3 = o4(t4, r4);
      if ("object" == typeof e3) return e3;
    }, decode: function(t4, r4) {
      const e3 = o4(t4, r4);
      if ("object" == typeof e3) return e3;
      throw new Error(e3);
    }, encode: function(t4, n3, o5) {
      if (o5 = o5 || 90, t4.length + 7 + n3.length > o5) throw new TypeError("Exceeds length limit");
      let h3 = i2(t4 = t4.toLowerCase());
      if ("string" == typeof h3) throw new Error(h3);
      let c3 = t4 + "1";
      for (let t5 = 0; t5 < n3.length; ++t5) {
        const r4 = n3[t5];
        if (r4 >> 5 != 0) throw new Error("Non 5-bit word");
        h3 = s2(h3) ^ r4, c3 += e2.charAt(r4);
      }
      for (let t5 = 0; t5 < 6; ++t5) h3 = s2(h3);
      h3 ^= r3;
      for (let t5 = 0; t5 < 6; ++t5) c3 += e2.charAt(h3 >> 5 * (5 - t5) & 31);
      return c3;
    }, toWords: h2, fromWordsUnsafe: c2, fromWords: a2 };
  }
  r2.bech32 = f2("bech32"), r2.bech32m = f2("bech32m");
}, s(i$1 = { exports: {} }, i$1.exports), i$1.exports);
(o = h$2) && o.__esModule && Object.prototype.hasOwnProperty.call(o, "default") && o.default;
var c = h$2.bech32m, a = h$2.bech32;
const f = [1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998];
class l {
  constructor() {
    this.A = 1779033703, this.B = -1150833019, this.C = 1013904242, this.D = -1521486534, this.E = 1359893119, this.F = -1694144372, this.G = 528734635, this.H = 1541459225, this._size = 0, this._sp = 0, (!p || w >= 8e3) && (p = new ArrayBuffer(8e3), w = 0), this._byte = new Uint8Array(p, w, 80), this._word = new Int32Array(p, w, 20), w += 80;
  }
  update(t2) {
    if ("string" == typeof t2) return this._utf8(t2);
    if (null == t2) throw new TypeError("Invalid type: " + typeof t2);
    const r2 = t2.byteOffset, e2 = t2.byteLength;
    let n2 = e2 / 64 | 0, s2 = 0;
    if (n2 && !(3 & r2) && !(this._size % 64)) {
      const e3 = new Int32Array(t2.buffer, r2, 16 * n2);
      for (; n2--; ) this._int32(e3, s2 >> 2), s2 += 64;
      this._size += s2;
    }
    if (1 !== t2.BYTES_PER_ELEMENT && t2.buffer) {
      const n3 = new Uint8Array(t2.buffer, r2 + s2, e2 - s2);
      return this._uint8(n3);
    }
    return s2 === e2 ? this : this._uint8(t2, s2);
  }
  _uint8(t2, r2) {
    const { _byte: e2, _word: n2 } = this, s2 = t2.length;
    for (r2 |= 0; r2 < s2; ) {
      const i2 = this._size % 64;
      let o3 = i2;
      for (; r2 < s2 && o3 < 64; ) e2[o3++] = t2[r2++];
      o3 >= 64 && this._int32(n2), this._size += o3 - i2;
    }
    return this;
  }
  _utf8(t2) {
    const { _byte: r2, _word: e2 } = this, n2 = t2.length;
    let s2 = this._sp;
    for (let i2 = 0; i2 < n2; ) {
      const o3 = this._size % 64;
      let h2 = o3;
      for (; i2 < n2 && h2 < 64; ) {
        let e3 = 0 | t2.charCodeAt(i2++);
        e3 < 128 ? r2[h2++] = e3 : e3 < 2048 ? (r2[h2++] = 192 | e3 >>> 6, r2[h2++] = 128 | 63 & e3) : e3 < 55296 || e3 > 57343 ? (r2[h2++] = 224 | e3 >>> 12, r2[h2++] = 128 | e3 >>> 6 & 63, r2[h2++] = 128 | 63 & e3) : s2 ? (e3 = ((1023 & s2) << 10) + (1023 & e3) + 65536, r2[h2++] = 240 | e3 >>> 18, r2[h2++] = 128 | e3 >>> 12 & 63, r2[h2++] = 128 | e3 >>> 6 & 63, r2[h2++] = 128 | 63 & e3, s2 = 0) : s2 = e3;
      }
      h2 >= 64 && (this._int32(e2), e2[0] = e2[16]), this._size += h2 - o3;
    }
    return this._sp = s2, this;
  }
  _int32(t2, r2) {
    let { A: e2, B: n2, C: s2, D: i2, E: o3, F: h2, G: c2, H: a2 } = this, u2 = 0;
    for (r2 |= 0; u2 < 16; ) d[u2++] = g(t2[r2++]);
    for (u2 = 16; u2 < 64; u2++) d[u2] = A(d[u2 - 2]) + d[u2 - 7] + m(d[u2 - 15]) + d[u2 - 16] | 0;
    for (u2 = 0; u2 < 64; u2++) {
      const t3 = a2 + E(o3) + b(o3, h2, c2) + f[u2] + d[u2] | 0, r3 = v(e2) + _(e2, n2, s2) | 0;
      a2 = c2, c2 = h2, h2 = o3, o3 = i2 + t3 | 0, i2 = s2, s2 = n2, n2 = e2, e2 = t3 + r3 | 0;
    }
    this.A = e2 + this.A | 0, this.B = n2 + this.B | 0, this.C = s2 + this.C | 0, this.D = i2 + this.D | 0, this.E = o3 + this.E | 0, this.F = h2 + this.F | 0, this.G = c2 + this.G | 0, this.H = a2 + this.H | 0;
  }
  digest(t2) {
    const { _byte: r2, _word: e2 } = this;
    let n2 = this._size % 64 | 0;
    for (r2[n2++] = 128; 3 & n2; ) r2[n2++] = 0;
    if (n2 >>= 2, n2 > 14) {
      for (; n2 < 16; ) e2[n2++] = 0;
      n2 = 0, this._int32(e2);
    }
    for (; n2 < 16; ) e2[n2++] = 0;
    const s2 = 8 * this._size, i2 = (4294967295 & s2) >>> 0, o3 = (s2 - i2) / 4294967296;
    return o3 && (e2[14] = g(o3)), i2 && (e2[15] = g(i2)), this._int32(e2), "hex" === t2 ? this._hex() : this._bin();
  }
  _hex() {
    const { A: t2, B: r2, C: e2, D: n2, E: s2, F: i2, G: o3, H: h2 } = this;
    return y(t2) + y(r2) + y(e2) + y(n2) + y(s2) + y(i2) + y(o3) + y(h2);
  }
  _bin() {
    const { A: t2, B: r2, C: e2, D: n2, E: s2, F: i2, G: o3, H: h2, _byte: c2, _word: a2 } = this;
    return a2[0] = g(t2), a2[1] = g(r2), a2[2] = g(e2), a2[3] = g(n2), a2[4] = g(s2), a2[5] = g(i2), a2[6] = g(o3), a2[7] = g(h2), c2.slice(0, 32);
  }
}
const d = new Int32Array(64);
let p, w = 0;
const y = (t2) => (t2 + 4294967296).toString(16).substr(-8), g = 254 === new Uint8Array(new Uint16Array([65279]).buffer)[0] ? (t2) => t2 : (t2) => t2 << 24 & 4278190080 | t2 << 8 & 16711680 | t2 >> 8 & 65280 | t2 >> 24 & 255, b = (t2, r2, e2) => e2 ^ t2 & (r2 ^ e2), _ = (t2, r2, e2) => t2 & r2 | e2 & (t2 | r2), v = (t2) => (t2 >>> 2 | t2 << 30) ^ (t2 >>> 13 | t2 << 19) ^ (t2 >>> 22 | t2 << 10), E = (t2) => (t2 >>> 6 | t2 << 26) ^ (t2 >>> 11 | t2 << 21) ^ (t2 >>> 25 | t2 << 7), m = (t2) => (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3, A = (t2) => (t2 >>> 17 | t2 << 15) ^ (t2 >>> 19 | t2 << 13) ^ t2 >>> 10;
var x, k, I = function(t2) {
  return function(t3) {
    return new l();
  }().update(t2).digest();
};
!function(t2) {
  t2.mainnet = "mainnet", t2.testnet = "testnet", t2.regtest = "regtest";
}(x || (x = {})), function(t2) {
  t2.p2pkh = "p2pkh", t2.p2sh = "p2sh", t2.p2wpkh = "p2wpkh", t2.p2wsh = "p2wsh", t2.p2tr = "p2tr";
}(k || (k = {}));
var C = { 0: { type: k.p2pkh, network: x.mainnet }, 111: { type: k.p2pkh, network: x.testnet }, 5: { type: k.p2sh, network: x.mainnet }, 196: { type: k.p2sh, network: x.testnet } }, z = function(r2) {
  var e2, s2 = r2.substr(0, 2).toLowerCase();
  if ("bc" === s2 || "tb" === s2) return function(t2) {
    var r3;
    try {
      r3 = t2.startsWith("bc1p") || t2.startsWith("tb1p") || t2.startsWith("bcrt1p") ? c.decode(t2) : a.decode(t2);
    } catch (t3) {
      throw new Error("Invalid address");
    }
    var e3 = { bc: x.mainnet, tb: x.testnet, bcrt: x.regtest }[r3.prefix];
    if (void 0 === e3) throw new Error("Invalid address");
    var n2 = r3.words[0];
    if (n2 < 0 || n2 > 16) throw new Error("Invalid address");
    return { bech32: true, network: e3, address: t2, type: 20 === a.fromWords(r3.words.slice(1)).length ? k.p2wpkh : 1 === n2 ? k.p2tr : k.p2wsh };
  }(r2);
  try {
    e2 = n(r2);
  } catch (t2) {
    throw new Error("Invalid address");
  }
  var i2 = e2.length;
  if (25 !== i2) throw new Error("Invalid address");
  var o3 = e2[0], h2 = e2.slice(i2 - 4, i2), f2 = e2.slice(0, i2 - 4), u2 = I(I(f2)).slice(0, 4);
  if (h2.some(function(t2, r3) {
    return t2 !== u2[r3];
  })) throw new Error("Invalid address");
  if (!Object.keys(C).map(Number).includes(o3)) throw new Error("Invalid address");
  return t(t({}, C[o3]), { address: r2, bech32: false });
}, O = function(t2, r2) {
  try {
    var e2 = z(t2);
    return !r2 || r2 === e2.network;
  } catch (t3) {
    return false;
  }
};
var src$2 = {};
var bip32 = {};
var crypto$3 = {};
var hmac$2 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.hmac = exports2.HMAC = void 0;
  const _assert_js_12 = _assert;
  const utils_js_12 = utils$5;
  class HMAC extends utils_js_12.Hash {
    constructor(hash2, _key) {
      super();
      this.finished = false;
      this.destroyed = false;
      (0, _assert_js_12.hash)(hash2);
      const key2 = (0, utils_js_12.toBytes)(_key);
      this.iHash = hash2.create();
      if (typeof this.iHash.update !== "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const blockLen = this.blockLen;
      const pad2 = new Uint8Array(blockLen);
      pad2.set(key2.length > blockLen ? hash2.create().update(key2).digest() : key2);
      for (let i2 = 0; i2 < pad2.length; i2++)
        pad2[i2] ^= 54;
      this.iHash.update(pad2);
      this.oHash = hash2.create();
      for (let i2 = 0; i2 < pad2.length; i2++)
        pad2[i2] ^= 54 ^ 92;
      this.oHash.update(pad2);
      pad2.fill(0);
    }
    update(buf) {
      (0, _assert_js_12.exists)(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      (0, _assert_js_12.exists)(this);
      (0, _assert_js_12.bytes)(out, this.outputLen);
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to || (to = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  }
  exports2.HMAC = HMAC;
  const hmac2 = (hash2, key2, message) => new HMAC(hash2, key2).update(message).digest();
  exports2.hmac = hmac2;
  exports2.hmac.create = (hash2, key2) => new HMAC(hash2, key2);
})(hmac$2);
var sha512$2 = {};
var _u64 = {};
Object.defineProperty(_u64, "__esModule", { value: true });
_u64.add5L = _u64.add5H = _u64.add4H = _u64.add4L = _u64.add3H = _u64.add3L = _u64.rotlBL = _u64.rotlBH = _u64.rotlSL = _u64.rotlSH = _u64.rotr32L = _u64.rotr32H = _u64.rotrBL = _u64.rotrBH = _u64.rotrSL = _u64.rotrSH = _u64.shrSL = _u64.shrSH = _u64.toBig = void 0;
_u64.fromBig = fromBig;
_u64.split = split;
_u64.add = add;
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n2, le2 = false) {
  if (le2)
    return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
  return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
}
function split(lst, le2 = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i2 = 0; i2 < lst.length; i2++) {
    const { h: h2, l: l2 } = fromBig(lst[i2], le2);
    [Ah[i2], Al[i2]] = [h2, l2];
  }
  return [Ah, Al];
}
const toBig = (h2, l2) => BigInt(h2 >>> 0) << _32n | BigInt(l2 >>> 0);
_u64.toBig = toBig;
const shrSH = (h2, _l, s2) => h2 >>> s2;
_u64.shrSH = shrSH;
const shrSL = (h2, l2, s2) => h2 << 32 - s2 | l2 >>> s2;
_u64.shrSL = shrSL;
const rotrSH = (h2, l2, s2) => h2 >>> s2 | l2 << 32 - s2;
_u64.rotrSH = rotrSH;
const rotrSL = (h2, l2, s2) => h2 << 32 - s2 | l2 >>> s2;
_u64.rotrSL = rotrSL;
const rotrBH = (h2, l2, s2) => h2 << 64 - s2 | l2 >>> s2 - 32;
_u64.rotrBH = rotrBH;
const rotrBL = (h2, l2, s2) => h2 >>> s2 - 32 | l2 << 64 - s2;
_u64.rotrBL = rotrBL;
const rotr32H = (_h, l2) => l2;
_u64.rotr32H = rotr32H;
const rotr32L = (h2, _l) => h2;
_u64.rotr32L = rotr32L;
const rotlSH = (h2, l2, s2) => h2 << s2 | l2 >>> 32 - s2;
_u64.rotlSH = rotlSH;
const rotlSL = (h2, l2, s2) => l2 << s2 | h2 >>> 32 - s2;
_u64.rotlSL = rotlSL;
const rotlBH = (h2, l2, s2) => l2 << s2 - 32 | h2 >>> 64 - s2;
_u64.rotlBH = rotlBH;
const rotlBL = (h2, l2, s2) => h2 << s2 - 32 | l2 >>> 64 - s2;
_u64.rotlBL = rotlBL;
function add(Ah, Al, Bh, Bl) {
  const l2 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l2 / 2 ** 32 | 0) | 0, l: l2 | 0 };
}
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
_u64.add3L = add3L;
const add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
_u64.add3H = add3H;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
_u64.add4L = add4L;
const add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
_u64.add4H = add4H;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
_u64.add5L = add5L;
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
_u64.add5H = add5H;
const u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
_u64.default = u64;
Object.defineProperty(sha512$2, "__esModule", { value: true });
sha512$2.sha384 = sha512$2.sha512_256 = sha512$2.sha512_224 = sha512$2.sha512 = sha512$2.SHA384 = sha512$2.SHA512_256 = sha512$2.SHA512_224 = sha512$2.SHA512 = void 0;
const _md_js_1 = _md;
const _u64_js_1 = _u64;
const utils_js_1 = utils$5;
const [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js_1.default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n2) => BigInt(n2))))();
const SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class SHA512 extends _md_js_1.HashMD {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i2 = 0; i2 < 16; i2++, offset += 4) {
      SHA512_W_H[i2] = view.getUint32(offset);
      SHA512_W_L[i2] = view.getUint32(offset += 4);
    }
    for (let i2 = 16; i2 < 80; i2++) {
      const W15h = SHA512_W_H[i2 - 15] | 0;
      const W15l = SHA512_W_L[i2 - 15] | 0;
      const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
      const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i2 - 2] | 0;
      const W2l = SHA512_W_L[i2 - 2] | 0;
      const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
      const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
      const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i2 - 7], SHA512_W_L[i2 - 16]);
      const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i2 - 7], SHA512_W_H[i2 - 16]);
      SHA512_W_H[i2] = SUMh | 0;
      SHA512_W_L[i2] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i2 = 0; i2 < 80; i2++) {
      const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
      const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i2], SHA512_W_L[i2]);
      const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i2], SHA512_W_H[i2]);
      const T1l = T1ll | 0;
      const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
      const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
      Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
sha512$2.SHA512 = SHA512;
class SHA512_224 extends SHA512 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
}
sha512$2.SHA512_224 = SHA512_224;
class SHA512_256 extends SHA512 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
}
sha512$2.SHA512_256 = SHA512_256;
class SHA384 extends SHA512 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
}
sha512$2.SHA384 = SHA384;
sha512$2.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
sha512$2.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
sha512$2.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
sha512$2.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
Object.defineProperty(crypto$3, "__esModule", { value: true });
crypto$3.hmacSHA512 = crypto$3.hash160 = void 0;
const hmac_1$1 = hmac$2;
const ripemd160_1 = ripemd160$1;
const sha256_1$5 = sha256$5;
const sha512_1 = sha512$2;
function hash160(buffer2) {
  const sha256Hash = (0, sha256_1$5.sha256)(Uint8Array.from(buffer2));
  return Buffer$3.from((0, ripemd160_1.ripemd160)(sha256Hash));
}
crypto$3.hash160 = hash160;
function hmacSHA512(key2, data) {
  return Buffer$3.from((0, hmac_1$1.hmac)(sha512_1.sha512, key2, data));
}
crypto$3.hmacSHA512 = hmacSHA512;
var testecc$1 = {};
Object.defineProperty(testecc$1, "__esModule", { value: true });
testecc$1.testEcc = void 0;
const h$1 = (hex) => Buffer$3.from(hex, "hex");
function testEcc$1(ecc2) {
  assert$1(ecc2.isPoint(h$1("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")));
  assert$1(!ecc2.isPoint(h$1("030000000000000000000000000000000000000000000000000000000000000005")));
  assert$1(ecc2.isPrivate(h$1("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")));
  assert$1(ecc2.isPrivate(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
  assert$1(!ecc2.isPrivate(h$1("0000000000000000000000000000000000000000000000000000000000000000")));
  assert$1(!ecc2.isPrivate(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")));
  assert$1(!ecc2.isPrivate(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")));
  assert$1(Buffer$3.from(ecc2.pointFromScalar(h$1("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af"))).equals(h$1("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")));
  if (ecc2.xOnlyPointAddTweak) {
    assert$1(ecc2.xOnlyPointAddTweak(h$1("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")) === null);
    let xOnlyRes = ecc2.xOnlyPointAddTweak(h$1("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"), h$1("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac"));
    assert$1(Buffer$3.from(xOnlyRes.xOnlyPubkey).equals(h$1("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf")) && xOnlyRes.parity === 1);
    xOnlyRes = ecc2.xOnlyPointAddTweak(h$1("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"), h$1("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47"));
  }
  assert$1(Buffer$3.from(ecc2.pointAddScalar(h$1("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h$1("0000000000000000000000000000000000000000000000000000000000000003"))).equals(h$1("02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5")));
  assert$1(Buffer$3.from(ecc2.privateAdd(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"), h$1("0000000000000000000000000000000000000000000000000000000000000002"))).equals(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
  if (ecc2.privateNegate) {
    assert$1(Buffer$3.from(ecc2.privateNegate(h$1("0000000000000000000000000000000000000000000000000000000000000001"))).equals(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
    assert$1(Buffer$3.from(ecc2.privateNegate(h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"))).equals(h$1("0000000000000000000000000000000000000000000000000000000000000003")));
    assert$1(Buffer$3.from(ecc2.privateNegate(h$1("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af"))).equals(h$1("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")));
  }
  assert$1(Buffer$3.from(ecc2.sign(h$1("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), h$1("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))).equals(h$1("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")));
  assert$1(ecc2.verify(h$1("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), h$1("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h$1("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")));
  if (ecc2.signSchnorr) {
    assert$1(Buffer$3.from(ecc2.signSchnorr(h$1("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), h$1("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"), h$1("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906"))).equals(h$1("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
  }
  if (ecc2.verifySchnorr) {
    assert$1(ecc2.verifySchnorr(h$1("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), h$1("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"), h$1("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
  }
}
testecc$1.testEcc = testEcc$1;
function assert$1(bool2) {
  if (!bool2)
    throw new Error("ecc library invalid");
}
var lib$2 = {};
(function(exports2) {
  /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.bytes = exports2.stringToBytes = exports2.str = exports2.bytesToString = exports2.hex = exports2.utf8 = exports2.bech32m = exports2.bech32 = exports2.base58check = exports2.createBase58check = exports2.base58xmr = exports2.base58xrp = exports2.base58flickr = exports2.base58 = exports2.base64urlnopad = exports2.base64url = exports2.base64nopad = exports2.base64 = exports2.base32crockford = exports2.base32hexnopad = exports2.base32hex = exports2.base32nopad = exports2.base32 = exports2.base16 = exports2.utils = void 0;
  exports2.assertNumber = assertNumber;
  // @__NO_SIDE_EFFECTS__
  function assertNumber(n2) {
    if (!Number.isSafeInteger(n2))
      throw new Error(`Wrong integer: ${n2}`);
  }
  function isBytes2(a2) {
    return a2 instanceof Uint8Array || a2 != null && typeof a2 === "object" && a2.constructor.name === "Uint8Array";
  }
  // @__NO_SIDE_EFFECTS__
  function chain(...args) {
    const id = (a2) => a2;
    const wrap = (a2, b2) => (c2) => a2(b2(c2));
    const encode2 = args.map((x2) => x2.encode).reduceRight(wrap, id);
    const decode2 = args.map((x2) => x2.decode).reduce(wrap, id);
    return { encode: encode2, decode: decode2 };
  }
  // @__NO_SIDE_EFFECTS__
  function alphabet(alphabet2) {
    return {
      encode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("alphabet.encode input should be an array of numbers");
        return digits.map((i2) => {
          if (i2 < 0 || i2 >= alphabet2.length)
            throw new Error(`Digit index outside alphabet: ${i2} (alphabet: ${alphabet2.length})`);
          return alphabet2[i2];
        });
      },
      decode: (input) => {
        if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
          throw new Error("alphabet.decode input should be array of strings");
        return input.map((letter) => {
          if (typeof letter !== "string")
            throw new Error(`alphabet.decode: not string element=${letter}`);
          const index = alphabet2.indexOf(letter);
          if (index === -1)
            throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
          return index;
        });
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function join(separator = "") {
    if (typeof separator !== "string")
      throw new Error("join separator should be string");
    return {
      encode: (from) => {
        if (!Array.isArray(from) || from.length && typeof from[0] !== "string")
          throw new Error("join.encode input should be array of strings");
        for (let i2 of from)
          if (typeof i2 !== "string")
            throw new Error(`join.encode: non-string input=${i2}`);
        return from.join(separator);
      },
      decode: (to) => {
        if (typeof to !== "string")
          throw new Error("join.decode input should be string");
        return to.split(separator);
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function padding(bits, chr = "=") {
    if (typeof chr !== "string")
      throw new Error("padding chr should be string");
    return {
      encode(data) {
        if (!Array.isArray(data) || data.length && typeof data[0] !== "string")
          throw new Error("padding.encode input should be array of strings");
        for (let i2 of data)
          if (typeof i2 !== "string")
            throw new Error(`padding.encode: non-string input=${i2}`);
        while (data.length * bits % 8)
          data.push(chr);
        return data;
      },
      decode(input) {
        if (!Array.isArray(input) || input.length && typeof input[0] !== "string")
          throw new Error("padding.encode input should be array of strings");
        for (let i2 of input)
          if (typeof i2 !== "string")
            throw new Error(`padding.decode: non-string input=${i2}`);
        let end = input.length;
        if (end * bits % 8)
          throw new Error("Invalid padding: string should have whole number of bytes");
        for (; end > 0 && input[end - 1] === chr; end--) {
          if (!((end - 1) * bits % 8))
            throw new Error("Invalid padding: string has too much padding");
        }
        return input.slice(0, end);
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function normalize(fn) {
    if (typeof fn !== "function")
      throw new Error("normalize fn should be function");
    return { encode: (from) => from, decode: (to) => fn(to) };
  }
  // @__NO_SIDE_EFFECTS__
  function convertRadix(data, from, to) {
    if (from < 2)
      throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
    if (to < 2)
      throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data))
      throw new Error("convertRadix: data should be array");
    if (!data.length)
      return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    digits.forEach((d2) => {
      if (d2 < 0 || d2 >= from)
        throw new Error(`Wrong integer: ${d2}`);
    });
    while (true) {
      let carry = 0;
      let done = true;
      for (let i2 = pos; i2 < digits.length; i2++) {
        const digit = digits[i2];
        const digitBase = from * carry + digit;
        if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {
          throw new Error("convertRadix: carry overflow");
        }
        carry = digitBase % to;
        const rounded = Math.floor(digitBase / to);
        digits[i2] = rounded;
        if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
          throw new Error("convertRadix: carry overflow");
        if (!done)
          continue;
        else if (!rounded)
          pos = i2;
        else
          done = false;
      }
      res.push(carry);
      if (done)
        break;
    }
    for (let i2 = 0; i2 < data.length - 1 && data[i2] === 0; i2++)
      res.push(0);
    return res.reverse();
  }
  const gcd = /* @__NO_SIDE_EFFECTS__ */ (a2, b2) => !b2 ? a2 : /* @__PURE__ */ gcd(b2, a2 % b2);
  const radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - /* @__PURE__ */ gcd(from, to));
  // @__NO_SIDE_EFFECTS__
  function convertRadix2(data, from, to, padding2) {
    if (!Array.isArray(data))
      throw new Error("convertRadix2: data should be array");
    if (from <= 0 || from > 32)
      throw new Error(`convertRadix2: wrong from=${from}`);
    if (to <= 0 || to > 32)
      throw new Error(`convertRadix2: wrong to=${to}`);
    if (/* @__PURE__ */ radix2carry(from, to) > 32) {
      throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${/* @__PURE__ */ radix2carry(from, to)}`);
    }
    let carry = 0;
    let pos = 0;
    const mask = 2 ** to - 1;
    const res = [];
    for (const n2 of data) {
      if (n2 >= 2 ** from)
        throw new Error(`convertRadix2: invalid data word=${n2} from=${from}`);
      carry = carry << from | n2;
      if (pos + from > 32)
        throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
      pos += from;
      for (; pos >= to; pos -= to)
        res.push((carry >> pos - to & mask) >>> 0);
      carry &= 2 ** pos - 1;
    }
    carry = carry << to - pos & mask;
    if (!padding2 && pos >= from)
      throw new Error("Excess padding");
    if (!padding2 && carry)
      throw new Error(`Non-zero padding: ${carry}`);
    if (padding2 && pos > 0)
      res.push(carry >>> 0);
    return res;
  }
  // @__NO_SIDE_EFFECTS__
  function radix(num) {
    return {
      encode: (bytes2) => {
        if (!isBytes2(bytes2))
          throw new Error("radix.encode input should be Uint8Array");
        return /* @__PURE__ */ convertRadix(Array.from(bytes2), 2 ** 8, num);
      },
      decode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("radix.decode input should be array of numbers");
        return Uint8Array.from(/* @__PURE__ */ convertRadix(digits, num, 2 ** 8));
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function radix2(bits, revPadding = false) {
    if (bits <= 0 || bits > 32)
      throw new Error("radix2: bits should be in (0..32]");
    if (/* @__PURE__ */ radix2carry(8, bits) > 32 || /* @__PURE__ */ radix2carry(bits, 8) > 32)
      throw new Error("radix2: carry overflow");
    return {
      encode: (bytes2) => {
        if (!isBytes2(bytes2))
          throw new Error("radix2.encode input should be Uint8Array");
        return /* @__PURE__ */ convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
      },
      decode: (digits) => {
        if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number")
          throw new Error("radix2.decode input should be array of numbers");
        return Uint8Array.from(/* @__PURE__ */ convertRadix2(digits, bits, 8, revPadding));
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function unsafeWrapper(fn) {
    if (typeof fn !== "function")
      throw new Error("unsafeWrapper fn should be function");
    return function(...args) {
      try {
        return fn.apply(null, args);
      } catch (e2) {
      }
    };
  }
  // @__NO_SIDE_EFFECTS__
  function checksum(len2, fn) {
    if (typeof fn !== "function")
      throw new Error("checksum fn should be function");
    return {
      encode(data) {
        if (!isBytes2(data))
          throw new Error("checksum.encode: input should be Uint8Array");
        const checksum2 = fn(data).slice(0, len2);
        const res = new Uint8Array(data.length + len2);
        res.set(data);
        res.set(checksum2, data.length);
        return res;
      },
      decode(data) {
        if (!isBytes2(data))
          throw new Error("checksum.decode: input should be Uint8Array");
        const payload = data.slice(0, -len2);
        const newChecksum = fn(payload).slice(0, len2);
        const oldChecksum = data.slice(-len2);
        for (let i2 = 0; i2 < len2; i2++)
          if (newChecksum[i2] !== oldChecksum[i2])
            throw new Error("Invalid checksum");
        return payload;
      }
    };
  }
  exports2.utils = {
    alphabet,
    chain,
    checksum,
    convertRadix,
    convertRadix2,
    radix,
    radix2,
    join,
    padding
  };
  exports2.base16 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789ABCDEF"), /* @__PURE__ */ join(""));
  exports2.base32 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
  exports2.base32nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), /* @__PURE__ */ join(""));
  exports2.base32hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ padding(5), /* @__PURE__ */ join(""));
  exports2.base32hexnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), /* @__PURE__ */ join(""));
  exports2.base32crockford = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(5), /* @__PURE__ */ alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize((s2) => s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
  exports2.base64 = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
  exports2.base64nopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), /* @__PURE__ */ join(""));
  exports2.base64url = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ padding(6), /* @__PURE__ */ join(""));
  exports2.base64urlnopad = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(6), /* @__PURE__ */ alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), /* @__PURE__ */ join(""));
  const genBase58 = (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
  exports2.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
  exports2.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
  exports2.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
  const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
  exports2.base58xmr = {
    encode(data) {
      let res = "";
      for (let i2 = 0; i2 < data.length; i2 += 8) {
        const block2 = data.subarray(i2, i2 + 8);
        res += exports2.base58.encode(block2).padStart(XMR_BLOCK_LEN[block2.length], "1");
      }
      return res;
    },
    decode(str) {
      let res = [];
      for (let i2 = 0; i2 < str.length; i2 += 11) {
        const slice = str.slice(i2, i2 + 11);
        const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
        const block2 = exports2.base58.decode(slice);
        for (let j2 = 0; j2 < block2.length - blockLen; j2++) {
          if (block2[j2] !== 0)
            throw new Error("base58xmr: wrong padding");
        }
        res = res.concat(Array.from(block2.slice(block2.length - blockLen)));
      }
      return Uint8Array.from(res);
    }
  };
  const createBase58check = (sha2562) => /* @__PURE__ */ chain(/* @__PURE__ */ checksum(4, (data) => sha2562(sha2562(data))), exports2.base58);
  exports2.createBase58check = createBase58check;
  exports2.base58check = exports2.createBase58check;
  const BECH_ALPHABET = /* @__PURE__ */ chain(/* @__PURE__ */ alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), /* @__PURE__ */ join(""));
  const POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
  // @__NO_SIDE_EFFECTS__
  function bech32Polymod(pre) {
    const b2 = pre >> 25;
    let chk = (pre & 33554431) << 5;
    for (let i2 = 0; i2 < POLYMOD_GENERATORS.length; i2++) {
      if ((b2 >> i2 & 1) === 1)
        chk ^= POLYMOD_GENERATORS[i2];
    }
    return chk;
  }
  // @__NO_SIDE_EFFECTS__
  function bechChecksum(prefix, words, encodingConst = 1) {
    const len2 = prefix.length;
    let chk = 1;
    for (let i2 = 0; i2 < len2; i2++) {
      const c2 = prefix.charCodeAt(i2);
      if (c2 < 33 || c2 > 126)
        throw new Error(`Invalid prefix (${prefix})`);
      chk = /* @__PURE__ */ bech32Polymod(chk) ^ c2 >> 5;
    }
    chk = /* @__PURE__ */ bech32Polymod(chk);
    for (let i2 = 0; i2 < len2; i2++)
      chk = /* @__PURE__ */ bech32Polymod(chk) ^ prefix.charCodeAt(i2) & 31;
    for (let v2 of words)
      chk = /* @__PURE__ */ bech32Polymod(chk) ^ v2;
    for (let i2 = 0; i2 < 6; i2++)
      chk = /* @__PURE__ */ bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(/* @__PURE__ */ convertRadix2([chk % 2 ** 30], 30, 5, false));
  }
  // @__NO_SIDE_EFFECTS__
  function genBech32(encoding) {
    const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
    const _words = /* @__PURE__ */ radix2(5);
    const fromWords2 = _words.decode;
    const toWords2 = _words.encode;
    const fromWordsUnsafe2 = /* @__PURE__ */ unsafeWrapper(fromWords2);
    function encode2(prefix, words, limit = 90) {
      if (typeof prefix !== "string")
        throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
      if (!Array.isArray(words) || words.length && typeof words[0] !== "number")
        throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
      if (prefix.length === 0)
        throw new TypeError(`Invalid prefix length ${prefix.length}`);
      const actualLength = prefix.length + 7 + words.length;
      if (limit !== false && actualLength > limit)
        throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
      const lowered = prefix.toLowerCase();
      const sum = /* @__PURE__ */ bechChecksum(lowered, words, ENCODING_CONST);
      return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
    }
    function decode2(str, limit = 90) {
      if (typeof str !== "string")
        throw new Error(`bech32.decode input should be string, not ${typeof str}`);
      if (str.length < 8 || limit !== false && str.length > limit)
        throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
      const lowered = str.toLowerCase();
      if (str !== lowered && str !== str.toUpperCase())
        throw new Error(`String must be lowercase or uppercase`);
      const sepIndex = lowered.lastIndexOf("1");
      if (sepIndex === 0 || sepIndex === -1)
        throw new Error(`Letter "1" must be present between prefix and data only`);
      const prefix = lowered.slice(0, sepIndex);
      const data = lowered.slice(sepIndex + 1);
      if (data.length < 6)
        throw new Error("Data must be at least 6 characters long");
      const words = BECH_ALPHABET.decode(data).slice(0, -6);
      const sum = /* @__PURE__ */ bechChecksum(prefix, words, ENCODING_CONST);
      if (!data.endsWith(sum))
        throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
      return { prefix, words };
    }
    const decodeUnsafe = /* @__PURE__ */ unsafeWrapper(decode2);
    function decodeToBytes(str) {
      const { prefix, words } = decode2(str, false);
      return { prefix, words, bytes: fromWords2(words) };
    }
    return { encode: encode2, decode: decode2, decodeToBytes, decodeUnsafe, fromWords: fromWords2, fromWordsUnsafe: fromWordsUnsafe2, toWords: toWords2 };
  }
  exports2.bech32 = /* @__PURE__ */ genBech32("bech32");
  exports2.bech32m = /* @__PURE__ */ genBech32("bech32m");
  exports2.utf8 = {
    encode: (data) => new TextDecoder().decode(data),
    decode: (str) => new TextEncoder().encode(str)
  };
  exports2.hex = /* @__PURE__ */ chain(/* @__PURE__ */ radix2(4), /* @__PURE__ */ alphabet("0123456789abcdef"), /* @__PURE__ */ join(""), /* @__PURE__ */ normalize((s2) => {
    if (typeof s2 !== "string" || s2.length % 2)
      throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
    return s2.toLowerCase();
  }));
  const CODERS = {
    utf8: exports2.utf8,
    hex: exports2.hex,
    base16: exports2.base16,
    base32: exports2.base32,
    base64: exports2.base64,
    base64url: exports2.base64url,
    base58: exports2.base58,
    base58xmr: exports2.base58xmr
  };
  const coderTypeError = "Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr";
  const bytesToString = (type2, bytes2) => {
    if (typeof type2 !== "string" || !CODERS.hasOwnProperty(type2))
      throw new TypeError(coderTypeError);
    if (!isBytes2(bytes2))
      throw new TypeError("bytesToString() expects Uint8Array");
    return CODERS[type2].encode(bytes2);
  };
  exports2.bytesToString = bytesToString;
  exports2.str = exports2.bytesToString;
  const stringToBytes = (type2, str) => {
    if (!CODERS.hasOwnProperty(type2))
      throw new TypeError(coderTypeError);
    if (typeof str !== "string")
      throw new TypeError("stringToBytes() expects string");
    return CODERS[type2].decode(str);
  };
  exports2.stringToBytes = stringToBytes;
  exports2.bytes = exports2.stringToBytes;
})(lib$2);
var inherits_browser = { exports: {} };
var hasRequiredInherits_browser;
function requireInherits_browser() {
  if (hasRequiredInherits_browser) return inherits_browser.exports;
  hasRequiredInherits_browser = 1;
  if (typeof Object.create === "function") {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  return inherits_browser.exports;
}
var readableBrowser$1 = { exports: {} };
var events = { exports: {} };
var hasRequiredEvents;
function requireEvents() {
  if (hasRequiredEvents) return events.exports;
  hasRequiredEvents = 1;
  var R2 = typeof Reflect === "object" ? Reflect : null;
  var ReflectApply = R2 && typeof R2.apply === "function" ? R2.apply : function ReflectApply2(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };
  var ReflectOwnKeys;
  if (R2 && typeof R2.ownKeys === "function") {
    ReflectOwnKeys = R2.ownKeys;
  } else if (Object.getOwnPropertySymbols) {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
    };
  } else {
    ReflectOwnKeys = function ReflectOwnKeys2(target) {
      return Object.getOwnPropertyNames(target);
    };
  }
  function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
  }
  var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value3) {
    return value3 !== value3;
  };
  function EventEmitter() {
    EventEmitter.init.call(this);
  }
  events.exports = EventEmitter;
  events.exports.once = once;
  EventEmitter.EventEmitter = EventEmitter;
  EventEmitter.prototype._events = void 0;
  EventEmitter.prototype._eventsCount = 0;
  EventEmitter.prototype._maxListeners = void 0;
  var defaultMaxListeners = 10;
  function checkListener(listener) {
    if (typeof listener !== "function") {
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
    }
  }
  Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
        throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
      }
      defaultMaxListeners = arg;
    }
  });
  EventEmitter.init = function() {
    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || void 0;
  };
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n2) {
    if (typeof n2 !== "number" || n2 < 0 || NumberIsNaN(n2)) {
      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n2 + ".");
    }
    this._maxListeners = n2;
    return this;
  };
  function _getMaxListeners(that) {
    if (that._maxListeners === void 0)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }
  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
  };
  EventEmitter.prototype.emit = function emit(type2) {
    var args = [];
    for (var i2 = 1; i2 < arguments.length; i2++) args.push(arguments[i2]);
    var doError = type2 === "error";
    var events2 = this._events;
    if (events2 !== void 0)
      doError = doError && events2.error === void 0;
    else if (!doError)
      return false;
    if (doError) {
      var er;
      if (args.length > 0)
        er = args[0];
      if (er instanceof Error) {
        throw er;
      }
      var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
      err.context = er;
      throw err;
    }
    var handler = events2[type2];
    if (handler === void 0)
      return false;
    if (typeof handler === "function") {
      ReflectApply(handler, this, args);
    } else {
      var len2 = handler.length;
      var listeners2 = arrayClone(handler, len2);
      for (var i2 = 0; i2 < len2; ++i2)
        ReflectApply(listeners2[i2], this, args);
    }
    return true;
  };
  function _addListener(target, type2, listener, prepend) {
    var m2;
    var events2;
    var existing;
    checkListener(listener);
    events2 = target._events;
    if (events2 === void 0) {
      events2 = target._events = /* @__PURE__ */ Object.create(null);
      target._eventsCount = 0;
    } else {
      if (events2.newListener !== void 0) {
        target.emit(
          "newListener",
          type2,
          listener.listener ? listener.listener : listener
        );
        events2 = target._events;
      }
      existing = events2[type2];
    }
    if (existing === void 0) {
      existing = events2[type2] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === "function") {
        existing = events2[type2] = prepend ? [listener, existing] : [existing, listener];
      } else if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
      m2 = _getMaxListeners(target);
      if (m2 > 0 && existing.length > m2 && !existing.warned) {
        existing.warned = true;
        var w2 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type2) + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w2.name = "MaxListenersExceededWarning";
        w2.emitter = target;
        w2.type = type2;
        w2.count = existing.length;
        ProcessEmitWarning(w2);
      }
    }
    return target;
  }
  EventEmitter.prototype.addListener = function addListener(type2, listener) {
    return _addListener(this, type2, listener, false);
  };
  EventEmitter.prototype.on = EventEmitter.prototype.addListener;
  EventEmitter.prototype.prependListener = function prependListener(type2, listener) {
    return _addListener(this, type2, listener, true);
  };
  function onceWrapper() {
    if (!this.fired) {
      this.target.removeListener(this.type, this.wrapFn);
      this.fired = true;
      if (arguments.length === 0)
        return this.listener.call(this.target);
      return this.listener.apply(this.target, arguments);
    }
  }
  function _onceWrap(target, type2, listener) {
    var state2 = { fired: false, wrapFn: void 0, target, type: type2, listener };
    var wrapped = onceWrapper.bind(state2);
    wrapped.listener = listener;
    state2.wrapFn = wrapped;
    return wrapped;
  }
  EventEmitter.prototype.once = function once2(type2, listener) {
    checkListener(listener);
    this.on(type2, _onceWrap(this, type2, listener));
    return this;
  };
  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
    checkListener(listener);
    this.prependListener(type2, _onceWrap(this, type2, listener));
    return this;
  };
  EventEmitter.prototype.removeListener = function removeListener(type2, listener) {
    var list, events2, position, i2, originalListener;
    checkListener(listener);
    events2 = this._events;
    if (events2 === void 0)
      return this;
    list = events2[type2];
    if (list === void 0)
      return this;
    if (list === listener || list.listener === listener) {
      if (--this._eventsCount === 0)
        this._events = /* @__PURE__ */ Object.create(null);
      else {
        delete events2[type2];
        if (events2.removeListener)
          this.emit("removeListener", type2, list.listener || listener);
      }
    } else if (typeof list !== "function") {
      position = -1;
      for (i2 = list.length - 1; i2 >= 0; i2--) {
        if (list[i2] === listener || list[i2].listener === listener) {
          originalListener = list[i2].listener;
          position = i2;
          break;
        }
      }
      if (position < 0)
        return this;
      if (position === 0)
        list.shift();
      else {
        spliceOne(list, position);
      }
      if (list.length === 1)
        events2[type2] = list[0];
      if (events2.removeListener !== void 0)
        this.emit("removeListener", type2, originalListener || listener);
    }
    return this;
  };
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type2) {
    var listeners2, events2, i2;
    events2 = this._events;
    if (events2 === void 0)
      return this;
    if (events2.removeListener === void 0) {
      if (arguments.length === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      } else if (events2[type2] !== void 0) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else
          delete events2[type2];
      }
      return this;
    }
    if (arguments.length === 0) {
      var keys = Object.keys(events2);
      var key2;
      for (i2 = 0; i2 < keys.length; ++i2) {
        key2 = keys[i2];
        if (key2 === "removeListener") continue;
        this.removeAllListeners(key2);
      }
      this.removeAllListeners("removeListener");
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
      return this;
    }
    listeners2 = events2[type2];
    if (typeof listeners2 === "function") {
      this.removeListener(type2, listeners2);
    } else if (listeners2 !== void 0) {
      for (i2 = listeners2.length - 1; i2 >= 0; i2--) {
        this.removeListener(type2, listeners2[i2]);
      }
    }
    return this;
  };
  function _listeners(target, type2, unwrap) {
    var events2 = target._events;
    if (events2 === void 0)
      return [];
    var evlistener = events2[type2];
    if (evlistener === void 0)
      return [];
    if (typeof evlistener === "function")
      return unwrap ? [evlistener.listener || evlistener] : [evlistener];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
  }
  EventEmitter.prototype.listeners = function listeners2(type2) {
    return _listeners(this, type2, true);
  };
  EventEmitter.prototype.rawListeners = function rawListeners(type2) {
    return _listeners(this, type2, false);
  };
  EventEmitter.listenerCount = function(emitter, type2) {
    if (typeof emitter.listenerCount === "function") {
      return emitter.listenerCount(type2);
    } else {
      return listenerCount.call(emitter, type2);
    }
  };
  EventEmitter.prototype.listenerCount = listenerCount;
  function listenerCount(type2) {
    var events2 = this._events;
    if (events2 !== void 0) {
      var evlistener = events2[type2];
      if (typeof evlistener === "function") {
        return 1;
      } else if (evlistener !== void 0) {
        return evlistener.length;
      }
    }
    return 0;
  }
  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
  };
  function arrayClone(arr, n2) {
    var copy = new Array(n2);
    for (var i2 = 0; i2 < n2; ++i2)
      copy[i2] = arr[i2];
    return copy;
  }
  function spliceOne(list, index) {
    for (; index + 1 < list.length; index++)
      list[index] = list[index + 1];
    list.pop();
  }
  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i2 = 0; i2 < ret.length; ++i2) {
      ret[i2] = arr[i2].listener || arr[i2];
    }
    return ret;
  }
  function once(emitter, name2) {
    return new Promise(function(resolve, reject) {
      function errorListener(err) {
        emitter.removeListener(name2, resolver);
        reject(err);
      }
      function resolver() {
        if (typeof emitter.removeListener === "function") {
          emitter.removeListener("error", errorListener);
        }
        resolve([].slice.call(arguments));
      }
      eventTargetAgnosticAddListener(emitter, name2, resolver, { once: true });
      if (name2 !== "error") {
        addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
      }
    });
  }
  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") {
      eventTargetAgnosticAddListener(emitter, "error", handler, flags);
    }
  }
  function eventTargetAgnosticAddListener(emitter, name2, listener, flags) {
    if (typeof emitter.on === "function") {
      if (flags.once) {
        emitter.once(name2, listener);
      } else {
        emitter.on(name2, listener);
      }
    } else if (typeof emitter.addEventListener === "function") {
      emitter.addEventListener(name2, function wrapListener(arg) {
        if (flags.once) {
          emitter.removeEventListener(name2, wrapListener);
        }
        listener(arg);
      });
    } else {
      throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
    }
  }
  return events.exports;
}
var streamBrowser$1;
var hasRequiredStreamBrowser$1;
function requireStreamBrowser$1() {
  if (hasRequiredStreamBrowser$1) return streamBrowser$1;
  hasRequiredStreamBrowser$1 = 1;
  streamBrowser$1 = requireEvents().EventEmitter;
  return streamBrowser$1;
}
var util$1 = {};
var types$2 = {};
var shams$1;
var hasRequiredShams$1;
function requireShams$1() {
  if (hasRequiredShams$1) return shams$1;
  hasRequiredShams$1 = 1;
  shams$1 = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  return shams$1;
}
var shams;
var hasRequiredShams;
function requireShams() {
  if (hasRequiredShams) return shams;
  hasRequiredShams = 1;
  var hasSymbols2 = requireShams$1();
  shams = function hasToStringTagShams() {
    return hasSymbols2() && !!Symbol.toStringTag;
  };
  return shams;
}
var esErrors;
var hasRequiredEsErrors;
function requireEsErrors() {
  if (hasRequiredEsErrors) return esErrors;
  hasRequiredEsErrors = 1;
  esErrors = Error;
  return esErrors;
}
var _eval;
var hasRequired_eval;
function require_eval() {
  if (hasRequired_eval) return _eval;
  hasRequired_eval = 1;
  _eval = EvalError;
  return _eval;
}
var range;
var hasRequiredRange;
function requireRange() {
  if (hasRequiredRange) return range;
  hasRequiredRange = 1;
  range = RangeError;
  return range;
}
var ref;
var hasRequiredRef;
function requireRef() {
  if (hasRequiredRef) return ref;
  hasRequiredRef = 1;
  ref = ReferenceError;
  return ref;
}
var syntax;
var hasRequiredSyntax;
function requireSyntax() {
  if (hasRequiredSyntax) return syntax;
  hasRequiredSyntax = 1;
  syntax = SyntaxError;
  return syntax;
}
var type;
var hasRequiredType;
function requireType() {
  if (hasRequiredType) return type;
  hasRequiredType = 1;
  type = TypeError;
  return type;
}
var uri;
var hasRequiredUri;
function requireUri() {
  if (hasRequiredUri) return uri;
  hasRequiredUri = 1;
  uri = URIError;
  return uri;
}
var hasSymbols;
var hasRequiredHasSymbols;
function requireHasSymbols() {
  if (hasRequiredHasSymbols) return hasSymbols;
  hasRequiredHasSymbols = 1;
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = requireShams$1();
  hasSymbols = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  return hasSymbols;
}
var hasProto;
var hasRequiredHasProto;
function requireHasProto() {
  if (hasRequiredHasProto) return hasProto;
  hasRequiredHasProto = 1;
  var test = {
    __proto__: null,
    foo: {}
  };
  var $Object = Object;
  hasProto = function hasProto2() {
    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
  };
  return hasProto;
}
var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a2, b2) {
    var arr = [];
    for (var i2 = 0; i2 < a2.length; i2 += 1) {
      arr[i2] = a2[i2];
    }
    for (var j2 = 0; j2 < b2.length; j2 += 1) {
      arr[j2 + a2.length] = b2[j2];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset) {
    var arr = [];
    for (var i2 = offset, j2 = 0; i2 < arrLike.length; i2 += 1, j2 += 1) {
      arr[j2] = arrLike[i2];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i2 = 0; i2 < arr.length; i2 += 1) {
      str += arr[i2];
      if (i2 + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  implementation = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(
          this,
          concatty(args, arguments)
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(
        that,
        concatty(args, arguments)
      );
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i2 = 0; i2 < boundLength; i2++) {
      boundArgs[i2] = "$" + i2;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
  return implementation;
}
var functionBind;
var hasRequiredFunctionBind;
function requireFunctionBind() {
  if (hasRequiredFunctionBind) return functionBind;
  hasRequiredFunctionBind = 1;
  var implementation2 = requireImplementation();
  functionBind = Function.prototype.bind || implementation2;
  return functionBind;
}
var hasown;
var hasRequiredHasown;
function requireHasown() {
  if (hasRequiredHasown) return hasown;
  hasRequiredHasown = 1;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind = requireFunctionBind();
  hasown = bind.call(call, $hasOwn);
  return hasown;
}
var getIntrinsic;
var hasRequiredGetIntrinsic;
function requireGetIntrinsic() {
  if (hasRequiredGetIntrinsic) return getIntrinsic;
  hasRequiredGetIntrinsic = 1;
  var undefined$1;
  var $Error = requireEsErrors();
  var $EvalError = require_eval();
  var $RangeError = requireRange();
  var $ReferenceError = requireRef();
  var $SyntaxError = requireSyntax();
  var $TypeError = requireType();
  var $URIError = requireUri();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e2) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e2) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError();
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols2 = requireHasSymbols()();
  var hasProto2 = requireHasProto()();
  var getProto = Object.getPrototypeOf || (hasProto2 ? function(x2) {
    return x2.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols2 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols2 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols2 || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols2 && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols2 ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e2) {
      var errorProto = getProto(getProto(e2));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name2) {
    var value3;
    if (name2 === "%AsyncFunction%") {
      value3 = getEvalledConstructor("async function () {}");
    } else if (name2 === "%GeneratorFunction%") {
      value3 = getEvalledConstructor("function* () {}");
    } else if (name2 === "%AsyncGeneratorFunction%") {
      value3 = getEvalledConstructor("async function* () {}");
    } else if (name2 === "%AsyncGenerator%") {
      var fn = doEval2("%AsyncGeneratorFunction%");
      if (fn) {
        value3 = fn.prototype;
      }
    } else if (name2 === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto) {
        value3 = getProto(gen.prototype);
      }
    }
    INTRINSICS[name2] = value3;
    return value3;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = requireFunctionBind();
  var hasOwn = requireHasown();
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string2) {
    var first = $strSlice(string2, 0, 1);
    var last = $strSlice(string2, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string2, rePropName, function(match, number2, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name2, allowMissing) {
    var intrinsicName = name2;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value3 = INTRINSICS[intrinsicName];
      if (value3 === needsEval) {
        value3 = doEval(intrinsicName);
      }
      if (typeof value3 === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name2 + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value: value3
      };
    }
    throw new $SyntaxError("intrinsic " + name2 + " does not exist!");
  };
  getIntrinsic = function GetIntrinsic(name2, allowMissing) {
    if (typeof name2 !== "string" || name2.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name2) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name2);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value3 = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
      var part = parts[i2];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value3 = INTRINSICS[intrinsicRealName];
      } else if (value3 != null) {
        if (!(part in value3)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name2 + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD && i2 + 1 >= parts.length) {
          var desc = $gOPD(value3, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value3 = desc.get;
          } else {
            value3 = value3[part];
          }
        } else {
          isOwn = hasOwn(value3, part);
          value3 = value3[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value3;
        }
      }
    }
    return value3;
  };
  return getIntrinsic;
}
var callBind = { exports: {} };
var esDefineProperty;
var hasRequiredEsDefineProperty;
function requireEsDefineProperty() {
  if (hasRequiredEsDefineProperty) return esDefineProperty;
  hasRequiredEsDefineProperty = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e2) {
      $defineProperty = false;
    }
  }
  esDefineProperty = $defineProperty;
  return esDefineProperty;
}
var gopd;
var hasRequiredGopd;
function requireGopd() {
  if (hasRequiredGopd) return gopd;
  hasRequiredGopd = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e2) {
      $gOPD = null;
    }
  }
  gopd = $gOPD;
  return gopd;
}
var defineDataProperty;
var hasRequiredDefineDataProperty;
function requireDefineDataProperty() {
  if (hasRequiredDefineDataProperty) return defineDataProperty;
  hasRequiredDefineDataProperty = 1;
  var $defineProperty = requireEsDefineProperty();
  var $SyntaxError = requireSyntax();
  var $TypeError = requireType();
  var gopd2 = requireGopd();
  defineDataProperty = function defineDataProperty2(obj, property, value3) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError("`obj` must be an object or a function`");
    }
    if (typeof property !== "string" && typeof property !== "symbol") {
      throw new $TypeError("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd2 && gopd2(obj, property);
    if ($defineProperty) {
      $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value: value3,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property] = value3;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
  return defineDataProperty;
}
var hasPropertyDescriptors_1;
var hasRequiredHasPropertyDescriptors;
function requireHasPropertyDescriptors() {
  if (hasRequiredHasPropertyDescriptors) return hasPropertyDescriptors_1;
  hasRequiredHasPropertyDescriptors = 1;
  var $defineProperty = requireEsDefineProperty();
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e2) {
      return true;
    }
  };
  hasPropertyDescriptors_1 = hasPropertyDescriptors;
  return hasPropertyDescriptors_1;
}
var setFunctionLength;
var hasRequiredSetFunctionLength;
function requireSetFunctionLength() {
  if (hasRequiredSetFunctionLength) return setFunctionLength;
  hasRequiredSetFunctionLength = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var define = requireDefineDataProperty();
  var hasDescriptors = requireHasPropertyDescriptors()();
  var gOPD = requireGopd();
  var $TypeError = requireType();
  var $floor = GetIntrinsic("%Math.floor%");
  setFunctionLength = function setFunctionLength2(fn, length) {
    if (typeof fn !== "function") {
      throw new $TypeError("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
      throw new $TypeError("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
      var desc = gOPD(fn, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn,
          "length",
          length
        );
      }
    }
    return fn;
  };
  return setFunctionLength;
}
var hasRequiredCallBind;
function requireCallBind() {
  if (hasRequiredCallBind) return callBind.exports;
  hasRequiredCallBind = 1;
  (function(module) {
    var bind = requireFunctionBind();
    var GetIntrinsic = requireGetIntrinsic();
    var setFunctionLength2 = requireSetFunctionLength();
    var $TypeError = requireType();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = requireEsDefineProperty();
    var $max = GetIntrinsic("%Math.max%");
    module.exports = function callBind2(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength2(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  })(callBind);
  return callBind.exports;
}
var callBound;
var hasRequiredCallBound;
function requireCallBound() {
  if (hasRequiredCallBound) return callBound;
  hasRequiredCallBound = 1;
  var GetIntrinsic = requireGetIntrinsic();
  var callBind2 = requireCallBind();
  var $indexOf = callBind2(GetIntrinsic("String.prototype.indexOf"));
  callBound = function callBoundIntrinsic(name2, allowMissing) {
    var intrinsic = GetIntrinsic(name2, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name2, ".prototype.") > -1) {
      return callBind2(intrinsic);
    }
    return intrinsic;
  };
  return callBound;
}
var isArguments;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments) return isArguments;
  hasRequiredIsArguments = 1;
  var hasToStringTag = requireShams()();
  var callBound2 = requireCallBound();
  var $toString = callBound2("Object.prototype.toString");
  var isStandardArguments = function isArguments2(value3) {
    if (hasToStringTag && value3 && typeof value3 === "object" && Symbol.toStringTag in value3) {
      return false;
    }
    return $toString(value3) === "[object Arguments]";
  };
  var isLegacyArguments = function isArguments2(value3) {
    if (isStandardArguments(value3)) {
      return true;
    }
    return value3 !== null && typeof value3 === "object" && typeof value3.length === "number" && value3.length >= 0 && $toString(value3) !== "[object Array]" && $toString(value3.callee) === "[object Function]";
  };
  var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
  }();
  isStandardArguments.isLegacyArguments = isLegacyArguments;
  isArguments = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  return isArguments;
}
var isGeneratorFunction;
var hasRequiredIsGeneratorFunction;
function requireIsGeneratorFunction() {
  if (hasRequiredIsGeneratorFunction) return isGeneratorFunction;
  hasRequiredIsGeneratorFunction = 1;
  var toStr = Object.prototype.toString;
  var fnToStr = Function.prototype.toString;
  var isFnRegex = /^\s*(?:function)?\*/;
  var hasToStringTag = requireShams()();
  var getProto = Object.getPrototypeOf;
  var getGeneratorFunc = function() {
    if (!hasToStringTag) {
      return false;
    }
    try {
      return Function("return function*() {}")();
    } catch (e2) {
    }
  };
  var GeneratorFunction;
  isGeneratorFunction = function isGeneratorFunction2(fn) {
    if (typeof fn !== "function") {
      return false;
    }
    if (isFnRegex.test(fnToStr.call(fn))) {
      return true;
    }
    if (!hasToStringTag) {
      var str = toStr.call(fn);
      return str === "[object GeneratorFunction]";
    }
    if (!getProto) {
      return false;
    }
    if (typeof GeneratorFunction === "undefined") {
      var generatorFunc = getGeneratorFunc();
      GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
  };
  return isGeneratorFunction;
}
var isCallable;
var hasRequiredIsCallable;
function requireIsCallable() {
  if (hasRequiredIsCallable) return isCallable;
  hasRequiredIsCallable = 1;
  var fnToStr = Function.prototype.toString;
  var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
    try {
      badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
          throw isCallableMarker;
        }
      });
      isCallableMarker = {};
      reflectApply(function() {
        throw 42;
      }, null, badArrayLike);
    } catch (_2) {
      if (_2 !== isCallableMarker) {
        reflectApply = null;
      }
    }
  } else {
    reflectApply = null;
  }
  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value3) {
    try {
      var fnStr = fnToStr.call(value3);
      return constructorRegex.test(fnStr);
    } catch (e2) {
      return false;
    }
  };
  var tryFunctionObject = function tryFunctionToStr(value3) {
    try {
      if (isES6ClassFn(value3)) {
        return false;
      }
      fnToStr.call(value3);
      return true;
    } catch (e2) {
      return false;
    }
  };
  var toStr = Object.prototype.toString;
  var objectClass = "[object Object]";
  var fnClass = "[object Function]";
  var genClass = "[object GeneratorFunction]";
  var ddaClass = "[object HTMLAllCollection]";
  var ddaClass2 = "[object HTML document.all class]";
  var ddaClass3 = "[object HTMLCollection]";
  var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
  var isIE68 = !(0 in [,]);
  var isDDA = function isDocumentDotAll() {
    return false;
  };
  if (typeof document === "object") {
    var all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) {
      isDDA = function isDocumentDotAll(value3) {
        if ((isIE68 || !value3) && (typeof value3 === "undefined" || typeof value3 === "object")) {
          try {
            var str = toStr.call(value3);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value3("") == null;
          } catch (e2) {
          }
        }
        return false;
      };
    }
  }
  isCallable = reflectApply ? function isCallable2(value3) {
    if (isDDA(value3)) {
      return true;
    }
    if (!value3) {
      return false;
    }
    if (typeof value3 !== "function" && typeof value3 !== "object") {
      return false;
    }
    try {
      reflectApply(value3, null, badArrayLike);
    } catch (e2) {
      if (e2 !== isCallableMarker) {
        return false;
      }
    }
    return !isES6ClassFn(value3) && tryFunctionObject(value3);
  } : function isCallable2(value3) {
    if (isDDA(value3)) {
      return true;
    }
    if (!value3) {
      return false;
    }
    if (typeof value3 !== "function" && typeof value3 !== "object") {
      return false;
    }
    if (hasToStringTag) {
      return tryFunctionObject(value3);
    }
    if (isES6ClassFn(value3)) {
      return false;
    }
    var strClass = toStr.call(value3);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
      return false;
    }
    return tryFunctionObject(value3);
  };
  return isCallable;
}
var forEach_1;
var hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach) return forEach_1;
  hasRequiredForEach = 1;
  var isCallable2 = requireIsCallable();
  var toStr = Object.prototype.toString;
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  var forEachArray = function forEachArray2(array2, iterator, receiver) {
    for (var i2 = 0, len2 = array2.length; i2 < len2; i2++) {
      if (hasOwnProperty2.call(array2, i2)) {
        if (receiver == null) {
          iterator(array2[i2], i2, array2);
        } else {
          iterator.call(receiver, array2[i2], i2, array2);
        }
      }
    }
  };
  var forEachString = function forEachString2(string2, iterator, receiver) {
    for (var i2 = 0, len2 = string2.length; i2 < len2; i2++) {
      if (receiver == null) {
        iterator(string2.charAt(i2), i2, string2);
      } else {
        iterator.call(receiver, string2.charAt(i2), i2, string2);
      }
    }
  };
  var forEachObject = function forEachObject2(object3, iterator, receiver) {
    for (var k2 in object3) {
      if (hasOwnProperty2.call(object3, k2)) {
        if (receiver == null) {
          iterator(object3[k2], k2, object3);
        } else {
          iterator.call(receiver, object3[k2], k2, object3);
        }
      }
    }
  };
  var forEach2 = function forEach3(list, iterator, thisArg) {
    if (!isCallable2(iterator)) {
      throw new TypeError("iterator must be a function");
    }
    var receiver;
    if (arguments.length >= 3) {
      receiver = thisArg;
    }
    if (toStr.call(list) === "[object Array]") {
      forEachArray(list, iterator, receiver);
    } else if (typeof list === "string") {
      forEachString(list, iterator, receiver);
    } else {
      forEachObject(list, iterator, receiver);
    }
  };
  forEach_1 = forEach2;
  return forEach_1;
}
var possibleTypedArrayNames;
var hasRequiredPossibleTypedArrayNames;
function requirePossibleTypedArrayNames() {
  if (hasRequiredPossibleTypedArrayNames) return possibleTypedArrayNames;
  hasRequiredPossibleTypedArrayNames = 1;
  possibleTypedArrayNames = [
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Int16Array",
    "Int32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array"
  ];
  return possibleTypedArrayNames;
}
var availableTypedArrays;
var hasRequiredAvailableTypedArrays;
function requireAvailableTypedArrays() {
  if (hasRequiredAvailableTypedArrays) return availableTypedArrays;
  hasRequiredAvailableTypedArrays = 1;
  var possibleNames = requirePossibleTypedArrayNames();
  var g2 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  availableTypedArrays = function availableTypedArrays2() {
    var out = [];
    for (var i2 = 0; i2 < possibleNames.length; i2++) {
      if (typeof g2[possibleNames[i2]] === "function") {
        out[out.length] = possibleNames[i2];
      }
    }
    return out;
  };
  return availableTypedArrays;
}
var whichTypedArray;
var hasRequiredWhichTypedArray;
function requireWhichTypedArray() {
  if (hasRequiredWhichTypedArray) return whichTypedArray;
  hasRequiredWhichTypedArray = 1;
  var forEach2 = requireForEach();
  var availableTypedArrays2 = requireAvailableTypedArrays();
  var callBind2 = requireCallBind();
  var callBound2 = requireCallBound();
  var gOPD = requireGopd();
  var $toString = callBound2("Object.prototype.toString");
  var hasToStringTag = requireShams()();
  var g2 = typeof globalThis === "undefined" ? commonjsGlobal : globalThis;
  var typedArrays = availableTypedArrays2();
  var $slice = callBound2("String.prototype.slice");
  var getPrototypeOf = Object.getPrototypeOf;
  var $indexOf = callBound2("Array.prototype.indexOf", true) || function indexOf2(array2, value3) {
    for (var i2 = 0; i2 < array2.length; i2 += 1) {
      if (array2[i2] === value3) {
        return i2;
      }
    }
    return -1;
  };
  var cache = { __proto__: null };
  if (hasToStringTag && gOPD && getPrototypeOf) {
    forEach2(typedArrays, function(typedArray) {
      var arr = new g2[typedArray]();
      if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
          var superProto = getPrototypeOf(proto);
          descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        cache["$" + typedArray] = callBind2(descriptor.get);
      }
    });
  } else {
    forEach2(typedArrays, function(typedArray) {
      var arr = new g2[typedArray]();
      var fn = arr.slice || arr.set;
      if (fn) {
        cache["$" + typedArray] = callBind2(fn);
      }
    });
  }
  var tryTypedArrays = function tryAllTypedArrays(value3) {
    var found = false;
    forEach2(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      cache,
      /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, typedArray) {
        if (!found) {
          try {
            if ("$" + getter(value3) === typedArray) {
              found = $slice(typedArray, 1);
            }
          } catch (e2) {
          }
        }
      }
    );
    return found;
  };
  var trySlices = function tryAllSlices(value3) {
    var found = false;
    forEach2(
      // eslint-disable-next-line no-extra-parens
      /** @type {Record<`\$${TypedArrayName}`, Getter>} */
      /** @type {any} */
      cache,
      /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
      function(getter, name2) {
        if (!found) {
          try {
            getter(value3);
            found = $slice(name2, 1);
          } catch (e2) {
          }
        }
      }
    );
    return found;
  };
  whichTypedArray = function whichTypedArray2(value3) {
    if (!value3 || typeof value3 !== "object") {
      return false;
    }
    if (!hasToStringTag) {
      var tag = $slice($toString(value3), 8, -1);
      if ($indexOf(typedArrays, tag) > -1) {
        return tag;
      }
      if (tag !== "Object") {
        return false;
      }
      return trySlices(value3);
    }
    if (!gOPD) {
      return null;
    }
    return tryTypedArrays(value3);
  };
  return whichTypedArray;
}
var isTypedArray;
var hasRequiredIsTypedArray;
function requireIsTypedArray() {
  if (hasRequiredIsTypedArray) return isTypedArray;
  hasRequiredIsTypedArray = 1;
  var whichTypedArray2 = requireWhichTypedArray();
  isTypedArray = function isTypedArray2(value3) {
    return !!whichTypedArray2(value3);
  };
  return isTypedArray;
}
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes) return types$2;
  hasRequiredTypes = 1;
  (function(exports2) {
    var isArgumentsObject = requireIsArguments();
    var isGeneratorFunction2 = requireIsGeneratorFunction();
    var whichTypedArray2 = requireWhichTypedArray();
    var isTypedArray2 = requireIsTypedArray();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    if (SymbolSupported) {
      var symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    function checkBoxedPrimitive(value3, prototypeValueOf) {
      if (typeof value3 !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value3);
        return true;
      } catch (e2) {
        return false;
      }
    }
    exports2.isArgumentsObject = isArgumentsObject;
    exports2.isGeneratorFunction = isGeneratorFunction2;
    exports2.isTypedArray = isTypedArray2;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports2.isPromise = isPromise;
    function isArrayBufferView(value3) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value3);
      }
      return isTypedArray2(value3) || isDataView(value3);
    }
    exports2.isArrayBufferView = isArrayBufferView;
    function isUint8Array2(value3) {
      return whichTypedArray2(value3) === "Uint8Array";
    }
    exports2.isUint8Array = isUint8Array2;
    function isUint8ClampedArray(value3) {
      return whichTypedArray2(value3) === "Uint8ClampedArray";
    }
    exports2.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value3) {
      return whichTypedArray2(value3) === "Uint16Array";
    }
    exports2.isUint16Array = isUint16Array;
    function isUint32Array(value3) {
      return whichTypedArray2(value3) === "Uint32Array";
    }
    exports2.isUint32Array = isUint32Array;
    function isInt8Array(value3) {
      return whichTypedArray2(value3) === "Int8Array";
    }
    exports2.isInt8Array = isInt8Array;
    function isInt16Array(value3) {
      return whichTypedArray2(value3) === "Int16Array";
    }
    exports2.isInt16Array = isInt16Array;
    function isInt32Array(value3) {
      return whichTypedArray2(value3) === "Int32Array";
    }
    exports2.isInt32Array = isInt32Array;
    function isFloat32Array(value3) {
      return whichTypedArray2(value3) === "Float32Array";
    }
    exports2.isFloat32Array = isFloat32Array;
    function isFloat64Array(value3) {
      return whichTypedArray2(value3) === "Float64Array";
    }
    exports2.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value3) {
      return whichTypedArray2(value3) === "BigInt64Array";
    }
    exports2.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value3) {
      return whichTypedArray2(value3) === "BigUint64Array";
    }
    exports2.isBigUint64Array = isBigUint64Array;
    function isMapToString(value3) {
      return ObjectToString(value3) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value3) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value3) : value3 instanceof Map;
    }
    exports2.isMap = isMap;
    function isSetToString(value3) {
      return ObjectToString(value3) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value3) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value3) : value3 instanceof Set;
    }
    exports2.isSet = isSet;
    function isWeakMapToString(value3) {
      return ObjectToString(value3) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value3) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value3) : value3 instanceof WeakMap;
    }
    exports2.isWeakMap = isWeakMap;
    function isWeakSetToString(value3) {
      return ObjectToString(value3) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value3) {
      return isWeakSetToString(value3);
    }
    exports2.isWeakSet = isWeakSet;
    function isArrayBufferToString(value3) {
      return ObjectToString(value3) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer(value3) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value3) : value3 instanceof ArrayBuffer;
    }
    exports2.isArrayBuffer = isArrayBuffer;
    function isDataViewToString(value3) {
      return ObjectToString(value3) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value3) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value3) : value3 instanceof DataView;
    }
    exports2.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value3) {
      return ObjectToString(value3) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value3) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value3) : value3 instanceof SharedArrayBufferCopy;
    }
    exports2.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value3) {
      return ObjectToString(value3) === "[object AsyncFunction]";
    }
    exports2.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value3) {
      return ObjectToString(value3) === "[object Map Iterator]";
    }
    exports2.isMapIterator = isMapIterator;
    function isSetIterator(value3) {
      return ObjectToString(value3) === "[object Set Iterator]";
    }
    exports2.isSetIterator = isSetIterator;
    function isGeneratorObject(value3) {
      return ObjectToString(value3) === "[object Generator]";
    }
    exports2.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value3) {
      return ObjectToString(value3) === "[object WebAssembly.Module]";
    }
    exports2.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value3) {
      return checkBoxedPrimitive(value3, numberValue);
    }
    exports2.isNumberObject = isNumberObject;
    function isStringObject(value3) {
      return checkBoxedPrimitive(value3, stringValue);
    }
    exports2.isStringObject = isStringObject;
    function isBooleanObject(value3) {
      return checkBoxedPrimitive(value3, booleanValue);
    }
    exports2.isBooleanObject = isBooleanObject;
    function isBigIntObject(value3) {
      return BigIntSupported && checkBoxedPrimitive(value3, bigIntValue);
    }
    exports2.isBigIntObject = isBigIntObject;
    function isSymbolObject(value3) {
      return SymbolSupported && checkBoxedPrimitive(value3, symbolValue);
    }
    exports2.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value3) {
      return isNumberObject(value3) || isStringObject(value3) || isBooleanObject(value3) || isBigIntObject(value3) || isSymbolObject(value3);
    }
    exports2.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value3) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer(value3) || isSharedArrayBuffer(value3));
    }
    exports2.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports2, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  })(types$2);
  return types$2;
}
var isBufferBrowser;
var hasRequiredIsBufferBrowser;
function requireIsBufferBrowser() {
  if (hasRequiredIsBufferBrowser) return isBufferBrowser;
  hasRequiredIsBufferBrowser = 1;
  isBufferBrowser = function isBuffer(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
  };
  return isBufferBrowser;
}
var hasRequiredUtil$1;
function requireUtil$1() {
  if (hasRequiredUtil$1) return util$1;
  hasRequiredUtil$1 = 1;
  (function(exports2) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i2 = 0; i2 < keys.length; i2++) {
        descriptors[keys[i2]] = Object.getOwnPropertyDescriptor(obj, keys[i2]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports2.format = function(f2) {
      if (!isString2(f2)) {
        var objects = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          objects.push(inspect(arguments[i2]));
        }
        return objects.join(" ");
      }
      var i2 = 1;
      var args = arguments;
      var len2 = args.length;
      var str = String(f2).replace(formatRegExp, function(x3) {
        if (x3 === "%%") return "%";
        if (i2 >= len2) return x3;
        switch (x3) {
          case "%s":
            return String(args[i2++]);
          case "%d":
            return Number(args[i2++]);
          case "%j":
            try {
              return JSON.stringify(args[i2++]);
            } catch (_2) {
              return "[Circular]";
            }
          default:
            return x3;
        }
      });
      for (var x2 = args[i2]; i2 < len2; x2 = args[++i2]) {
        if (isNull(x2) || !isObject2(x2)) {
          str += " " + x2;
        } else {
          str += " " + inspect(x2);
        }
      }
      return str;
    };
    exports2.deprecate = function(fn, msg) {
      if (typeof process$1 !== "undefined" && process$1.noDeprecation === true) {
        return fn;
      }
      if (typeof process$1 === "undefined") {
        return function() {
          return exports2.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process$1.throwDeprecation) {
            throw new Error(msg);
          } else if (process$1.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (process$1.env.NODE_DEBUG) {
      var debugEnv = process$1.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    exports2.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process$1.pid;
          debugs[set] = function() {
            var msg = exports2.format.apply(exports2, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports2._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports2.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array2) {
      var hash2 = {};
      array2.forEach(function(val, idx) {
        hash2[val] = true;
      });
      return hash2;
    }
    function formatValue(ctx, value3, recurseTimes) {
      if (ctx.customInspect && value3 && isFunction2(value3.inspect) && // Filter out the util module, it's inspect function is special
      value3.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
      !(value3.constructor && value3.constructor.prototype === value3)) {
        var ret = value3.inspect(recurseTimes, ctx);
        if (!isString2(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value3);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value3);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value3);
      }
      if (isError(value3) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value3);
      }
      if (keys.length === 0) {
        if (isFunction2(value3)) {
          var name2 = value3.name ? ": " + value3.name : "";
          return ctx.stylize("[Function" + name2 + "]", "special");
        }
        if (isRegExp(value3)) {
          return ctx.stylize(RegExp.prototype.toString.call(value3), "regexp");
        }
        if (isDate(value3)) {
          return ctx.stylize(Date.prototype.toString.call(value3), "date");
        }
        if (isError(value3)) {
          return formatError(value3);
        }
      }
      var base2 = "", array2 = false, braces = ["{", "}"];
      if (isArray(value3)) {
        array2 = true;
        braces = ["[", "]"];
      }
      if (isFunction2(value3)) {
        var n2 = value3.name ? ": " + value3.name : "";
        base2 = " [Function" + n2 + "]";
      }
      if (isRegExp(value3)) {
        base2 = " " + RegExp.prototype.toString.call(value3);
      }
      if (isDate(value3)) {
        base2 = " " + Date.prototype.toUTCString.call(value3);
      }
      if (isError(value3)) {
        base2 = " " + formatError(value3);
      }
      if (keys.length === 0 && (!array2 || value3.length == 0)) {
        return braces[0] + base2 + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value3)) {
          return ctx.stylize(RegExp.prototype.toString.call(value3), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value3);
      var output2;
      if (array2) {
        output2 = formatArray(ctx, value3, recurseTimes, visibleKeys, keys);
      } else {
        output2 = keys.map(function(key2) {
          return formatProperty(ctx, value3, recurseTimes, visibleKeys, key2, array2);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output2, base2, braces);
    }
    function formatPrimitive(ctx, value3) {
      if (isUndefined(value3))
        return ctx.stylize("undefined", "undefined");
      if (isString2(value3)) {
        var simple = "'" + JSON.stringify(value3).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber2(value3))
        return ctx.stylize("" + value3, "number");
      if (isBoolean(value3))
        return ctx.stylize("" + value3, "boolean");
      if (isNull(value3))
        return ctx.stylize("null", "null");
    }
    function formatError(value3) {
      return "[" + Error.prototype.toString.call(value3) + "]";
    }
    function formatArray(ctx, value3, recurseTimes, visibleKeys, keys) {
      var output2 = [];
      for (var i2 = 0, l2 = value3.length; i2 < l2; ++i2) {
        if (hasOwnProperty2(value3, String(i2))) {
          output2.push(formatProperty(
            ctx,
            value3,
            recurseTimes,
            visibleKeys,
            String(i2),
            true
          ));
        } else {
          output2.push("");
        }
      }
      keys.forEach(function(key2) {
        if (!key2.match(/^\d+$/)) {
          output2.push(formatProperty(
            ctx,
            value3,
            recurseTimes,
            visibleKeys,
            key2,
            true
          ));
        }
      });
      return output2;
    }
    function formatProperty(ctx, value3, recurseTimes, visibleKeys, key2, array2) {
      var name2, str, desc;
      desc = Object.getOwnPropertyDescriptor(value3, key2) || { value: value3[key2] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty2(visibleKeys, key2)) {
        name2 = "[" + key2 + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array2) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name2)) {
        if (array2 && key2.match(/^\d+$/)) {
          return str;
        }
        name2 = JSON.stringify("" + key2);
        if (name2.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name2 = name2.slice(1, -1);
          name2 = ctx.stylize(name2, "name");
        } else {
          name2 = name2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name2 = ctx.stylize(name2, "string");
        }
      }
      return name2 + ": " + str;
    }
    function reduceToSingleString(output2, base2, braces) {
      var length = output2.reduce(function(prev, cur) {
        if (cur.indexOf("\n") >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base2 === "" ? "" : base2 + "\n ") + " " + output2.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base2 + " " + output2.join(", ") + " " + braces[1];
    }
    exports2.types = requireTypes();
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports2.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber2(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber2;
    function isString2(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString2;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject2(re) && objectToString2(re) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    exports2.types.isRegExp = isRegExp;
    function isObject2(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject2;
    function isDate(d2) {
      return isObject2(d2) && objectToString2(d2) === "[object Date]";
    }
    exports2.isDate = isDate;
    exports2.types.isDate = isDate;
    function isError(e2) {
      return isObject2(e2) && (objectToString2(e2) === "[object Error]" || e2 instanceof Error);
    }
    exports2.isError = isError;
    exports2.types.isNativeError = isError;
    function isFunction2(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction2;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = requireIsBufferBrowser();
    function objectToString2(o3) {
      return Object.prototype.toString.call(o3);
    }
    function pad2(n2) {
      return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d2 = /* @__PURE__ */ new Date();
      var time = [
        pad2(d2.getHours()),
        pad2(d2.getMinutes()),
        pad2(d2.getSeconds())
      ].join(":");
      return [d2.getDate(), months[d2.getMonth()], time].join(" ");
    }
    exports2.log = function() {
      console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
    };
    exports2.inherits = requireInherits_browser();
    exports2._extend = function(origin, add2) {
      if (!add2 || !isObject2(add2)) return origin;
      var keys = Object.keys(add2);
      var i2 = keys.length;
      while (i2--) {
        origin[keys[i2]] = add2[keys[i2]];
      }
      return origin;
    };
    function hasOwnProperty2(obj, prop2) {
      return Object.prototype.hasOwnProperty.call(obj, prop2);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports2.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          args.push(arguments[i2]);
        }
        args.push(function(err, value3) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value3);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports2.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i2 = 0; i2 < arguments.length; i2++) {
          args.push(arguments[i2]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process$1.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            process$1.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports2.callbackify = callbackify;
  })(util$1);
  return util$1;
}
var buffer_list;
var hasRequiredBuffer_list;
function requireBuffer_list() {
  if (hasRequiredBuffer_list) return buffer_list;
  hasRequiredBuffer_list = 1;
  function ownKeys(object3, enumerableOnly) {
    var keys = Object.keys(object3);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object3);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object3, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = null != arguments[i2] ? arguments[i2] : {};
      i2 % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
        _defineProperty(target, key2, source[key2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
        Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
      });
    }
    return target;
  }
  function _defineProperty(obj, key2, value3) {
    key2 = _toPropertyKey(key2);
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value: value3, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value3;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
  function _toPropertyKey(arg) {
    var key2 = _toPrimitive(arg, "string");
    return typeof key2 === "symbol" ? key2 : String(key2);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var _require = require$$1$2, Buffer2 = _require.Buffer;
  var _require2 = requireUtil$1(), inspect = _require2.inspect;
  var custom = inspect && inspect.custom || "inspect";
  function copyBuffer(src2, target, offset) {
    Buffer2.prototype.copy.call(src2, target, offset);
  }
  buffer_list = /* @__PURE__ */ function() {
    function BufferList2() {
      _classCallCheck(this, BufferList2);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList2, [{
      key: "push",
      value: function push(v2) {
        var entry = {
          data: v2,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v2) {
        var entry = {
          data: v2,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s2) {
        if (this.length === 0) return "";
        var p2 = this.head;
        var ret = "" + p2.data;
        while (p2 = p2.next) ret += s2 + p2.data;
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n2) {
        if (this.length === 0) return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n2 >>> 0);
        var p2 = this.head;
        var i2 = 0;
        while (p2) {
          copyBuffer(p2.data, ret, i2);
          i2 += p2.data.length;
          p2 = p2.next;
        }
        return ret;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function consume(n2, hasStrings) {
        var ret;
        if (n2 < this.head.data.length) {
          ret = this.head.data.slice(0, n2);
          this.head.data = this.head.data.slice(n2);
        } else if (n2 === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n2) : this._getBuffer(n2);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function _getString(n2) {
        var p2 = this.head;
        var c2 = 1;
        var ret = p2.data;
        n2 -= ret.length;
        while (p2 = p2.next) {
          var str = p2.data;
          var nb = n2 > str.length ? str.length : n2;
          if (nb === str.length) ret += str;
          else ret += str.slice(0, n2);
          n2 -= nb;
          if (n2 === 0) {
            if (nb === str.length) {
              ++c2;
              if (p2.next) this.head = p2.next;
              else this.head = this.tail = null;
            } else {
              this.head = p2;
              p2.data = str.slice(nb);
            }
            break;
          }
          ++c2;
        }
        this.length -= c2;
        return ret;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n2) {
        var ret = Buffer2.allocUnsafe(n2);
        var p2 = this.head;
        var c2 = 1;
        p2.data.copy(ret);
        n2 -= p2.data.length;
        while (p2 = p2.next) {
          var buf = p2.data;
          var nb = n2 > buf.length ? buf.length : n2;
          buf.copy(ret, ret.length - n2, 0, nb);
          n2 -= nb;
          if (n2 === 0) {
            if (nb === buf.length) {
              ++c2;
              if (p2.next) this.head = p2.next;
              else this.head = this.tail = null;
            } else {
              this.head = p2;
              p2.data = buf.slice(nb);
            }
            break;
          }
          ++c2;
        }
        this.length -= c2;
        return ret;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: custom,
      value: function value3(_2, options) {
        return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: false
        }));
      }
    }]);
    return BufferList2;
  }();
  return buffer_list;
}
var destroy_1$1;
var hasRequiredDestroy$1;
function requireDestroy$1() {
  if (hasRequiredDestroy$1) return destroy_1$1;
  hasRequiredDestroy$1 = 1;
  function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          process$1.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process$1.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb && err2) {
        if (!_this._writableState) {
          process$1.nextTick(emitErrorAndCloseNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process$1.nextTick(emitErrorAndCloseNT, _this, err2);
        } else {
          process$1.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        process$1.nextTick(emitCloseNT, _this);
        cb(err2);
      } else {
        process$1.nextTick(emitCloseNT, _this);
      }
    });
    return this;
  }
  function emitErrorAndCloseNT(self2, err) {
    emitErrorNT(self2, err);
    emitCloseNT(self2);
  }
  function emitCloseNT(self2) {
    if (self2._writableState && !self2._writableState.emitClose) return;
    if (self2._readableState && !self2._readableState.emitClose) return;
    self2.emit("close");
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  function errorOrDestroy(stream, err) {
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
  }
  destroy_1$1 = {
    destroy,
    undestroy,
    errorOrDestroy
  };
  return destroy_1$1;
}
var errorsBrowser = {};
var hasRequiredErrorsBrowser;
function requireErrorsBrowser() {
  if (hasRequiredErrorsBrowser) return errorsBrowser;
  hasRequiredErrorsBrowser = 1;
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  var codes = {};
  function createErrorType(code2, message, Base) {
    if (!Base) {
      Base = Error;
    }
    function getMessage(arg1, arg2, arg3) {
      if (typeof message === "string") {
        return message;
      } else {
        return message(arg1, arg2, arg3);
      }
    }
    var NodeError = /* @__PURE__ */ function(_Base) {
      _inheritsLoose(NodeError2, _Base);
      function NodeError2(arg1, arg2, arg3) {
        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
      }
      return NodeError2;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code2;
    codes[code2] = NodeError;
  }
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      var len2 = expected.length;
      expected = expected.map(function(i2) {
        return String(i2);
      });
      if (len2 > 2) {
        return "one of ".concat(thing, " ").concat(expected.slice(0, len2 - 1).join(", "), ", or ") + expected[len2 - 1];
      } else if (len2 === 2) {
        return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
      } else {
        return "of ".concat(thing, " ").concat(expected[0]);
      }
    } else {
      return "of ".concat(thing, " ").concat(String(expected));
    }
  }
  function startsWith(str, search, pos) {
    return str.substr(0, search.length) === search;
  }
  function endsWith(str, search, this_len) {
    if (this_len === void 0 || this_len > str.length) {
      this_len = str.length;
    }
    return str.substring(this_len - search.length, this_len) === search;
  }
  function includes(str, search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value3) {
    return 'The value "' + value3 + '" is invalid for option "' + name2 + '"';
  }, TypeError);
  createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
      determiner = "must not be";
      expected = expected.replace(/^not /, "");
    } else {
      determiner = "must be";
    }
    var msg;
    if (endsWith(name2, " argument")) {
      msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    } else {
      var type2 = includes(name2, ".") ? "property" : "argument";
      msg = 'The "'.concat(name2, '" ').concat(type2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
  }, TypeError);
  createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
  createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
    return "The " + name2 + " method is not implemented";
  });
  createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
  createErrorType("ERR_STREAM_DESTROYED", function(name2) {
    return "Cannot call " + name2 + " after a stream was destroyed";
  });
  createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
  createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
  createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
  createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
  }, TypeError);
  createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
  errorsBrowser.codes = codes;
  return errorsBrowser;
}
var state;
var hasRequiredState;
function requireState() {
  if (hasRequiredState) return state;
  hasRequiredState = 1;
  var ERR_INVALID_OPT_VALUE = requireErrorsBrowser().codes.ERR_INVALID_OPT_VALUE;
  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  function getHighWaterMark(state2, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name2 = isDuplex ? duplexKey : "highWaterMark";
        throw new ERR_INVALID_OPT_VALUE(name2, hwm);
      }
      return Math.floor(hwm);
    }
    return state2.objectMode ? 16 : 16 * 1024;
  }
  state = {
    getHighWaterMark
  };
  return state;
}
var browser$b;
var hasRequiredBrowser$a;
function requireBrowser$a() {
  if (hasRequiredBrowser$a) return browser$b;
  hasRequiredBrowser$a = 1;
  browser$b = deprecate;
  function deprecate(fn, msg) {
    if (config("noDeprecation")) {
      return fn;
    }
    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config("throwDeprecation")) {
          throw new Error(msg);
        } else if (config("traceDeprecation")) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }
    return deprecated;
  }
  function config(name2) {
    try {
      if (!commonjsGlobal.localStorage) return false;
    } catch (_2) {
      return false;
    }
    var val = commonjsGlobal.localStorage[name2];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
  }
  return browser$b;
}
var _stream_writable$1;
var hasRequired_stream_writable$1;
function require_stream_writable$1() {
  if (hasRequired_stream_writable$1) return _stream_writable$1;
  hasRequired_stream_writable$1 = 1;
  _stream_writable$1 = Writable;
  function CorkedRequest(state2) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state2);
    };
  }
  var Duplex;
  Writable.WritableState = WritableState;
  var internalUtil = {
    deprecate: requireBrowser$a()
  };
  var Stream = requireStreamBrowser$1();
  var Buffer2 = require$$1$2.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = requireDestroy$1();
  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  requireInherits_browser()(Writable, Stream);
  function nop() {
  }
  function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require_stream_duplex$1();
    options = options || {};
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_2) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function value3(object3) {
        if (realHasInstance.call(this, object3)) return true;
        if (this !== Writable) return false;
        return object3 && object3._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object3) {
      return object3 instanceof this;
    };
  }
  function Writable(options) {
    Duplex = Duplex || require_stream_duplex$1();
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function") this._write = options.write;
      if (typeof options.writev === "function") this._writev = options.writev;
      if (typeof options.destroy === "function") this._destroy = options.destroy;
      if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy(stream, er);
    process$1.nextTick(cb, er);
  }
  function validChunk(stream, state2, chunk, cb) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy(stream, er);
      process$1.nextTick(cb, er);
      return false;
    }
    return true;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    var ret = false;
    var isBuf = !state2.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer2.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state2.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state2.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state2, chunk, cb)) {
      state2.pendingcb++;
      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable.prototype.uncork = function() {
    var state2 = this._writableState;
    if (state2.corked) {
      state2.corked--;
      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state2, chunk, encoding) {
    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer2.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state2, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len2 = state2.objectMode ? 1 : chunk.length;
    state2.length += len2;
    var ret = state2.length < state2.highWaterMark;
    if (!ret) state2.needDrain = true;
    if (state2.writing || state2.corked) {
      var last = state2.lastBufferedRequest;
      state2.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state2.lastBufferedRequest;
      } else {
        state2.bufferedRequest = state2.lastBufferedRequest;
      }
      state2.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state2, false, len2, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream, state2, writev, len2, chunk, encoding, cb) {
    state2.writelen = len2;
    state2.writecb = cb;
    state2.writing = true;
    state2.sync = true;
    if (state2.destroyed) state2.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state2.onwrite);
    else stream._write(chunk, encoding, state2.onwrite);
    state2.sync = false;
  }
  function onwriteError(stream, state2, sync, er, cb) {
    --state2.pendingcb;
    if (sync) {
      process$1.nextTick(cb, er);
      process$1.nextTick(finishMaybe, stream, state2);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
    } else {
      cb(er);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
      finishMaybe(stream, state2);
    }
  }
  function onwriteStateUpdate(state2) {
    state2.writing = false;
    state2.writecb = null;
    state2.length -= state2.writelen;
    state2.writelen = 0;
  }
  function onwrite(stream, er) {
    var state2 = stream._writableState;
    var sync = state2.sync;
    var cb = state2.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state2);
    if (er) onwriteError(stream, state2, sync, er, cb);
    else {
      var finished = needFinish(state2) || stream.destroyed;
      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
        clearBuffer(stream, state2);
      }
      if (sync) {
        process$1.nextTick(afterWrite, stream, state2, finished, cb);
      } else {
        afterWrite(stream, state2, finished, cb);
      }
    }
  }
  function afterWrite(stream, state2, finished, cb) {
    if (!finished) onwriteDrain(stream, state2);
    state2.pendingcb--;
    cb();
    finishMaybe(stream, state2);
  }
  function onwriteDrain(stream, state2) {
    if (state2.length === 0 && state2.needDrain) {
      state2.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state2) {
    state2.bufferProcessing = true;
    var entry = state2.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l2 = state2.bufferedRequestCount;
      var buffer2 = new Array(l2);
      var holder = state2.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer2[count] = entry;
        if (!entry.isBuf) allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer2.allBuffers = allBuffers;
      doWrite(stream, state2, true, state2.length, buffer2, "", holder.finish);
      state2.pendingcb++;
      state2.lastBufferedRequest = null;
      if (holder.next) {
        state2.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state2.corkedRequestsFree = new CorkedRequest(state2);
      }
      state2.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len2 = state2.objectMode ? 1 : chunk.length;
        doWrite(stream, state2, false, len2, chunk, encoding, cb);
        entry = entry.next;
        state2.bufferedRequestCount--;
        if (state2.writing) {
          break;
        }
      }
      if (entry === null) state2.lastBufferedRequest = null;
    }
    state2.bufferedRequest = entry;
    state2.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
    if (state2.corked) {
      state2.corked = 1;
      this.uncork();
    }
    if (!state2.ending) endWritable(this, state2, cb);
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._writableState.length;
    }
  });
  function needFinish(state2) {
    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
  }
  function callFinal(stream, state2) {
    stream._final(function(err) {
      state2.pendingcb--;
      if (err) {
        errorOrDestroy(stream, err);
      }
      state2.prefinished = true;
      stream.emit("prefinish");
      finishMaybe(stream, state2);
    });
  }
  function prefinish(stream, state2) {
    if (!state2.prefinished && !state2.finalCalled) {
      if (typeof stream._final === "function" && !state2.destroyed) {
        state2.pendingcb++;
        state2.finalCalled = true;
        process$1.nextTick(callFinal, stream, state2);
      } else {
        state2.prefinished = true;
        stream.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream, state2) {
    var need = needFinish(state2);
    if (need) {
      prefinish(stream, state2);
      if (state2.pendingcb === 0) {
        state2.finished = true;
        stream.emit("finish");
        if (state2.autoDestroy) {
          var rState = stream._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream, state2, cb) {
    state2.ending = true;
    finishMaybe(stream, state2);
    if (cb) {
      if (state2.finished) process$1.nextTick(cb);
      else stream.once("finish", cb);
    }
    state2.ended = true;
    stream.writable = false;
  }
  function onCorkedFinish(corkReq, state2, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state2.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    state2.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value3) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value3;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err, cb) {
    cb(err);
  };
  return _stream_writable$1;
}
var _stream_duplex$1;
var hasRequired_stream_duplex$1;
function require_stream_duplex$1() {
  if (hasRequired_stream_duplex$1) return _stream_duplex$1;
  hasRequired_stream_duplex$1 = 1;
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key2 in obj) keys2.push(key2);
    return keys2;
  };
  _stream_duplex$1 = Duplex;
  var Readable = require_stream_readable$1();
  var Writable = require_stream_writable$1();
  requireInherits_browser()(Duplex, Readable);
  {
    var keys = objectKeys(Writable.prototype);
    for (var v2 = 0; v2 < keys.length; v2++) {
      var method = keys[v2];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false) this.readable = false;
      if (options.writable === false) this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended) return;
    process$1.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value3) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value3;
      this._writableState.destroyed = value3;
    }
  });
  return _stream_duplex$1;
}
var string_decoder = {};
var hasRequiredString_decoder;
function requireString_decoder() {
  if (hasRequiredString_decoder) return string_decoder;
  hasRequiredString_decoder = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var isEncoding = Buffer2.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return true;
      default:
        return false;
    }
  };
  function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while (true) {
      switch (enc) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return enc;
        default:
          if (retried) return;
          enc = ("" + enc).toLowerCase();
          retried = true;
      }
    }
  }
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
  }
  string_decoder.StringDecoder = StringDecoder;
  function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case "utf16le":
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case "utf8":
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case "base64":
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer2.allocUnsafe(nb);
  }
  StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r2;
    var i2;
    if (this.lastNeed) {
      r2 = this.fillLast(buf);
      if (r2 === void 0) return "";
      i2 = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i2 = 0;
    }
    if (i2 < buf.length) return r2 ? r2 + this.text(buf, i2) : this.text(buf, i2);
    return r2 || "";
  };
  StringDecoder.prototype.end = utf8End;
  StringDecoder.prototype.text = utf8Text;
  StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };
  function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
  }
  function utf8CheckIncomplete(self2, buf, i2) {
    var j2 = buf.length - 1;
    if (j2 < i2) return 0;
    var nb = utf8CheckByte(buf[j2]);
    if (nb >= 0) {
      if (nb > 0) self2.lastNeed = nb - 1;
      return nb;
    }
    if (--j2 < i2 || nb === -2) return 0;
    nb = utf8CheckByte(buf[j2]);
    if (nb >= 0) {
      if (nb > 0) self2.lastNeed = nb - 2;
      return nb;
    }
    if (--j2 < i2 || nb === -2) return 0;
    nb = utf8CheckByte(buf[j2]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;
        else self2.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }
  function utf8CheckExtraBytes(self2, buf, p2) {
    if ((buf[0] & 192) !== 128) {
      self2.lastNeed = 0;
      return "�";
    }
    if (self2.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 192) !== 128) {
        self2.lastNeed = 1;
        return "�";
      }
      if (self2.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 192) !== 128) {
          self2.lastNeed = 2;
          return "�";
        }
      }
    }
  }
  function utf8FillLast(buf) {
    var p2 = this.lastTotal - this.lastNeed;
    var r2 = utf8CheckExtraBytes(this, buf);
    if (r2 !== void 0) return r2;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p2, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p2, 0, buf.length);
    this.lastNeed -= buf.length;
  }
  function utf8Text(buf, i2) {
    var total = utf8CheckIncomplete(this, buf, i2);
    if (!this.lastNeed) return buf.toString("utf8", i2);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i2, end);
  }
  function utf8End(buf) {
    var r2 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r2 + "�";
    return r2;
  }
  function utf16Text(buf, i2) {
    if ((buf.length - i2) % 2 === 0) {
      var r2 = buf.toString("utf16le", i2);
      if (r2) {
        var c2 = r2.charCodeAt(r2.length - 1);
        if (c2 >= 55296 && c2 <= 56319) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r2.slice(0, -1);
        }
      }
      return r2;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i2, buf.length - 1);
  }
  function utf16End(buf) {
    var r2 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r2 + this.lastChar.toString("utf16le", 0, end);
    }
    return r2;
  }
  function base64Text(buf, i2) {
    var n2 = (buf.length - i2) % 3;
    if (n2 === 0) return buf.toString("base64", i2);
    this.lastNeed = 3 - n2;
    this.lastTotal = 3;
    if (n2 === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i2, buf.length - n2);
  }
  function base64End(buf) {
    var r2 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r2;
  }
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }
  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
  }
  return string_decoder;
}
var endOfStream;
var hasRequiredEndOfStream;
function requireEndOfStream() {
  if (hasRequiredEndOfStream) return endOfStream;
  hasRequiredEndOfStream = 1;
  var ERR_STREAM_PREMATURE_CLOSE = requireErrorsBrowser().codes.ERR_STREAM_PREMATURE_CLOSE;
  function once(callback) {
    var called = false;
    return function() {
      if (called) return;
      called = true;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      callback.apply(this, args);
    };
  }
  function noop2() {
  }
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  }
  function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop2);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish2() {
      if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish2() {
      writable = false;
      writableEnded = true;
      if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend2() {
      readable = false;
      readableEnded = true;
      if (!writable) callback.call(stream);
    };
    var onerror = function onerror2(err) {
      callback.call(stream, err);
    };
    var onclose = function onclose2() {
      var err;
      if (readable && !readableEnded) {
        if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
      if (writable && !writableEnded) {
        if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
    };
    var onrequest = function onrequest2() {
      stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
      stream.on("complete", onfinish);
      stream.on("abort", onclose);
      if (stream.req) onrequest();
      else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
      stream.on("end", onlegacyfinish);
      stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
      stream.removeListener("complete", onfinish);
      stream.removeListener("abort", onclose);
      stream.removeListener("request", onrequest);
      if (stream.req) stream.req.removeListener("finish", onfinish);
      stream.removeListener("end", onlegacyfinish);
      stream.removeListener("close", onlegacyfinish);
      stream.removeListener("finish", onfinish);
      stream.removeListener("end", onend);
      stream.removeListener("error", onerror);
      stream.removeListener("close", onclose);
    };
  }
  endOfStream = eos;
  return endOfStream;
}
var async_iterator;
var hasRequiredAsync_iterator;
function requireAsync_iterator() {
  if (hasRequiredAsync_iterator) return async_iterator;
  hasRequiredAsync_iterator = 1;
  var _Object$setPrototypeO;
  function _defineProperty(obj, key2, value3) {
    key2 = _toPropertyKey(key2);
    if (key2 in obj) {
      Object.defineProperty(obj, key2, { value: value3, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key2] = value3;
    }
    return obj;
  }
  function _toPropertyKey(arg) {
    var key2 = _toPrimitive(arg, "string");
    return typeof key2 === "symbol" ? key2 : String(key2);
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  var finished = requireEndOfStream();
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult(value3, done) {
    return {
      value: value3,
      done
    };
  }
  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
      var data = iter[kStream].read();
      if (data !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data, false));
      }
    }
  }
  function onReadable(iter) {
    process$1.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve(createIterResult(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve, reject) {
          process$1.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data = this[kStream].read();
        if (data !== null) {
          return Promise.resolve(createIterResult(data, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve, reject) {
      _this2[kStream].destroy(null, function(err) {
        if (err) {
          reject(err);
          return;
        }
        resolve(createIterResult(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value3(resolve, reject) {
        var data = iterator[kStream].read();
        if (data) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
      if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }
        iterator[kError] = err;
        return;
      }
      var resolve = iterator[kLastResolve];
      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  async_iterator = createReadableStreamAsyncIterator;
  return async_iterator;
}
var fromBrowser;
var hasRequiredFromBrowser;
function requireFromBrowser() {
  if (hasRequiredFromBrowser) return fromBrowser;
  hasRequiredFromBrowser = 1;
  fromBrowser = function() {
    throw new Error("Readable.from is not available in the browser");
  };
  return fromBrowser;
}
var _stream_readable$1;
var hasRequired_stream_readable$1;
function require_stream_readable$1() {
  if (hasRequired_stream_readable$1) return _stream_readable$1;
  hasRequired_stream_readable$1 = 1;
  _stream_readable$1 = Readable;
  var Duplex;
  Readable.ReadableState = ReadableState;
  requireEvents().EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type2) {
    return emitter.listeners(type2).length;
  };
  var Stream = requireStreamBrowser$1();
  var Buffer2 = require$$1$2.Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = requireUtil$1();
  var debug;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function debug2() {
    };
  }
  var BufferList2 = requireBuffer_list();
  var destroyImpl = requireDestroy$1();
  var _require = requireState(), getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = requireErrorsBrowser().codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  requireInherits_browser()(Readable, Stream);
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require_stream_duplex$1();
    options = options || {};
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList2();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    Duplex = Duplex || require_stream_duplex$1();
    if (!(this instanceof Readable)) return new Readable(options);
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function") this._read = options.read;
      if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
  }
  Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value3) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value3;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function(err, cb) {
    cb(err);
  };
  Readable.prototype.push = function(chunk, encoding) {
    var state2 = this._readableState;
    var skipChunkCheck;
    if (!state2.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state2.defaultEncoding;
        if (encoding !== state2.encoding) {
          chunk = Buffer2.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state2 = stream._readableState;
    if (chunk === null) {
      state2.reading = false;
      onEofChunk(stream, state2);
    } else {
      var er;
      if (!skipChunkCheck) er = chunkInvalid(state2, chunk);
      if (er) {
        errorOrDestroy(stream, er);
      } else if (state2.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state2.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else addChunk(stream, state2, chunk, true);
        } else if (state2.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state2.destroyed) {
          return false;
        } else {
          state2.reading = false;
          if (state2.decoder && !encoding) {
            chunk = state2.decoder.write(chunk);
            if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);
            else maybeReadMore(stream, state2);
          } else {
            addChunk(stream, state2, chunk, false);
          }
        }
      } else if (!addToFront) {
        state2.reading = false;
        maybeReadMore(stream, state2);
      }
    }
    return !state2.ended && (state2.length < state2.highWaterMark || state2.length === 0);
  }
  function addChunk(stream, state2, chunk, addToFront) {
    if (state2.flowing && state2.length === 0 && !state2.sync) {
      state2.awaitDrain = 0;
      stream.emit("data", chunk);
    } else {
      state2.length += state2.objectMode ? 1 : chunk.length;
      if (addToFront) state2.buffer.unshift(chunk);
      else state2.buffer.push(chunk);
      if (state2.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state2);
  }
  function chunkInvalid(state2, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p2 = this._readableState.buffer.head;
    var content = "";
    while (p2 !== null) {
      content += decoder.write(p2.data);
      p2 = p2.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n2) {
    if (n2 >= MAX_HWM) {
      n2 = MAX_HWM;
    } else {
      n2--;
      n2 |= n2 >>> 1;
      n2 |= n2 >>> 2;
      n2 |= n2 >>> 4;
      n2 |= n2 >>> 8;
      n2 |= n2 >>> 16;
      n2++;
    }
    return n2;
  }
  function howMuchToRead(n2, state2) {
    if (n2 <= 0 || state2.length === 0 && state2.ended) return 0;
    if (state2.objectMode) return 1;
    if (n2 !== n2) {
      if (state2.flowing && state2.length) return state2.buffer.head.data.length;
      else return state2.length;
    }
    if (n2 > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n2);
    if (n2 <= state2.length) return n2;
    if (!state2.ended) {
      state2.needReadable = true;
      return 0;
    }
    return state2.length;
  }
  Readable.prototype.read = function(n2) {
    debug("read", n2);
    n2 = parseInt(n2, 10);
    var state2 = this._readableState;
    var nOrig = n2;
    if (n2 !== 0) state2.emittedReadable = false;
    if (n2 === 0 && state2.needReadable && ((state2.highWaterMark !== 0 ? state2.length >= state2.highWaterMark : state2.length > 0) || state2.ended)) {
      debug("read: emitReadable", state2.length, state2.ended);
      if (state2.length === 0 && state2.ended) endReadable(this);
      else emitReadable(this);
      return null;
    }
    n2 = howMuchToRead(n2, state2);
    if (n2 === 0 && state2.ended) {
      if (state2.length === 0) endReadable(this);
      return null;
    }
    var doRead = state2.needReadable;
    debug("need readable", doRead);
    if (state2.length === 0 || state2.length - n2 < state2.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state2.ended || state2.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state2.reading = true;
      state2.sync = true;
      if (state2.length === 0) state2.needReadable = true;
      this._read(state2.highWaterMark);
      state2.sync = false;
      if (!state2.reading) n2 = howMuchToRead(nOrig, state2);
    }
    var ret;
    if (n2 > 0) ret = fromList(n2, state2);
    else ret = null;
    if (ret === null) {
      state2.needReadable = state2.length <= state2.highWaterMark;
      n2 = 0;
    } else {
      state2.length -= n2;
      state2.awaitDrain = 0;
    }
    if (state2.length === 0) {
      if (!state2.ended) state2.needReadable = true;
      if (nOrig !== n2 && state2.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream, state2) {
    debug("onEofChunk");
    if (state2.ended) return;
    if (state2.decoder) {
      var chunk = state2.decoder.end();
      if (chunk && chunk.length) {
        state2.buffer.push(chunk);
        state2.length += state2.objectMode ? 1 : chunk.length;
      }
    }
    state2.ended = true;
    if (state2.sync) {
      emitReadable(stream);
    } else {
      state2.needReadable = false;
      if (!state2.emittedReadable) {
        state2.emittedReadable = true;
        emitReadable_(stream);
      }
    }
  }
  function emitReadable(stream) {
    var state2 = stream._readableState;
    debug("emitReadable", state2.needReadable, state2.emittedReadable);
    state2.needReadable = false;
    if (!state2.emittedReadable) {
      debug("emitReadable", state2.flowing);
      state2.emittedReadable = true;
      process$1.nextTick(emitReadable_, stream);
    }
  }
  function emitReadable_(stream) {
    var state2 = stream._readableState;
    debug("emitReadable_", state2.destroyed, state2.length, state2.ended);
    if (!state2.destroyed && (state2.length || state2.ended)) {
      stream.emit("readable");
      state2.emittedReadable = false;
    }
    state2.needReadable = !state2.flowing && !state2.ended && state2.length <= state2.highWaterMark;
    flow(stream);
  }
  function maybeReadMore(stream, state2) {
    if (!state2.readingMore) {
      state2.readingMore = true;
      process$1.nextTick(maybeReadMore_, stream, state2);
    }
  }
  function maybeReadMore_(stream, state2) {
    while (!state2.reading && !state2.ended && (state2.length < state2.highWaterMark || state2.flowing && state2.length === 0)) {
      var len2 = state2.length;
      debug("maybeReadMore read 0");
      stream.read(0);
      if (len2 === state2.length)
        break;
    }
    state2.readingMore = false;
  }
  Readable.prototype._read = function(n2) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src2 = this;
    var state2 = this._readableState;
    switch (state2.pipesCount) {
      case 0:
        state2.pipes = dest;
        break;
      case 1:
        state2.pipes = [state2.pipes, dest];
        break;
      default:
        state2.pipes.push(dest);
        break;
    }
    state2.pipesCount += 1;
    debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state2.endEmitted) process$1.nextTick(endFn);
    else src2.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src2) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src2);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src2.removeListener("end", onend);
      src2.removeListener("end", unpipe);
      src2.removeListener("data", ondata);
      cleanedUp = true;
      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src2.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      var ret = dest.write(chunk);
      debug("dest.write", ret);
      if (ret === false) {
        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state2.awaitDrain);
          state2.awaitDrain++;
        }
        src2.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src2.unpipe(dest);
    }
    dest.emit("pipe", src2);
    if (!state2.flowing) {
      debug("pipe resume");
      src2.resume();
    }
    return dest;
  };
  function pipeOnDrain(src2) {
    return function pipeOnDrainFunctionResult() {
      var state2 = src2._readableState;
      debug("pipeOnDrain", state2.awaitDrain);
      if (state2.awaitDrain) state2.awaitDrain--;
      if (state2.awaitDrain === 0 && EElistenerCount(src2, "data")) {
        state2.flowing = true;
        flow(src2);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state2 = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state2.pipesCount === 0) return this;
    if (state2.pipesCount === 1) {
      if (dest && dest !== state2.pipes) return this;
      if (!dest) dest = state2.pipes;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      if (dest) dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state2.pipes;
      var len2 = state2.pipesCount;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      for (var i2 = 0; i2 < len2; i2++) dests[i2].emit("unpipe", this, {
        hasUnpiped: false
      });
      return this;
    }
    var index = indexOf2(state2.pipes, dest);
    if (index === -1) return this;
    state2.pipes.splice(index, 1);
    state2.pipesCount -= 1;
    if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state2 = this._readableState;
    if (ev === "data") {
      state2.readableListening = this.listenerCount("readable") > 0;
      if (state2.flowing !== false) this.resume();
    } else if (ev === "readable") {
      if (!state2.endEmitted && !state2.readableListening) {
        state2.readableListening = state2.needReadable = true;
        state2.flowing = false;
        state2.emittedReadable = false;
        debug("on readable", state2.length, state2.reading);
        if (state2.length) {
          emitReadable(this);
        } else if (!state2.reading) {
          process$1.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process$1.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process$1.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state2 = self2._readableState;
    state2.readableListening = self2.listenerCount("readable") > 0;
    if (state2.resumeScheduled && !state2.paused) {
      state2.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable.prototype.resume = function() {
    var state2 = this._readableState;
    if (!state2.flowing) {
      debug("resume");
      state2.flowing = !state2.readableListening;
      resume(this, state2);
    }
    state2.paused = false;
    return this;
  };
  function resume(stream, state2) {
    if (!state2.resumeScheduled) {
      state2.resumeScheduled = true;
      process$1.nextTick(resume_, stream, state2);
    }
  }
  function resume_(stream, state2) {
    debug("resume", state2.reading);
    if (!state2.reading) {
      stream.read(0);
    }
    state2.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state2.flowing && !state2.reading) stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow(stream) {
    var state2 = stream._readableState;
    debug("flow", state2.flowing);
    while (state2.flowing && stream.read() !== null) ;
  }
  Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state2 = this._readableState;
    var paused = false;
    stream.on("end", function() {
      debug("wrapped end");
      if (state2.decoder && !state2.ended) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length) _this.push(chunk);
      }
      _this.push(null);
    });
    stream.on("data", function(chunk) {
      debug("wrapped data");
      if (state2.decoder) chunk = state2.decoder.write(chunk);
      if (state2.objectMode && (chunk === null || chunk === void 0)) return;
      else if (!state2.objectMode && (!chunk || !chunk.length)) return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i2 in stream) {
      if (this[i2] === void 0 && typeof stream[i2] === "function") {
        this[i2] = /* @__PURE__ */ function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
          };
        }(i2);
      }
    }
    for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
      stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
    }
    this._read = function(n3) {
      debug("wrapped _read", n3);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = requireAsync_iterator();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._readableState.flowing;
    },
    set: function set(state2) {
      if (this._readableState) {
        this._readableState.flowing = state2;
      }
    }
  });
  Readable._fromList = fromList;
  Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get2() {
      return this._readableState.length;
    }
  });
  function fromList(n2, state2) {
    if (state2.length === 0) return null;
    var ret;
    if (state2.objectMode) ret = state2.buffer.shift();
    else if (!n2 || n2 >= state2.length) {
      if (state2.decoder) ret = state2.buffer.join("");
      else if (state2.buffer.length === 1) ret = state2.buffer.first();
      else ret = state2.buffer.concat(state2.length);
      state2.buffer.clear();
    } else {
      ret = state2.buffer.consume(n2, state2.decoder);
    }
    return ret;
  }
  function endReadable(stream) {
    var state2 = stream._readableState;
    debug("endReadable", state2.endEmitted);
    if (!state2.endEmitted) {
      state2.ended = true;
      process$1.nextTick(endReadableNT, state2, stream);
    }
  }
  function endReadableNT(state2, stream) {
    debug("endReadableNT", state2.endEmitted, state2.length);
    if (!state2.endEmitted && state2.length === 0) {
      state2.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
      if (state2.autoDestroy) {
        var wState = stream._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable.from = function(iterable, opts) {
      if (from === void 0) {
        from = requireFromBrowser();
      }
      return from(Readable, iterable, opts);
    };
  }
  function indexOf2(xs, x2) {
    for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
      if (xs[i2] === x2) return i2;
    }
    return -1;
  }
  return _stream_readable$1;
}
var _stream_transform$1;
var hasRequired_stream_transform$1;
function require_stream_transform$1() {
  if (hasRequired_stream_transform$1) return _stream_transform$1;
  hasRequired_stream_transform$1 = 1;
  _stream_transform$1 = Transform;
  var _require$codes = requireErrorsBrowser().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
  var Duplex = require_stream_duplex$1();
  requireInherits_browser()(Transform, Duplex);
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) {
      return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function") this._transform = options.transform;
      if (typeof options.flush === "function") this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) {
      this._flush(function(er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
  };
  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };
  Transform.prototype._read = function(n2) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
      cb(err2);
    });
  };
  function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null)
      stream.push(data);
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
  }
  return _stream_transform$1;
}
var _stream_passthrough$1;
var hasRequired_stream_passthrough$1;
function require_stream_passthrough$1() {
  if (hasRequired_stream_passthrough$1) return _stream_passthrough$1;
  hasRequired_stream_passthrough$1 = 1;
  _stream_passthrough$1 = PassThrough;
  var Transform = require_stream_transform$1();
  requireInherits_browser()(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
  return _stream_passthrough$1;
}
var pipeline_1;
var hasRequiredPipeline;
function requirePipeline() {
  if (hasRequiredPipeline) return pipeline_1;
  hasRequiredPipeline = 1;
  var eos;
  function once(callback) {
    var called = false;
    return function() {
      if (called) return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  var _require$codes = requireErrorsBrowser().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  function noop2(err) {
    if (err) throw err;
  }
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  }
  function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
      closed = true;
    });
    if (eos === void 0) eos = requireEndOfStream();
    eos(stream, {
      readable: reading,
      writable: writing
    }, function(err) {
      if (err) return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err) {
      if (closed) return;
      if (destroyed) return;
      destroyed = true;
      if (isRequest(stream)) return stream.abort();
      if (typeof stream.destroy === "function") return stream.destroy();
      callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
  }
  function call(fn) {
    fn();
  }
  function pipe(from, to) {
    return from.pipe(to);
  }
  function popCallback(streams) {
    if (!streams.length) return noop2;
    if (typeof streams[streams.length - 1] !== "function") return noop2;
    return streams.pop();
  }
  function pipeline() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS("streams");
    }
    var error;
    var destroys = streams.map(function(stream, i2) {
      var reading = i2 < streams.length - 1;
      var writing = i2 > 0;
      return destroyer(stream, reading, writing, function(err) {
        if (!error) error = err;
        if (err) destroys.forEach(call);
        if (reading) return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }
  pipeline_1 = pipeline;
  return pipeline_1;
}
var hasRequiredReadableBrowser$1;
function requireReadableBrowser$1() {
  if (hasRequiredReadableBrowser$1) return readableBrowser$1.exports;
  hasRequiredReadableBrowser$1 = 1;
  (function(module, exports2) {
    exports2 = module.exports = require_stream_readable$1();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable$1();
    exports2.Duplex = require_stream_duplex$1();
    exports2.Transform = require_stream_transform$1();
    exports2.PassThrough = require_stream_passthrough$1();
    exports2.finished = requireEndOfStream();
    exports2.pipeline = requirePipeline();
  })(readableBrowser$1, readableBrowser$1.exports);
  return readableBrowser$1.exports;
}
var hashBase;
var hasRequiredHashBase;
function requireHashBase() {
  if (hasRequiredHashBase) return hashBase;
  hasRequiredHashBase = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var Transform = requireReadableBrowser$1().Transform;
  var inherits = requireInherits_browser();
  function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer2.isBuffer(val) && typeof val !== "string") {
      throw new TypeError(prefix + " must be a string or a buffer");
    }
  }
  function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer2.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];
    this._finalized = false;
  }
  inherits(HashBase, Transform);
  HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }
    callback(error);
  };
  HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!Buffer2.isBuffer(data)) data = Buffer2.from(data, encoding);
    var block2 = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i2 = this._blockOffset; i2 < this._blockSize; ) block2[i2++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length) block2[this._blockOffset++] = data[offset++];
    for (var j2 = 0, carry = data.length * 8; carry > 0; ++j2) {
      this._length[j2] += carry;
      carry = this._length[j2] / 4294967296 | 0;
      if (carry > 0) this._length[j2] -= 4294967296 * carry;
    }
    return this;
  };
  HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
  };
  HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== void 0) digest = digest.toString(encoding);
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i2 = 0; i2 < 4; ++i2) this._length[i2] = 0;
    return digest;
  };
  HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
  };
  hashBase = HashBase;
  return hashBase;
}
var md5_js;
var hasRequiredMd5_js;
function requireMd5_js() {
  if (hasRequiredMd5_js) return md5_js;
  hasRequiredMd5_js = 1;
  var inherits = requireInherits_browser();
  var HashBase = requireHashBase();
  var Buffer2 = safeBufferExports.Buffer;
  var ARRAY16 = new Array(16);
  function MD5() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
  }
  inherits(MD5, HashBase);
  MD5.prototype._update = function() {
    var M2 = ARRAY16;
    for (var i2 = 0; i2 < 16; ++i2) M2[i2] = this._block.readInt32LE(i2 * 4);
    var a2 = this._a;
    var b2 = this._b;
    var c2 = this._c;
    var d2 = this._d;
    a2 = fnF(a2, b2, c2, d2, M2[0], 3614090360, 7);
    d2 = fnF(d2, a2, b2, c2, M2[1], 3905402710, 12);
    c2 = fnF(c2, d2, a2, b2, M2[2], 606105819, 17);
    b2 = fnF(b2, c2, d2, a2, M2[3], 3250441966, 22);
    a2 = fnF(a2, b2, c2, d2, M2[4], 4118548399, 7);
    d2 = fnF(d2, a2, b2, c2, M2[5], 1200080426, 12);
    c2 = fnF(c2, d2, a2, b2, M2[6], 2821735955, 17);
    b2 = fnF(b2, c2, d2, a2, M2[7], 4249261313, 22);
    a2 = fnF(a2, b2, c2, d2, M2[8], 1770035416, 7);
    d2 = fnF(d2, a2, b2, c2, M2[9], 2336552879, 12);
    c2 = fnF(c2, d2, a2, b2, M2[10], 4294925233, 17);
    b2 = fnF(b2, c2, d2, a2, M2[11], 2304563134, 22);
    a2 = fnF(a2, b2, c2, d2, M2[12], 1804603682, 7);
    d2 = fnF(d2, a2, b2, c2, M2[13], 4254626195, 12);
    c2 = fnF(c2, d2, a2, b2, M2[14], 2792965006, 17);
    b2 = fnF(b2, c2, d2, a2, M2[15], 1236535329, 22);
    a2 = fnG(a2, b2, c2, d2, M2[1], 4129170786, 5);
    d2 = fnG(d2, a2, b2, c2, M2[6], 3225465664, 9);
    c2 = fnG(c2, d2, a2, b2, M2[11], 643717713, 14);
    b2 = fnG(b2, c2, d2, a2, M2[0], 3921069994, 20);
    a2 = fnG(a2, b2, c2, d2, M2[5], 3593408605, 5);
    d2 = fnG(d2, a2, b2, c2, M2[10], 38016083, 9);
    c2 = fnG(c2, d2, a2, b2, M2[15], 3634488961, 14);
    b2 = fnG(b2, c2, d2, a2, M2[4], 3889429448, 20);
    a2 = fnG(a2, b2, c2, d2, M2[9], 568446438, 5);
    d2 = fnG(d2, a2, b2, c2, M2[14], 3275163606, 9);
    c2 = fnG(c2, d2, a2, b2, M2[3], 4107603335, 14);
    b2 = fnG(b2, c2, d2, a2, M2[8], 1163531501, 20);
    a2 = fnG(a2, b2, c2, d2, M2[13], 2850285829, 5);
    d2 = fnG(d2, a2, b2, c2, M2[2], 4243563512, 9);
    c2 = fnG(c2, d2, a2, b2, M2[7], 1735328473, 14);
    b2 = fnG(b2, c2, d2, a2, M2[12], 2368359562, 20);
    a2 = fnH(a2, b2, c2, d2, M2[5], 4294588738, 4);
    d2 = fnH(d2, a2, b2, c2, M2[8], 2272392833, 11);
    c2 = fnH(c2, d2, a2, b2, M2[11], 1839030562, 16);
    b2 = fnH(b2, c2, d2, a2, M2[14], 4259657740, 23);
    a2 = fnH(a2, b2, c2, d2, M2[1], 2763975236, 4);
    d2 = fnH(d2, a2, b2, c2, M2[4], 1272893353, 11);
    c2 = fnH(c2, d2, a2, b2, M2[7], 4139469664, 16);
    b2 = fnH(b2, c2, d2, a2, M2[10], 3200236656, 23);
    a2 = fnH(a2, b2, c2, d2, M2[13], 681279174, 4);
    d2 = fnH(d2, a2, b2, c2, M2[0], 3936430074, 11);
    c2 = fnH(c2, d2, a2, b2, M2[3], 3572445317, 16);
    b2 = fnH(b2, c2, d2, a2, M2[6], 76029189, 23);
    a2 = fnH(a2, b2, c2, d2, M2[9], 3654602809, 4);
    d2 = fnH(d2, a2, b2, c2, M2[12], 3873151461, 11);
    c2 = fnH(c2, d2, a2, b2, M2[15], 530742520, 16);
    b2 = fnH(b2, c2, d2, a2, M2[2], 3299628645, 23);
    a2 = fnI(a2, b2, c2, d2, M2[0], 4096336452, 6);
    d2 = fnI(d2, a2, b2, c2, M2[7], 1126891415, 10);
    c2 = fnI(c2, d2, a2, b2, M2[14], 2878612391, 15);
    b2 = fnI(b2, c2, d2, a2, M2[5], 4237533241, 21);
    a2 = fnI(a2, b2, c2, d2, M2[12], 1700485571, 6);
    d2 = fnI(d2, a2, b2, c2, M2[3], 2399980690, 10);
    c2 = fnI(c2, d2, a2, b2, M2[10], 4293915773, 15);
    b2 = fnI(b2, c2, d2, a2, M2[1], 2240044497, 21);
    a2 = fnI(a2, b2, c2, d2, M2[8], 1873313359, 6);
    d2 = fnI(d2, a2, b2, c2, M2[15], 4264355552, 10);
    c2 = fnI(c2, d2, a2, b2, M2[6], 2734768916, 15);
    b2 = fnI(b2, c2, d2, a2, M2[13], 1309151649, 21);
    a2 = fnI(a2, b2, c2, d2, M2[4], 4149444226, 6);
    d2 = fnI(d2, a2, b2, c2, M2[11], 3174756917, 10);
    c2 = fnI(c2, d2, a2, b2, M2[2], 718787259, 15);
    b2 = fnI(b2, c2, d2, a2, M2[9], 3951481745, 21);
    this._a = this._a + a2 | 0;
    this._b = this._b + b2 | 0;
    this._c = this._c + c2 | 0;
    this._d = this._d + d2 | 0;
  };
  MD5.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer2.allocUnsafe(16);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    return buffer2;
  };
  function rotl(x2, n2) {
    return x2 << n2 | x2 >>> 32 - n2;
  }
  function fnF(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (b2 & c2 | ~b2 & d2) + m2 + k2 | 0, s2) + b2 | 0;
  }
  function fnG(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (b2 & d2 | c2 & ~d2) + m2 + k2 | 0, s2) + b2 | 0;
  }
  function fnH(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (b2 ^ c2 ^ d2) + m2 + k2 | 0, s2) + b2 | 0;
  }
  function fnI(a2, b2, c2, d2, m2, k2, s2) {
    return rotl(a2 + (c2 ^ (b2 | ~d2)) + m2 + k2 | 0, s2) + b2 | 0;
  }
  md5_js = MD5;
  return md5_js;
}
var ripemd160;
var hasRequiredRipemd160;
function requireRipemd160() {
  if (hasRequiredRipemd160) return ripemd160;
  hasRequiredRipemd160 = 1;
  var Buffer2 = require$$1$2.Buffer;
  var inherits = requireInherits_browser();
  var HashBase = requireHashBase();
  var ARRAY16 = new Array(16);
  var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
  var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
  function RIPEMD1602() {
    HashBase.call(this, 64);
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
  }
  inherits(RIPEMD1602, HashBase);
  RIPEMD1602.prototype._update = function() {
    var words = ARRAY16;
    for (var j2 = 0; j2 < 16; ++j2) words[j2] = this._block.readInt32LE(j2 * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    for (var i2 = 0; i2 < 80; i2 += 1) {
      var tl;
      var tr;
      if (i2 < 16) {
        tl = fn1(al, bl, cl, dl, el, words[zl[i2]], hl[0], sl[i2]);
        tr = fn5(ar, br, cr, dr, er, words[zr[i2]], hr[0], sr[i2]);
      } else if (i2 < 32) {
        tl = fn2(al, bl, cl, dl, el, words[zl[i2]], hl[1], sl[i2]);
        tr = fn4(ar, br, cr, dr, er, words[zr[i2]], hr[1], sr[i2]);
      } else if (i2 < 48) {
        tl = fn3(al, bl, cl, dl, el, words[zl[i2]], hl[2], sl[i2]);
        tr = fn3(ar, br, cr, dr, er, words[zr[i2]], hr[2], sr[i2]);
      } else if (i2 < 64) {
        tl = fn4(al, bl, cl, dl, el, words[zl[i2]], hl[3], sl[i2]);
        tr = fn2(ar, br, cr, dr, er, words[zr[i2]], hr[3], sr[i2]);
      } else {
        tl = fn5(al, bl, cl, dl, el, words[zl[i2]], hl[4], sl[i2]);
        tr = fn1(ar, br, cr, dr, er, words[zr[i2]], hr[4], sr[i2]);
      }
      al = el;
      el = dl;
      dl = rotl(cl, 10);
      cl = bl;
      bl = tl;
      ar = er;
      er = dr;
      dr = rotl(cr, 10);
      cr = br;
      br = tr;
    }
    var t2 = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t2;
  };
  RIPEMD1602.prototype._digest = function() {
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    var buffer2 = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
    buffer2.writeInt32LE(this._a, 0);
    buffer2.writeInt32LE(this._b, 4);
    buffer2.writeInt32LE(this._c, 8);
    buffer2.writeInt32LE(this._d, 12);
    buffer2.writeInt32LE(this._e, 16);
    return buffer2;
  };
  function rotl(x2, n2) {
    return x2 << n2 | x2 >>> 32 - n2;
  }
  function fn1(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 ^ c2 ^ d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn2(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 & c2 | ~b2 & d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn3(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + ((b2 | ~c2) ^ d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn4(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 & d2 | c2 & ~d2) + m2 + k2 | 0, s2) + e2 | 0;
  }
  function fn5(a2, b2, c2, d2, e2, m2, k2, s2) {
    return rotl(a2 + (b2 ^ (c2 | ~d2)) + m2 + k2 | 0, s2) + e2 | 0;
  }
  ripemd160 = RIPEMD1602;
  return ripemd160;
}
var sha_js = { exports: {} };
var hash$1;
var hasRequiredHash$1;
function requireHash$1() {
  if (hasRequiredHash$1) return hash$1;
  hasRequiredHash$1 = 1;
  var Buffer2 = safeBufferExports.Buffer;
  function Hash(blockSize, finalSize) {
    this._block = Buffer2.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
  }
  Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
      enc = enc || "utf8";
      data = Buffer2.from(data, enc);
    }
    var block2 = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for (var offset = 0; offset < length; ) {
      var assigned = accum % blockSize;
      var remainder = Math.min(length - offset, blockSize - assigned);
      for (var i2 = 0; i2 < remainder; i2++) {
        block2[assigned + i2] = data[offset + i2];
      }
      accum += remainder;
      offset += remainder;
      if (accum % blockSize === 0) {
        this._update(block2);
      }
    }
    this._len += length;
    return this;
  };
  Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
      this._update(this._block);
      this._block.fill(0);
    }
    var bits = this._len * 8;
    if (bits <= 4294967295) {
      this._block.writeUInt32BE(bits, this._blockSize - 4);
    } else {
      var lowBits = (bits & 4294967295) >>> 0;
      var highBits = (bits - lowBits) / 4294967296;
      this._block.writeUInt32BE(highBits, this._blockSize - 8);
      this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash2 = this._hash();
    return enc ? hash2.toString(enc) : hash2;
  };
  Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
  };
  hash$1 = Hash;
  return hash$1;
}
var sha$1;
var hasRequiredSha$1;
function requireSha$1() {
  if (hasRequiredSha$1) return sha$1;
  hasRequiredSha$1 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer2 = safeBufferExports.Buffer;
  var K = [
    1518500249,
    1859775393,
    2400959708 | 0,
    3395469782 | 0
  ];
  var W = new Array(80);
  function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
  }
  inherits(Sha, Hash);
  Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
  };
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s2, b2, c2, d2) {
    if (s2 === 0) return b2 & c2 | ~b2 & d2;
    if (s2 === 2) return b2 & c2 | b2 & d2 | c2 & d2;
    return b2 ^ c2 ^ d2;
  }
  Sha.prototype._update = function(M2) {
    var W2 = this._w;
    var a2 = this._a | 0;
    var b2 = this._b | 0;
    var c2 = this._c | 0;
    var d2 = this._d | 0;
    var e2 = this._e | 0;
    for (var i2 = 0; i2 < 16; ++i2) W2[i2] = M2.readInt32BE(i2 * 4);
    for (; i2 < 80; ++i2) W2[i2] = W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16];
    for (var j2 = 0; j2 < 80; ++j2) {
      var s2 = ~~(j2 / 20);
      var t2 = rotl5(a2) + ft(s2, b2, c2, d2) + e2 + W2[j2] + K[s2] | 0;
      e2 = d2;
      d2 = c2;
      c2 = rotl30(b2);
      b2 = a2;
      a2 = t2;
    }
    this._a = a2 + this._a | 0;
    this._b = b2 + this._b | 0;
    this._c = c2 + this._c | 0;
    this._d = d2 + this._d | 0;
    this._e = e2 + this._e | 0;
  };
  Sha.prototype._hash = function() {
    var H2 = Buffer2.allocUnsafe(20);
    H2.writeInt32BE(this._a | 0, 0);
    H2.writeInt32BE(this._b | 0, 4);
    H2.writeInt32BE(this._c | 0, 8);
    H2.writeInt32BE(this._d | 0, 12);
    H2.writeInt32BE(this._e | 0, 16);
    return H2;
  };
  sha$1 = Sha;
  return sha$1;
}
var sha1;
var hasRequiredSha1;
function requireSha1() {
  if (hasRequiredSha1) return sha1;
  hasRequiredSha1 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer2 = safeBufferExports.Buffer;
  var K = [
    1518500249,
    1859775393,
    2400959708 | 0,
    3395469782 | 0
  ];
  var W = new Array(80);
  function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
  }
  inherits(Sha1, Hash);
  Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
  };
  function rotl1(num) {
    return num << 1 | num >>> 31;
  }
  function rotl5(num) {
    return num << 5 | num >>> 27;
  }
  function rotl30(num) {
    return num << 30 | num >>> 2;
  }
  function ft(s2, b2, c2, d2) {
    if (s2 === 0) return b2 & c2 | ~b2 & d2;
    if (s2 === 2) return b2 & c2 | b2 & d2 | c2 & d2;
    return b2 ^ c2 ^ d2;
  }
  Sha1.prototype._update = function(M2) {
    var W2 = this._w;
    var a2 = this._a | 0;
    var b2 = this._b | 0;
    var c2 = this._c | 0;
    var d2 = this._d | 0;
    var e2 = this._e | 0;
    for (var i2 = 0; i2 < 16; ++i2) W2[i2] = M2.readInt32BE(i2 * 4);
    for (; i2 < 80; ++i2) W2[i2] = rotl1(W2[i2 - 3] ^ W2[i2 - 8] ^ W2[i2 - 14] ^ W2[i2 - 16]);
    for (var j2 = 0; j2 < 80; ++j2) {
      var s2 = ~~(j2 / 20);
      var t2 = rotl5(a2) + ft(s2, b2, c2, d2) + e2 + W2[j2] + K[s2] | 0;
      e2 = d2;
      d2 = c2;
      c2 = rotl30(b2);
      b2 = a2;
      a2 = t2;
    }
    this._a = a2 + this._a | 0;
    this._b = b2 + this._b | 0;
    this._c = c2 + this._c | 0;
    this._d = d2 + this._d | 0;
    this._e = e2 + this._e | 0;
  };
  Sha1.prototype._hash = function() {
    var H2 = Buffer2.allocUnsafe(20);
    H2.writeInt32BE(this._a | 0, 0);
    H2.writeInt32BE(this._b | 0, 4);
    H2.writeInt32BE(this._c | 0, 8);
    H2.writeInt32BE(this._d | 0, 12);
    H2.writeInt32BE(this._e | 0, 16);
    return H2;
  };
  sha1 = Sha1;
  return sha1;
}
var sha256$3;
var hasRequiredSha256;
function requireSha256() {
  if (hasRequiredSha256) return sha256$3;
  hasRequiredSha256 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer2 = safeBufferExports.Buffer;
  var K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  var W = new Array(64);
  function Sha256() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
  }
  inherits(Sha256, Hash);
  Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
  };
  function ch(x2, y2, z2) {
    return z2 ^ x2 & (y2 ^ z2);
  }
  function maj(x2, y2, z2) {
    return x2 & y2 | z2 & (x2 | y2);
  }
  function sigma0(x2) {
    return (x2 >>> 2 | x2 << 30) ^ (x2 >>> 13 | x2 << 19) ^ (x2 >>> 22 | x2 << 10);
  }
  function sigma1(x2) {
    return (x2 >>> 6 | x2 << 26) ^ (x2 >>> 11 | x2 << 21) ^ (x2 >>> 25 | x2 << 7);
  }
  function gamma0(x2) {
    return (x2 >>> 7 | x2 << 25) ^ (x2 >>> 18 | x2 << 14) ^ x2 >>> 3;
  }
  function gamma1(x2) {
    return (x2 >>> 17 | x2 << 15) ^ (x2 >>> 19 | x2 << 13) ^ x2 >>> 10;
  }
  Sha256.prototype._update = function(M2) {
    var W2 = this._w;
    var a2 = this._a | 0;
    var b2 = this._b | 0;
    var c2 = this._c | 0;
    var d2 = this._d | 0;
    var e2 = this._e | 0;
    var f2 = this._f | 0;
    var g2 = this._g | 0;
    var h2 = this._h | 0;
    for (var i2 = 0; i2 < 16; ++i2) W2[i2] = M2.readInt32BE(i2 * 4);
    for (; i2 < 64; ++i2) W2[i2] = gamma1(W2[i2 - 2]) + W2[i2 - 7] + gamma0(W2[i2 - 15]) + W2[i2 - 16] | 0;
    for (var j2 = 0; j2 < 64; ++j2) {
      var T1 = h2 + sigma1(e2) + ch(e2, f2, g2) + K[j2] + W2[j2] | 0;
      var T2 = sigma0(a2) + maj(a2, b2, c2) | 0;
      h2 = g2;
      g2 = f2;
      f2 = e2;
      e2 = d2 + T1 | 0;
      d2 = c2;
      c2 = b2;
      b2 = a2;
      a2 = T1 + T2 | 0;
    }
    this._a = a2 + this._a | 0;
    this._b = b2 + this._b | 0;
    this._c = c2 + this._c | 0;
    this._d = d2 + this._d | 0;
    this._e = e2 + this._e | 0;
    this._f = f2 + this._f | 0;
    this._g = g2 + this._g | 0;
    this._h = h2 + this._h | 0;
  };
  Sha256.prototype._hash = function() {
    var H2 = Buffer2.allocUnsafe(32);
    H2.writeInt32BE(this._a, 0);
    H2.writeInt32BE(this._b, 4);
    H2.writeInt32BE(this._c, 8);
    H2.writeInt32BE(this._d, 12);
    H2.writeInt32BE(this._e, 16);
    H2.writeInt32BE(this._f, 20);
    H2.writeInt32BE(this._g, 24);
    H2.writeInt32BE(this._h, 28);
    return H2;
  };
  sha256$3 = Sha256;
  return sha256$3;
}
var sha224$1;
var hasRequiredSha224;
function requireSha224() {
  if (hasRequiredSha224) return sha224$1;
  hasRequiredSha224 = 1;
  var inherits = requireInherits_browser();
  var Sha256 = requireSha256();
  var Hash = requireHash$1();
  var Buffer2 = safeBufferExports.Buffer;
  var W = new Array(64);
  function Sha224() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
  }
  inherits(Sha224, Sha256);
  Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
  };
  Sha224.prototype._hash = function() {
    var H2 = Buffer2.allocUnsafe(28);
    H2.writeInt32BE(this._a, 0);
    H2.writeInt32BE(this._b, 4);
    H2.writeInt32BE(this._c, 8);
    H2.writeInt32BE(this._d, 12);
    H2.writeInt32BE(this._e, 16);
    H2.writeInt32BE(this._f, 20);
    H2.writeInt32BE(this._g, 24);
    return H2;
  };
  sha224$1 = Sha224;
  return sha224$1;
}
var sha512$1;
var hasRequiredSha512;
function requireSha512() {
  if (hasRequiredSha512) return sha512$1;
  hasRequiredSha512 = 1;
  var inherits = requireInherits_browser();
  var Hash = requireHash$1();
  var Buffer2 = safeBufferExports.Buffer;
  var K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  var W = new Array(160);
  function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
  }
  inherits(Sha512, Hash);
  Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
  };
  function Ch(x2, y2, z2) {
    return z2 ^ x2 & (y2 ^ z2);
  }
  function maj(x2, y2, z2) {
    return x2 & y2 | z2 & (x2 | y2);
  }
  function sigma0(x2, xl) {
    return (x2 >>> 28 | xl << 4) ^ (xl >>> 2 | x2 << 30) ^ (xl >>> 7 | x2 << 25);
  }
  function sigma1(x2, xl) {
    return (x2 >>> 14 | xl << 18) ^ (x2 >>> 18 | xl << 14) ^ (xl >>> 9 | x2 << 23);
  }
  function Gamma0(x2, xl) {
    return (x2 >>> 1 | xl << 31) ^ (x2 >>> 8 | xl << 24) ^ x2 >>> 7;
  }
  function Gamma0l(x2, xl) {
    return (x2 >>> 1 | xl << 31) ^ (x2 >>> 8 | xl << 24) ^ (x2 >>> 7 | xl << 25);
  }
  function Gamma1(x2, xl) {
    return (x2 >>> 19 | xl << 13) ^ (xl >>> 29 | x2 << 3) ^ x2 >>> 6;
  }
  function Gamma1l(x2, xl) {
    return (x2 >>> 19 | xl << 13) ^ (xl >>> 29 | x2 << 3) ^ (x2 >>> 6 | xl << 26);
  }
  function getCarry(a2, b2) {
    return a2 >>> 0 < b2 >>> 0 ? 1 : 0;
  }
  Sha512.prototype._update = function(M2) {
    var W2 = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh2 = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for (var i2 = 0; i2 < 32; i2 += 2) {
      W2[i2] = M2.readInt32BE(i2 * 4);
      W2[i2 + 1] = M2.readInt32BE(i2 * 4 + 4);
    }
    for (; i2 < 160; i2 += 2) {
      var xh = W2[i2 - 15 * 2];
      var xl = W2[i2 - 15 * 2 + 1];
      var gamma0 = Gamma0(xh, xl);
      var gamma0l = Gamma0l(xl, xh);
      xh = W2[i2 - 2 * 2];
      xl = W2[i2 - 2 * 2 + 1];
      var gamma1 = Gamma1(xh, xl);
      var gamma1l = Gamma1l(xl, xh);
      var Wi7h = W2[i2 - 7 * 2];
      var Wi7l = W2[i2 - 7 * 2 + 1];
      var Wi16h = W2[i2 - 16 * 2];
      var Wi16l = W2[i2 - 16 * 2 + 1];
      var Wil = gamma0l + Wi7l | 0;
      var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
      Wil = Wil + gamma1l | 0;
      Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
      Wil = Wil + Wi16l | 0;
      Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
      W2[i2] = Wih;
      W2[i2 + 1] = Wil;
    }
    for (var j2 = 0; j2 < 160; j2 += 2) {
      Wih = W2[j2];
      Wil = W2[j2 + 1];
      var majh = maj(ah, bh, ch);
      var majl = maj(al, bl, cl);
      var sigma0h = sigma0(ah, al);
      var sigma0l = sigma0(al, ah);
      var sigma1h = sigma1(eh, el);
      var sigma1l = sigma1(el, eh);
      var Kih = K[j2];
      var Kil = K[j2 + 1];
      var chh = Ch(eh, fh, gh);
      var chl = Ch(el, fl, gl);
      var t1l = hl + sigma1l | 0;
      var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
      t1l = t1l + chl | 0;
      t1h = t1h + chh + getCarry(t1l, chl) | 0;
      t1l = t1l + Kil | 0;
      t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
      t1l = t1l + Wil | 0;
      t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
      var t2l = sigma0l + majl | 0;
      var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      el = dl + t1l | 0;
      eh = dh2 + t1h + getCarry(el, dl) | 0;
      dh2 = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      al = t1l + t2l | 0;
      ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh2 + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
  };
  Sha512.prototype._hash = function() {
    var H2 = Buffer2.allocUnsafe(64);
    function writeInt64BE(h2, l2, offset) {
      H2.writeInt32BE(h2, offset);
      H2.writeInt32BE(l2, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H2;
  };
  sha512$1 = Sha512;
  return sha512$1;
}
var sha384$1;
var hasRequiredSha384;
function requireSha384() {
  if (hasRequiredSha384) return sha384$1;
  hasRequiredSha384 = 1;
  var inherits = requireInherits_browser();
  var SHA5122 = requireSha512();
  var Hash = requireHash$1();
  var Buffer2 = safeBufferExports.Buffer;
  var W = new Array(160);
  function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
  }
  inherits(Sha384, SHA5122);
  Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
  };
  Sha384.prototype._hash = function() {
    var H2 = Buffer2.allocUnsafe(48);
    function writeInt64BE(h2, l2, offset) {
      H2.writeInt32BE(h2, offset);
      H2.writeInt32BE(l2, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H2;
  };
  sha384$1 = Sha384;
  return sha384$1;
}
var hasRequiredSha_js;
function requireSha_js() {
  if (hasRequiredSha_js) return sha_js.exports;
  hasRequiredSha_js = 1;
  var exports2 = sha_js.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports2[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
  };
  exports2.sha = requireSha$1();
  exports2.sha1 = requireSha1();
  exports2.sha224 = requireSha224();
  exports2.sha256 = requireSha256();
  exports2.sha384 = requireSha384();
  exports2.sha512 = requireSha512();
  return sha_js.exports;
}
var streamBrowserify;
var hasRequiredStreamBrowserify;
function requireStreamBrowserify() {
  if (hasRequiredStreamBrowserify) return streamBrowserify;
  hasRequiredStreamBrowserify = 1;
  streamBrowserify = Stream;
  var EE = requireEvents().EventEmitter;
  var inherits = requireInherits_browser();
  inherits(Stream, EE);
  Stream.Readable = require_stream_readable$1();
  Stream.Writable = require_stream_writable$1();
  Stream.Duplex = require_stream_duplex$1();
  Stream.Transform = require_stream_transform$1();
  Stream.PassThrough = require_stream_passthrough$1();
  Stream.finished = requireEndOfStream();
  Stream.pipeline = requirePipeline();
  Stream.Stream = Stream;
  function Stream() {
    EE.call(this);
  }
  Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }
    source.on("data", ondata);
    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }
    dest.on("drain", ondrain);
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on("end", onend);
      source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;
      dest.end();
    }
    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;
      if (typeof dest.destroy === "function") dest.destroy();
    }
    function onerror(er) {
      cleanup();
      if (EE.listenerCount(this, "error") === 0) {
        throw er;
      }
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    function cleanup() {
      source.removeListener("data", ondata);
      dest.removeListener("drain", ondrain);
      source.removeListener("end", onend);
      source.removeListener("close", onclose);
      source.removeListener("error", onerror);
      dest.removeListener("error", onerror);
      source.removeListener("end", cleanup);
      source.removeListener("close", cleanup);
      dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    return dest;
  };
  return streamBrowserify;
}
var cipherBase;
var hasRequiredCipherBase;
function requireCipherBase() {
  if (hasRequiredCipherBase) return cipherBase;
  hasRequiredCipherBase = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var Transform = requireStreamBrowserify().Transform;
  var StringDecoder = requireString_decoder().StringDecoder;
  var inherits = requireInherits_browser();
  function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this.final = this._finalOrDigest;
    }
    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
  }
  inherits(CipherBase, Transform);
  CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") {
      data = Buffer2.from(data, inputEnc);
    }
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }
    return outData;
  };
  CipherBase.prototype.setAutoPadding = function() {
  };
  CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
  };
  CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
  };
  CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
  };
  CipherBase.prototype._transform = function(data, _2, next) {
    var err;
    try {
      if (this.hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e2) {
      err = e2;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function(done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e2) {
      err = e2;
    }
    done(err);
  };
  CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer2.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData;
  };
  CipherBase.prototype._toString = function(value3, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc);
      this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value3);
    if (fin) {
      out += this._decoder.end();
    }
    return out;
  };
  cipherBase = CipherBase;
  return cipherBase;
}
var browser$a;
var hasRequiredBrowser$9;
function requireBrowser$9() {
  if (hasRequiredBrowser$9) return browser$a;
  hasRequiredBrowser$9 = 1;
  var inherits = requireInherits_browser();
  var MD5 = requireMd5_js();
  var RIPEMD1602 = requireRipemd160();
  var sha2 = requireSha_js();
  var Base = requireCipherBase();
  function Hash(hash2) {
    Base.call(this, "digest");
    this._hash = hash2;
  }
  inherits(Hash, Base);
  Hash.prototype._update = function(data) {
    this._hash.update(data);
  };
  Hash.prototype._final = function() {
    return this._hash.digest();
  };
  browser$a = function createHash2(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5") return new MD5();
    if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD1602();
    return new Hash(sha2(alg));
  };
  return browser$a;
}
var _Buffer = safeBufferExports.Buffer;
function base$3(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j2 = 0; j2 < BASE_MAP.length; j2++) {
    BASE_MAP[j2] = 255;
  }
  for (var i2 = 0; i2 < ALPHABET2.length; i2++) {
    var x2 = ALPHABET2.charAt(i2);
    var xc = x2.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x2 + " is ambiguous");
    }
    BASE_MAP[xc] = i2;
  }
  var BASE2 = ALPHABET2.length;
  var LEADER = ALPHABET2.charAt(0);
  var FACTOR = Math.log(BASE2) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE2);
  function encode2(source) {
    if (Array.isArray(source) || source instanceof Uint8Array) {
      source = _Buffer.from(source);
    }
    if (!_Buffer.isBuffer(source)) {
      throw new TypeError("Expected Buffer");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i3 = 0;
      for (var it1 = size - 1; (carry !== 0 || i3 < length) && it1 !== -1; it1--, i3++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE2 >>> 0;
        carry = carry / BASE2 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i3;
      pbegin++;
    }
    var it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET2.charAt(b58[it2]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return _Buffer.alloc(0);
    }
    var psz = 0;
    var zeroes = 0;
    var length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size);
    while (psz < source.length) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i3 = 0;
      for (var it3 = size - 1; (carry !== 0 || i3 < length) && it3 !== -1; it3--, i3++) {
        carry += BASE2 * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i3;
      psz++;
    }
    var it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
    vch.fill(0, 0, zeroes);
    var j3 = zeroes;
    while (it4 !== size) {
      vch[j3++] = b256[it4++];
    }
    return vch;
  }
  function decode2(string2) {
    var buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error("Non-base" + BASE2 + " character");
  }
  return {
    encode: encode2,
    decodeUnsafe,
    decode: decode2
  };
}
var src$1 = base$3;
var basex = src$1;
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var bs58 = basex(ALPHABET);
var base58 = bs58;
var Buffer$1 = safeBufferExports.Buffer;
var base$2 = function(checksumFn) {
  function encode2(payload) {
    var checksum = checksumFn(payload);
    return base58.encode(Buffer$1.concat([
      payload,
      checksum
    ], payload.length + 4));
  }
  function decodeRaw2(buffer2) {
    var payload = buffer2.slice(0, -4);
    var checksum = buffer2.slice(-4);
    var newChecksum = checksumFn(payload);
    if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
    return payload;
  }
  function decodeUnsafe(string2) {
    var buffer2 = base58.decodeUnsafe(string2);
    if (!buffer2) return;
    return decodeRaw2(buffer2);
  }
  function decode2(string2) {
    var buffer2 = base58.decode(string2);
    var payload = decodeRaw2(buffer2);
    if (!payload) throw new Error("Invalid checksum");
    return payload;
  }
  return {
    encode: encode2,
    decode: decode2,
    decodeUnsafe
  };
};
var createHash = requireBrowser$9();
var bs58checkBase = base$2;
function sha256x2(buffer2) {
  var tmp = createHash("sha256").update(buffer2).digest();
  return createHash("sha256").update(tmp).digest();
}
var bs58check$2 = bs58checkBase(sha256x2);
var bs58check$1 = bs58check$2;
function decodeRaw(buffer2, version2) {
  if (version2 !== void 0 && buffer2[0] !== version2) throw new Error("Invalid network version");
  if (buffer2.length === 33) {
    return {
      version: buffer2[0],
      privateKey: buffer2.slice(1, 33),
      compressed: false
    };
  }
  if (buffer2.length !== 34) throw new Error("Invalid WIF length");
  if (buffer2[33] !== 1) throw new Error("Invalid compression flag");
  return {
    version: buffer2[0],
    privateKey: buffer2.slice(1, 33),
    compressed: true
  };
}
function encodeRaw(version2, privateKey, compressed) {
  var result = new Buffer$3(compressed ? 34 : 33);
  result.writeUInt8(version2, 0);
  privateKey.copy(result, 1);
  if (compressed) {
    result[33] = 1;
  }
  return result;
}
function decode$2(string2, version2) {
  return decodeRaw(bs58check$1.decode(string2), version2);
}
function encode$1(version2, privateKey, compressed) {
  if (typeof version2 === "number") return bs58check$1.encode(encodeRaw(version2, privateKey, compressed));
  return bs58check$1.encode(
    encodeRaw(
      version2.version,
      version2.privateKey,
      version2.compressed
    )
  );
}
var wif$2 = {
  decode: decode$2,
  decodeRaw,
  encode: encode$1,
  encodeRaw
};
Object.defineProperty(bip32, "__esModule", { value: true });
bip32.BIP32Factory = void 0;
const crypto$2 = crypto$3;
const testecc_1$1 = testecc$1;
const base_1 = lib$2;
const sha256_1$4 = sha256$5;
const typeforce = typeforce_1;
const wif$1 = wif$2;
const _bs58check = (0, base_1.base58check)(sha256_1$4.sha256);
const bs58check = {
  encode: (data) => _bs58check.encode(Uint8Array.from(data)),
  decode: (str) => Buffer$3.from(_bs58check.decode(str))
};
function BIP32Factory(ecc2) {
  (0, testecc_1$1.testEcc)(ecc2);
  const UINT256_TYPE = typeforce.BufferN(32);
  const NETWORK_TYPE = typeforce.compile({
    wif: typeforce.UInt8,
    bip32: {
      public: typeforce.UInt32,
      private: typeforce.UInt32
    }
  });
  const BITCOIN = {
    messagePrefix: "Bitcoin Signed Message:\n",
    bech32: "bc",
    bip32: {
      public: 76067358,
      private: 76066276
    },
    pubKeyHash: 0,
    scriptHash: 5,
    wif: 128
  };
  const HIGHEST_BIT = 2147483648;
  const UINT31_MAX = Math.pow(2, 31) - 1;
  function BIP32Path(value3) {
    return typeforce.String(value3) && value3.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null;
  }
  function UInt31(value3) {
    return typeforce.UInt32(value3) && value3 <= UINT31_MAX;
  }
  function toXOnly2(pubKey) {
    return pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
  }
  class Bip32Signer {
    constructor(__D, __Q) {
      this.__D = __D;
      this.__Q = __Q;
      this.lowR = false;
    }
    get publicKey() {
      if (this.__Q === void 0)
        this.__Q = Buffer$3.from(ecc2.pointFromScalar(this.__D, true));
      return this.__Q;
    }
    get privateKey() {
      return this.__D;
    }
    sign(hash2, lowR) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (lowR === void 0)
        lowR = this.lowR;
      if (lowR === false) {
        return Buffer$3.from(ecc2.sign(hash2, this.privateKey));
      } else {
        let sig = Buffer$3.from(ecc2.sign(hash2, this.privateKey));
        const extraData = Buffer$3.alloc(32, 0);
        let counter = 0;
        while (sig[0] > 127) {
          counter++;
          extraData.writeUIntLE(counter, 0, 6);
          sig = Buffer$3.from(ecc2.sign(hash2, this.privateKey, extraData));
        }
        return sig;
      }
    }
    signSchnorr(hash2) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (!ecc2.signSchnorr)
        throw new Error("signSchnorr not supported by ecc library");
      return Buffer$3.from(ecc2.signSchnorr(hash2, this.privateKey));
    }
    verify(hash2, signature2) {
      return ecc2.verify(hash2, this.publicKey, signature2);
    }
    verifySchnorr(hash2, signature2) {
      if (!ecc2.verifySchnorr)
        throw new Error("verifySchnorr not supported by ecc library");
      return ecc2.verifySchnorr(hash2, this.publicKey.subarray(1, 33), signature2);
    }
  }
  class BIP322 extends Bip32Signer {
    constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0) {
      super(__D, __Q);
      this.chainCode = chainCode;
      this.network = network;
      this.__DEPTH = __DEPTH;
      this.__INDEX = __INDEX;
      this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
      typeforce(NETWORK_TYPE, network);
    }
    get depth() {
      return this.__DEPTH;
    }
    get index() {
      return this.__INDEX;
    }
    get parentFingerprint() {
      return this.__PARENT_FINGERPRINT;
    }
    get identifier() {
      return crypto$2.hash160(this.publicKey);
    }
    get fingerprint() {
      return this.identifier.slice(0, 4);
    }
    get compressed() {
      return true;
    }
    // Private === not neutered
    // Public === neutered
    isNeutered() {
      return this.__D === void 0;
    }
    neutered() {
      return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
    }
    toBase58() {
      const network = this.network;
      const version2 = !this.isNeutered() ? network.bip32.private : network.bip32.public;
      const buffer2 = Buffer$3.allocUnsafe(78);
      buffer2.writeUInt32BE(version2, 0);
      buffer2.writeUInt8(this.depth, 4);
      buffer2.writeUInt32BE(this.parentFingerprint, 5);
      buffer2.writeUInt32BE(this.index, 9);
      this.chainCode.copy(buffer2, 13);
      if (!this.isNeutered()) {
        buffer2.writeUInt8(0, 45);
        this.privateKey.copy(buffer2, 46);
      } else {
        this.publicKey.copy(buffer2, 45);
      }
      return bs58check.encode(buffer2);
    }
    toWIF() {
      if (!this.privateKey)
        throw new TypeError("Missing private key");
      return wif$1.encode(this.network.wif, this.privateKey, true);
    }
    // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
    derive(index) {
      typeforce(typeforce.UInt32, index);
      const isHardened = index >= HIGHEST_BIT;
      const data = Buffer$3.allocUnsafe(37);
      if (isHardened) {
        if (this.isNeutered())
          throw new TypeError("Missing private key for hardened child key");
        data[0] = 0;
        this.privateKey.copy(data, 1);
        data.writeUInt32BE(index, 33);
      } else {
        this.publicKey.copy(data, 0);
        data.writeUInt32BE(index, 33);
      }
      const I2 = crypto$2.hmacSHA512(this.chainCode, data);
      const IL = I2.slice(0, 32);
      const IR = I2.slice(32);
      if (!ecc2.isPrivate(IL))
        return this.derive(index + 1);
      let hd;
      if (!this.isNeutered()) {
        const ki = Buffer$3.from(ecc2.privateAdd(this.privateKey, IL));
        if (ki == null)
          return this.derive(index + 1);
        hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
      } else {
        const Ki = Buffer$3.from(ecc2.pointAddScalar(this.publicKey, IL, true));
        if (Ki === null)
          return this.derive(index + 1);
        hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
      }
      return hd;
    }
    deriveHardened(index) {
      typeforce(UInt31, index);
      return this.derive(index + HIGHEST_BIT);
    }
    derivePath(path) {
      typeforce(BIP32Path, path);
      let splitPath = path.split("/");
      if (splitPath[0] === "m") {
        if (this.parentFingerprint)
          throw new TypeError("Expected master, got child");
        splitPath = splitPath.slice(1);
      }
      return splitPath.reduce((prevHd, indexStr) => {
        let index;
        if (indexStr.slice(-1) === `'`) {
          index = parseInt(indexStr.slice(0, -1), 10);
          return prevHd.deriveHardened(index);
        } else {
          index = parseInt(indexStr, 10);
          return prevHd.derive(index);
        }
      }, this);
    }
    tweak(t2) {
      if (this.privateKey)
        return this.tweakFromPrivateKey(t2);
      return this.tweakFromPublicKey(t2);
    }
    tweakFromPublicKey(t2) {
      const xOnlyPubKey = toXOnly2(this.publicKey);
      if (!ecc2.xOnlyPointAddTweak)
        throw new Error("xOnlyPointAddTweak not supported by ecc library");
      const tweakedPublicKey = ecc2.xOnlyPointAddTweak(xOnlyPubKey, t2);
      if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null)
        throw new Error("Cannot tweak public key!");
      const parityByte = Buffer$3.from([
        tweakedPublicKey.parity === 0 ? 2 : 3
      ]);
      const tweakedPublicKeyCompresed = Buffer$3.concat([
        parityByte,
        tweakedPublicKey.xOnlyPubkey
      ]);
      return new Bip32Signer(void 0, tweakedPublicKeyCompresed);
    }
    tweakFromPrivateKey(t2) {
      const hasOddY = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1;
      const privateKey = (() => {
        if (!hasOddY)
          return this.privateKey;
        else if (!ecc2.privateNegate)
          throw new Error("privateNegate not supported by ecc library");
        else
          return ecc2.privateNegate(this.privateKey);
      })();
      const tweakedPrivateKey = ecc2.privateAdd(privateKey, t2);
      if (!tweakedPrivateKey)
        throw new Error("Invalid tweaked private key!");
      return new Bip32Signer(Buffer$3.from(tweakedPrivateKey), void 0);
    }
  }
  function fromBase58(inString, network) {
    const buffer2 = bs58check.decode(inString);
    if (buffer2.length !== 78)
      throw new TypeError("Invalid buffer length");
    network = network || BITCOIN;
    const version2 = buffer2.readUInt32BE(0);
    if (version2 !== network.bip32.private && version2 !== network.bip32.public)
      throw new TypeError("Invalid network version");
    const depth = buffer2[4];
    const parentFingerprint = buffer2.readUInt32BE(5);
    if (depth === 0) {
      if (parentFingerprint !== 0)
        throw new TypeError("Invalid parent fingerprint");
    }
    const index = buffer2.readUInt32BE(9);
    if (depth === 0 && index !== 0)
      throw new TypeError("Invalid index");
    const chainCode = buffer2.slice(13, 45);
    let hd;
    if (version2 === network.bip32.private) {
      if (buffer2.readUInt8(45) !== 0)
        throw new TypeError("Invalid private key");
      const k2 = buffer2.slice(46, 78);
      hd = fromPrivateKeyLocal(k2, chainCode, network, depth, index, parentFingerprint);
    } else {
      const X2 = buffer2.slice(45, 78);
      hd = fromPublicKeyLocal(X2, chainCode, network, depth, index, parentFingerprint);
    }
    return hd;
  }
  function fromPrivateKey(privateKey, chainCode, network) {
    return fromPrivateKeyLocal(privateKey, chainCode, network);
  }
  function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce({
      privateKey: UINT256_TYPE,
      chainCode: UINT256_TYPE
    }, { privateKey, chainCode });
    network = network || BITCOIN;
    if (!ecc2.isPrivate(privateKey))
      throw new TypeError("Private key not in range [1, n)");
    return new BIP322(privateKey, void 0, chainCode, network, depth, index, parentFingerprint);
  }
  function fromPublicKey(publicKey, chainCode, network) {
    return fromPublicKeyLocal(publicKey, chainCode, network);
  }
  function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
    typeforce({
      publicKey: typeforce.BufferN(33),
      chainCode: UINT256_TYPE
    }, { publicKey, chainCode });
    network = network || BITCOIN;
    if (!ecc2.isPoint(publicKey))
      throw new TypeError("Point is not on the curve");
    return new BIP322(void 0, publicKey, chainCode, network, depth, index, parentFingerprint);
  }
  function fromSeed(seed, network) {
    typeforce(typeforce.Buffer, seed);
    if (seed.length < 16)
      throw new TypeError("Seed should be at least 128 bits");
    if (seed.length > 64)
      throw new TypeError("Seed should be at most 512 bits");
    network = network || BITCOIN;
    const I2 = crypto$2.hmacSHA512(Buffer$3.from("Bitcoin seed", "utf8"), seed);
    const IL = I2.slice(0, 32);
    const IR = I2.slice(32);
    return fromPrivateKey(IL, IR, network);
  }
  return {
    fromSeed,
    fromBase58,
    fromPublicKey,
    fromPrivateKey
  };
}
bip32.BIP32Factory = BIP32Factory;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.BIP32Factory = exports2.default = void 0;
  var bip32_1 = bip32;
  Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
    return bip32_1.BIP32Factory;
  } });
  Object.defineProperty(exports2, "BIP32Factory", { enumerable: true, get: function() {
    return bip32_1.BIP32Factory;
  } });
})(src$2);
var dist = {};
var lib$1 = {};
var cryptoBrowserify = {};
var browser$9 = { exports: {} };
var MAX_BYTES = 65536;
var MAX_UINT32 = 4294967295;
function oldBrowser() {
  throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}
var Buffer = safeBufferExports.Buffer;
var crypto$1 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
if (crypto$1 && crypto$1.getRandomValues) {
  browser$9.exports = randomBytes$1;
} else {
  browser$9.exports = oldBrowser;
}
function randomBytes$1(size, cb) {
  if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
  var bytes2 = Buffer.allocUnsafe(size);
  if (size > 0) {
    if (size > MAX_BYTES) {
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        crypto$1.getRandomValues(bytes2.slice(generated, generated + MAX_BYTES));
      }
    } else {
      crypto$1.getRandomValues(bytes2);
    }
  }
  if (typeof cb === "function") {
    return process$1.nextTick(function() {
      cb(null, bytes2);
    });
  }
  return bytes2;
}
var browserExports = browser$9.exports;
var legacy;
var hasRequiredLegacy;
function requireLegacy() {
  if (hasRequiredLegacy) return legacy;
  hasRequiredLegacy = 1;
  var inherits = requireInherits_browser();
  var Buffer2 = safeBufferExports.Buffer;
  var Base = requireCipherBase();
  var ZEROS = Buffer2.alloc(128);
  var blocksize = 64;
  function Hmac(alg, key2) {
    Base.call(this, "digest");
    if (typeof key2 === "string") {
      key2 = Buffer2.from(key2);
    }
    this._alg = alg;
    this._key = key2;
    if (key2.length > blocksize) {
      key2 = alg(key2);
    } else if (key2.length < blocksize) {
      key2 = Buffer2.concat([key2, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
    var opad = this._opad = Buffer2.allocUnsafe(blocksize);
    for (var i2 = 0; i2 < blocksize; i2++) {
      ipad[i2] = key2[i2] ^ 54;
      opad[i2] = key2[i2] ^ 92;
    }
    this._hash = [ipad];
  }
  inherits(Hmac, Base);
  Hmac.prototype._update = function(data) {
    this._hash.push(data);
  };
  Hmac.prototype._final = function() {
    var h2 = this._alg(Buffer2.concat(this._hash));
    return this._alg(Buffer2.concat([this._opad, h2]));
  };
  legacy = Hmac;
  return legacy;
}
var md5;
var hasRequiredMd5;
function requireMd5() {
  if (hasRequiredMd5) return md5;
  hasRequiredMd5 = 1;
  var MD5 = requireMd5_js();
  md5 = function(buffer2) {
    return new MD5().update(buffer2).digest();
  };
  return md5;
}
var browser$8;
var hasRequiredBrowser$8;
function requireBrowser$8() {
  if (hasRequiredBrowser$8) return browser$8;
  hasRequiredBrowser$8 = 1;
  var inherits = requireInherits_browser();
  var Legacy = requireLegacy();
  var Base = requireCipherBase();
  var Buffer2 = safeBufferExports.Buffer;
  var md52 = requireMd5();
  var RIPEMD1602 = requireRipemd160();
  var sha2 = requireSha_js();
  var ZEROS = Buffer2.alloc(128);
  function Hmac(alg, key2) {
    Base.call(this, "digest");
    if (typeof key2 === "string") {
      key2 = Buffer2.from(key2);
    }
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key2;
    if (key2.length > blocksize) {
      var hash2 = alg === "rmd160" ? new RIPEMD1602() : sha2(alg);
      key2 = hash2.update(key2).digest();
    } else if (key2.length < blocksize) {
      key2 = Buffer2.concat([key2, ZEROS], blocksize);
    }
    var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
    var opad = this._opad = Buffer2.allocUnsafe(blocksize);
    for (var i2 = 0; i2 < blocksize; i2++) {
      ipad[i2] = key2[i2] ^ 54;
      opad[i2] = key2[i2] ^ 92;
    }
    this._hash = alg === "rmd160" ? new RIPEMD1602() : sha2(alg);
    this._hash.update(ipad);
  }
  inherits(Hmac, Base);
  Hmac.prototype._update = function(data) {
    this._hash.update(data);
  };
  Hmac.prototype._final = function() {
    var h2 = this._hash.digest();
    var hash2 = this._alg === "rmd160" ? new RIPEMD1602() : sha2(this._alg);
    return hash2.update(this._opad).update(h2).digest();
  };
  browser$8 = function createHmac(alg, key2) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") {
      return new Hmac("rmd160", key2);
    }
    if (alg === "md5") {
      return new Legacy(md52, key2);
    }
    return new Hmac(alg, key2);
  };
  return browser$8;
}
const sha224WithRSAEncryption = {
  sign: "rsa",
  hash: "sha224",
  id: "302d300d06096086480165030402040500041c"
};
const sha256WithRSAEncryption = {
  sign: "rsa",
  hash: "sha256",
  id: "3031300d060960864801650304020105000420"
};
const sha384WithRSAEncryption = {
  sign: "rsa",
  hash: "sha384",
  id: "3041300d060960864801650304020205000430"
};
const sha512WithRSAEncryption = {
  sign: "rsa",
  hash: "sha512",
  id: "3051300d060960864801650304020305000440"
};
const sha256$2 = {
  sign: "ecdsa",
  hash: "sha256",
  id: ""
};
const sha224 = {
  sign: "ecdsa",
  hash: "sha224",
  id: ""
};
const sha384 = {
  sign: "ecdsa",
  hash: "sha384",
  id: ""
};
const sha512 = {
  sign: "ecdsa",
  hash: "sha512",
  id: ""
};
const DSA = {
  sign: "dsa",
  hash: "sha1",
  id: ""
};
const ripemd160WithRSA = {
  sign: "rsa",
  hash: "rmd160",
  id: "3021300906052b2403020105000414"
};
const md5WithRSAEncryption = {
  sign: "rsa",
  hash: "md5",
  id: "3020300c06082a864886f70d020505000410"
};
const require$$6 = {
  sha224WithRSAEncryption,
  "RSA-SHA224": {
    sign: "ecdsa/rsa",
    hash: "sha224",
    id: "302d300d06096086480165030402040500041c"
  },
  sha256WithRSAEncryption,
  "RSA-SHA256": {
    sign: "ecdsa/rsa",
    hash: "sha256",
    id: "3031300d060960864801650304020105000420"
  },
  sha384WithRSAEncryption,
  "RSA-SHA384": {
    sign: "ecdsa/rsa",
    hash: "sha384",
    id: "3041300d060960864801650304020205000430"
  },
  sha512WithRSAEncryption,
  "RSA-SHA512": {
    sign: "ecdsa/rsa",
    hash: "sha512",
    id: "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    sign: "rsa",
    hash: "sha1",
    id: "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    sign: "ecdsa",
    hash: "sha1",
    id: ""
  },
  sha256: sha256$2,
  sha224,
  sha384,
  sha512,
  "DSA-SHA": {
    sign: "dsa",
    hash: "sha1",
    id: ""
  },
  "DSA-SHA1": {
    sign: "dsa",
    hash: "sha1",
    id: ""
  },
  DSA,
  "DSA-WITH-SHA224": {
    sign: "dsa",
    hash: "sha224",
    id: ""
  },
  "DSA-SHA224": {
    sign: "dsa",
    hash: "sha224",
    id: ""
  },
  "DSA-WITH-SHA256": {
    sign: "dsa",
    hash: "sha256",
    id: ""
  },
  "DSA-SHA256": {
    sign: "dsa",
    hash: "sha256",
    id: ""
  },
  "DSA-WITH-SHA384": {
    sign: "dsa",
    hash: "sha384",
    id: ""
  },
  "DSA-SHA384": {
    sign: "dsa",
    hash: "sha384",
    id: ""
  },
  "DSA-WITH-SHA512": {
    sign: "dsa",
    hash: "sha512",
    id: ""
  },
  "DSA-SHA512": {
    sign: "dsa",
    hash: "sha512",
    id: ""
  },
  "DSA-RIPEMD160": {
    sign: "dsa",
    hash: "rmd160",
    id: ""
  },
  ripemd160WithRSA,
  "RSA-RIPEMD160": {
    sign: "rsa",
    hash: "rmd160",
    id: "3021300906052b2403020105000414"
  },
  md5WithRSAEncryption,
  "RSA-MD5": {
    sign: "rsa",
    hash: "md5",
    id: "3020300c06082a864886f70d020505000410"
  }
};
var algos;
var hasRequiredAlgos;
function requireAlgos() {
  if (hasRequiredAlgos) return algos;
  hasRequiredAlgos = 1;
  algos = require$$6;
  return algos;
}
var browser$7 = {};
var precondition;
var hasRequiredPrecondition;
function requirePrecondition() {
  if (hasRequiredPrecondition) return precondition;
  hasRequiredPrecondition = 1;
  var MAX_ALLOC = Math.pow(2, 30) - 1;
  precondition = function(iterations, keylen) {
    if (typeof iterations !== "number") {
      throw new TypeError("Iterations not a number");
    }
    if (iterations < 0) {
      throw new TypeError("Bad iterations");
    }
    if (typeof keylen !== "number") {
      throw new TypeError("Key length not a number");
    }
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
      throw new TypeError("Bad key length");
    }
  };
  return precondition;
}
var defaultEncoding_1;
var hasRequiredDefaultEncoding;
function requireDefaultEncoding() {
  if (hasRequiredDefaultEncoding) return defaultEncoding_1;
  hasRequiredDefaultEncoding = 1;
  var defaultEncoding;
  if (commonjsGlobal.process && commonjsGlobal.process.browser) {
    defaultEncoding = "utf-8";
  } else if (commonjsGlobal.process && commonjsGlobal.process.version) {
    var pVersionMajor = parseInt(process$1.version.split(".")[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
  } else {
    defaultEncoding = "utf-8";
  }
  defaultEncoding_1 = defaultEncoding;
  return defaultEncoding_1;
}
var toBuffer;
var hasRequiredToBuffer;
function requireToBuffer() {
  if (hasRequiredToBuffer) return toBuffer;
  hasRequiredToBuffer = 1;
  var Buffer2 = safeBufferExports.Buffer;
  toBuffer = function(thing, encoding, name2) {
    if (Buffer2.isBuffer(thing)) {
      return thing;
    } else if (typeof thing === "string") {
      return Buffer2.from(thing, encoding);
    } else if (ArrayBuffer.isView(thing)) {
      return Buffer2.from(thing.buffer);
    } else {
      throw new TypeError(name2 + " must be a string, a Buffer, a typed array or a DataView");
    }
  };
  return toBuffer;
}
var syncBrowser;
var hasRequiredSyncBrowser;
function requireSyncBrowser() {
  if (hasRequiredSyncBrowser) return syncBrowser;
  hasRequiredSyncBrowser = 1;
  var md52 = requireMd5();
  var RIPEMD1602 = requireRipemd160();
  var sha2 = requireSha_js();
  var Buffer2 = safeBufferExports.Buffer;
  var checkParameters = requirePrecondition();
  var defaultEncoding = requireDefaultEncoding();
  var toBuffer2 = requireToBuffer();
  var ZEROS = Buffer2.alloc(128);
  var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
  };
  function Hmac(alg, key2, saltLen) {
    var hash2 = getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key2.length > blocksize) {
      key2 = hash2(key2);
    } else if (key2.length < blocksize) {
      key2 = Buffer2.concat([key2, ZEROS], blocksize);
    }
    var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
    for (var i2 = 0; i2 < blocksize; i2++) {
      ipad[i2] = key2[i2] ^ 54;
      opad[i2] = key2[i2] ^ 92;
    }
    var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash2;
    this.size = sizes[alg];
  }
  Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h2 = this.hash(ipad);
    h2.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
  };
  function getDigest(alg) {
    function shaFunc(data) {
      return sha2(alg).update(data).digest();
    }
    function rmd160Func(data) {
      return new RIPEMD1602().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
    if (alg === "md5") return md52;
    return shaFunc;
  }
  function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer2(password, defaultEncoding, "Password");
    salt = toBuffer2(salt, defaultEncoding, "Salt");
    digest = digest || "sha1";
    var hmac2 = new Hmac(digest, password, salt.length);
    var DK = Buffer2.allocUnsafe(keylen);
    var block1 = Buffer2.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l2 = Math.ceil(keylen / hLen);
    for (var i2 = 1; i2 <= l2; i2++) {
      block1.writeUInt32BE(i2, salt.length);
      var T2 = hmac2.run(block1, hmac2.ipad1);
      var U2 = T2;
      for (var j2 = 1; j2 < iterations; j2++) {
        U2 = hmac2.run(U2, hmac2.ipad2);
        for (var k2 = 0; k2 < hLen; k2++) T2[k2] ^= U2[k2];
      }
      T2.copy(DK, destPos);
      destPos += hLen;
    }
    return DK;
  }
  syncBrowser = pbkdf2;
  return syncBrowser;
}
var async;
var hasRequiredAsync;
function requireAsync() {
  if (hasRequiredAsync) return async;
  hasRequiredAsync = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var checkParameters = requirePrecondition();
  var defaultEncoding = requireDefaultEncoding();
  var sync = requireSyncBrowser();
  var toBuffer2 = requireToBuffer();
  var ZERO_BUF;
  var subtle = commonjsGlobal.crypto && commonjsGlobal.crypto.subtle;
  var toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
  };
  var checks = [];
  function checkNative(algo) {
    if (commonjsGlobal.process && !commonjsGlobal.process.browser) {
      return Promise.resolve(false);
    }
    if (!subtle || !subtle.importKey || !subtle.deriveBits) {
      return Promise.resolve(false);
    }
    if (checks[algo] !== void 0) {
      return checks[algo];
    }
    ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
      return true;
    }).catch(function() {
      return false;
    });
    checks[algo] = prom;
    return prom;
  }
  var nextTick;
  function getNextTick() {
    if (nextTick) {
      return nextTick;
    }
    if (commonjsGlobal.process && commonjsGlobal.process.nextTick) {
      nextTick = commonjsGlobal.process.nextTick;
    } else if (commonjsGlobal.queueMicrotask) {
      nextTick = commonjsGlobal.queueMicrotask;
    } else if (commonjsGlobal.setImmediate) {
      nextTick = commonjsGlobal.setImmediate;
    } else {
      nextTick = commonjsGlobal.setTimeout;
    }
    return nextTick;
  }
  function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey(
      "raw",
      password,
      { name: "PBKDF2" },
      false,
      ["deriveBits"]
    ).then(function(key2) {
      return subtle.deriveBits({
        name: "PBKDF2",
        salt,
        iterations,
        hash: {
          name: algo
        }
      }, key2, length << 3);
    }).then(function(res) {
      return Buffer2.from(res);
    });
  }
  function resolvePromise(promise, callback) {
    promise.then(function(out) {
      getNextTick()(function() {
        callback(null, out);
      });
    }, function(e2) {
      getNextTick()(function() {
        callback(e2);
      });
    });
  }
  async = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
      callback = digest;
      digest = void 0;
    }
    digest = digest || "sha1";
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof commonjsGlobal.Promise !== "function") {
      getNextTick()(function() {
        var out;
        try {
          out = sync(password, salt, iterations, keylen, digest);
        } catch (e2) {
          return callback(e2);
        }
        callback(null, out);
      });
      return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer2(password, defaultEncoding, "Password");
    salt = toBuffer2(salt, defaultEncoding, "Salt");
    if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
    resolvePromise(checkNative(algo).then(function(resp) {
      if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
      return sync(password, salt, iterations, keylen, digest);
    }), callback);
  };
  return async;
}
var hasRequiredBrowser$7;
function requireBrowser$7() {
  if (hasRequiredBrowser$7) return browser$7;
  hasRequiredBrowser$7 = 1;
  browser$7.pbkdf2 = requireAsync();
  browser$7.pbkdf2Sync = requireSyncBrowser();
  return browser$7;
}
var browser$6 = {};
var des$1 = {};
var utils$3 = {};
var hasRequiredUtils$3;
function requireUtils$3() {
  if (hasRequiredUtils$3) return utils$3;
  hasRequiredUtils$3 = 1;
  utils$3.readUInt32BE = function readUInt32BE(bytes2, off) {
    var res = bytes2[0 + off] << 24 | bytes2[1 + off] << 16 | bytes2[2 + off] << 8 | bytes2[3 + off];
    return res >>> 0;
  };
  utils$3.writeUInt32BE = function writeUInt32BE(bytes2, value3, off) {
    bytes2[0 + off] = value3 >>> 24;
    bytes2[1 + off] = value3 >>> 16 & 255;
    bytes2[2 + off] = value3 >>> 8 & 255;
    bytes2[3 + off] = value3 & 255;
  };
  utils$3.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i2 = 6; i2 >= 0; i2 -= 2) {
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inR >>> j2 + i2 & 1;
      }
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inL >>> j2 + i2 & 1;
      }
    }
    for (var i2 = 6; i2 >= 0; i2 -= 2) {
      for (var j2 = 1; j2 <= 25; j2 += 8) {
        outR <<= 1;
        outR |= inR >>> j2 + i2 & 1;
      }
      for (var j2 = 1; j2 <= 25; j2 += 8) {
        outR <<= 1;
        outR |= inL >>> j2 + i2 & 1;
      }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$3.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i2 = 0; i2 < 4; i2++) {
      for (var j2 = 24; j2 >= 0; j2 -= 8) {
        outL <<= 1;
        outL |= inR >>> j2 + i2 & 1;
        outL <<= 1;
        outL |= inL >>> j2 + i2 & 1;
      }
    }
    for (var i2 = 4; i2 < 8; i2++) {
      for (var j2 = 24; j2 >= 0; j2 -= 8) {
        outR <<= 1;
        outR |= inR >>> j2 + i2 & 1;
        outR <<= 1;
        outR |= inL >>> j2 + i2 & 1;
      }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$3.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for (var i2 = 7; i2 >= 5; i2--) {
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inR >> j2 + i2 & 1;
      }
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outL <<= 1;
        outL |= inL >> j2 + i2 & 1;
      }
    }
    for (var j2 = 0; j2 <= 24; j2 += 8) {
      outL <<= 1;
      outL |= inR >> j2 + i2 & 1;
    }
    for (var i2 = 1; i2 <= 3; i2++) {
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outR <<= 1;
        outR |= inR >> j2 + i2 & 1;
      }
      for (var j2 = 0; j2 <= 24; j2 += 8) {
        outR <<= 1;
        outR |= inL >> j2 + i2 & 1;
      }
    }
    for (var j2 = 0; j2 <= 24; j2 += 8) {
      outR <<= 1;
      outR |= inL >> j2 + i2 & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$3.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
  };
  var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
  ];
  utils$3.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len2 = pc2table.length >>> 1;
    for (var i2 = 0; i2 < len2; i2++) {
      outL <<= 1;
      outL |= inL >>> pc2table[i2] & 1;
    }
    for (var i2 = len2; i2 < pc2table.length; i2++) {
      outR <<= 1;
      outR |= inR >>> pc2table[i2] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  utils$3.expand = function expand(r2, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r2 & 1) << 5 | r2 >>> 27;
    for (var i2 = 23; i2 >= 15; i2 -= 4) {
      outL <<= 6;
      outL |= r2 >>> i2 & 63;
    }
    for (var i2 = 11; i2 >= 3; i2 -= 4) {
      outR |= r2 >>> i2 & 63;
      outR <<= 6;
    }
    outR |= (r2 & 31) << 1 | r2 >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
  };
  var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
  ];
  utils$3.substitute = function substitute(inL, inR) {
    var out = 0;
    for (var i2 = 0; i2 < 4; i2++) {
      var b2 = inL >>> 18 - i2 * 6 & 63;
      var sb = sTable[i2 * 64 + b2];
      out <<= 4;
      out |= sb;
    }
    for (var i2 = 0; i2 < 4; i2++) {
      var b2 = inR >>> 18 - i2 * 6 & 63;
      var sb = sTable[4 * 64 + i2 * 64 + b2];
      out <<= 4;
      out |= sb;
    }
    return out >>> 0;
  };
  var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
  ];
  utils$3.permute = function permute(num) {
    var out = 0;
    for (var i2 = 0; i2 < permuteTable.length; i2++) {
      out <<= 1;
      out |= num >>> permuteTable[i2] & 1;
    }
    return out >>> 0;
  };
  utils$3.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while (str.length < size)
      str = "0" + str;
    var out = [];
    for (var i2 = 0; i2 < size; i2 += group)
      out.push(str.slice(i2, i2 + group));
    return out.join(" ");
  };
  return utils$3;
}
var minimalisticAssert;
var hasRequiredMinimalisticAssert;
function requireMinimalisticAssert() {
  if (hasRequiredMinimalisticAssert) return minimalisticAssert;
  hasRequiredMinimalisticAssert = 1;
  minimalisticAssert = assert2;
  function assert2(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert2.equal = function assertEqual(l2, r2, msg) {
    if (l2 != r2)
      throw new Error(msg || "Assertion failed: " + l2 + " != " + r2);
  };
  return minimalisticAssert;
}
var cipher;
var hasRequiredCipher;
function requireCipher() {
  if (hasRequiredCipher) return cipher;
  hasRequiredCipher = 1;
  var assert2 = requireMinimalisticAssert();
  function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
    this.padding = options.padding !== false;
  }
  cipher = Cipher;
  Cipher.prototype._init = function _init() {
  };
  Cipher.prototype.update = function update(data) {
    if (data.length === 0)
      return [];
    if (this.type === "decrypt")
      return this._updateDecrypt(data);
    else
      return this._updateEncrypt(data);
  };
  Cipher.prototype._buffer = function _buffer(data, off) {
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for (var i2 = 0; i2 < min; i2++)
      this.buffer[this.bufferOff + i2] = data[off + i2];
    this.bufferOff += min;
    return min;
  };
  Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
  };
  Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
      inputOff += this._buffer(data, inputOff);
      if (this.bufferOff === this.buffer.length)
        outputOff += this._flushBuffer(out, outputOff);
    }
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for (; inputOff < max; inputOff += this.blockSize) {
      this._update(data, inputOff, out, outputOff);
      outputOff += this.blockSize;
    }
    for (; inputOff < data.length; inputOff++, this.bufferOff++)
      this.buffer[this.bufferOff] = data[inputOff];
    return out;
  };
  Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    for (; count > 0; count--) {
      inputOff += this._buffer(data, inputOff);
      outputOff += this._flushBuffer(out, outputOff);
    }
    inputOff += this._buffer(data, inputOff);
    return out;
  };
  Cipher.prototype.final = function final(buffer2) {
    var first;
    if (buffer2)
      first = this.update(buffer2);
    var last;
    if (this.type === "encrypt")
      last = this._finalEncrypt();
    else
      last = this._finalDecrypt();
    if (first)
      return first.concat(last);
    else
      return last;
  };
  Cipher.prototype._pad = function _pad(buffer2, off) {
    if (off === 0)
      return false;
    while (off < buffer2.length)
      buffer2[off++] = 0;
    return true;
  };
  Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff))
      return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
  };
  Cipher.prototype._unpad = function _unpad(buffer2) {
    return buffer2;
  };
  Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert2.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
  };
  return cipher;
}
var des;
var hasRequiredDes$1;
function requireDes$1() {
  if (hasRequiredDes$1) return des;
  hasRequiredDes$1 = 1;
  var assert2 = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  var utils2 = requireUtils$3();
  var Cipher = requireCipher();
  function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
  }
  function DES(options) {
    Cipher.call(this, options);
    var state2 = new DESState();
    this._desState = state2;
    this.deriveKeys(state2, options.key);
  }
  inherits(DES, Cipher);
  des = DES;
  DES.create = function create(options) {
    return new DES(options);
  };
  var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
  ];
  DES.prototype.deriveKeys = function deriveKeys(state2, key2) {
    state2.keys = new Array(16 * 2);
    assert2.equal(key2.length, this.blockSize, "Invalid key length");
    var kL = utils2.readUInt32BE(key2, 0);
    var kR = utils2.readUInt32BE(key2, 4);
    utils2.pc1(kL, kR, state2.tmp, 0);
    kL = state2.tmp[0];
    kR = state2.tmp[1];
    for (var i2 = 0; i2 < state2.keys.length; i2 += 2) {
      var shift = shiftTable[i2 >>> 1];
      kL = utils2.r28shl(kL, shift);
      kR = utils2.r28shl(kR, shift);
      utils2.pc2(kL, kR, state2.keys, i2);
    }
  };
  DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state2 = this._desState;
    var l2 = utils2.readUInt32BE(inp, inOff);
    var r2 = utils2.readUInt32BE(inp, inOff + 4);
    utils2.ip(l2, r2, state2.tmp, 0);
    l2 = state2.tmp[0];
    r2 = state2.tmp[1];
    if (this.type === "encrypt")
      this._encrypt(state2, l2, r2, state2.tmp, 0);
    else
      this._decrypt(state2, l2, r2, state2.tmp, 0);
    l2 = state2.tmp[0];
    r2 = state2.tmp[1];
    utils2.writeUInt32BE(out, l2, outOff);
    utils2.writeUInt32BE(out, r2, outOff + 4);
  };
  DES.prototype._pad = function _pad(buffer2, off) {
    if (this.padding === false) {
      return false;
    }
    var value3 = buffer2.length - off;
    for (var i2 = off; i2 < buffer2.length; i2++)
      buffer2[i2] = value3;
    return true;
  };
  DES.prototype._unpad = function _unpad(buffer2) {
    if (this.padding === false) {
      return buffer2;
    }
    var pad2 = buffer2[buffer2.length - 1];
    for (var i2 = buffer2.length - pad2; i2 < buffer2.length; i2++)
      assert2.equal(buffer2[i2], pad2);
    return buffer2.slice(0, buffer2.length - pad2);
  };
  DES.prototype._encrypt = function _encrypt(state2, lStart, rStart, out, off) {
    var l2 = lStart;
    var r2 = rStart;
    for (var i2 = 0; i2 < state2.keys.length; i2 += 2) {
      var keyL = state2.keys[i2];
      var keyR = state2.keys[i2 + 1];
      utils2.expand(r2, state2.tmp, 0);
      keyL ^= state2.tmp[0];
      keyR ^= state2.tmp[1];
      var s2 = utils2.substitute(keyL, keyR);
      var f2 = utils2.permute(s2);
      var t2 = r2;
      r2 = (l2 ^ f2) >>> 0;
      l2 = t2;
    }
    utils2.rip(r2, l2, out, off);
  };
  DES.prototype._decrypt = function _decrypt(state2, lStart, rStart, out, off) {
    var l2 = rStart;
    var r2 = lStart;
    for (var i2 = state2.keys.length - 2; i2 >= 0; i2 -= 2) {
      var keyL = state2.keys[i2];
      var keyR = state2.keys[i2 + 1];
      utils2.expand(l2, state2.tmp, 0);
      keyL ^= state2.tmp[0];
      keyR ^= state2.tmp[1];
      var s2 = utils2.substitute(keyL, keyR);
      var f2 = utils2.permute(s2);
      var t2 = l2;
      l2 = (r2 ^ f2) >>> 0;
      r2 = t2;
    }
    utils2.rip(l2, r2, out, off);
  };
  return des;
}
var cbc$1 = {};
var hasRequiredCbc$1;
function requireCbc$1() {
  if (hasRequiredCbc$1) return cbc$1;
  hasRequiredCbc$1 = 1;
  var assert2 = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  var proto = {};
  function CBCState(iv) {
    assert2.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for (var i2 = 0; i2 < this.iv.length; i2++)
      this.iv[i2] = iv[i2];
  }
  function instantiate(Base) {
    function CBC(options) {
      Base.call(this, options);
      this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for (var i2 = 0; i2 < keys.length; i2++) {
      var key2 = keys[i2];
      CBC.prototype[key2] = proto[key2];
    }
    CBC.create = function create(options) {
      return new CBC(options);
    };
    return CBC;
  }
  cbc$1.instantiate = instantiate;
  proto._cbcInit = function _cbcInit() {
    var state2 = new CBCState(this.options.iv);
    this._cbcState = state2;
  };
  proto._update = function _update(inp, inOff, out, outOff) {
    var state2 = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state2.iv;
    if (this.type === "encrypt") {
      for (var i2 = 0; i2 < this.blockSize; i2++)
        iv[i2] ^= inp[inOff + i2];
      superProto._update.call(this, iv, 0, out, outOff);
      for (var i2 = 0; i2 < this.blockSize; i2++)
        iv[i2] = out[outOff + i2];
    } else {
      superProto._update.call(this, inp, inOff, out, outOff);
      for (var i2 = 0; i2 < this.blockSize; i2++)
        out[outOff + i2] ^= iv[i2];
      for (var i2 = 0; i2 < this.blockSize; i2++)
        iv[i2] = inp[inOff + i2];
    }
  };
  return cbc$1;
}
var ede;
var hasRequiredEde;
function requireEde() {
  if (hasRequiredEde) return ede;
  hasRequiredEde = 1;
  var assert2 = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  var Cipher = requireCipher();
  var DES = requireDes$1();
  function EDEState(type2, key2) {
    assert2.equal(key2.length, 24, "Invalid key length");
    var k1 = key2.slice(0, 8);
    var k2 = key2.slice(8, 16);
    var k3 = key2.slice(16, 24);
    if (type2 === "encrypt") {
      this.ciphers = [
        DES.create({ type: "encrypt", key: k1 }),
        DES.create({ type: "decrypt", key: k2 }),
        DES.create({ type: "encrypt", key: k3 })
      ];
    } else {
      this.ciphers = [
        DES.create({ type: "decrypt", key: k3 }),
        DES.create({ type: "encrypt", key: k2 }),
        DES.create({ type: "decrypt", key: k1 })
      ];
    }
  }
  function EDE(options) {
    Cipher.call(this, options);
    var state2 = new EDEState(this.type, this.options.key);
    this._edeState = state2;
  }
  inherits(EDE, Cipher);
  ede = EDE;
  EDE.create = function create(options) {
    return new EDE(options);
  };
  EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state2 = this._edeState;
    state2.ciphers[0]._update(inp, inOff, out, outOff);
    state2.ciphers[1]._update(out, outOff, out, outOff);
    state2.ciphers[2]._update(out, outOff, out, outOff);
  };
  EDE.prototype._pad = DES.prototype._pad;
  EDE.prototype._unpad = DES.prototype._unpad;
  return ede;
}
var hasRequiredDes;
function requireDes() {
  if (hasRequiredDes) return des$1;
  hasRequiredDes = 1;
  des$1.utils = requireUtils$3();
  des$1.Cipher = requireCipher();
  des$1.DES = requireDes$1();
  des$1.CBC = requireCbc$1();
  des$1.EDE = requireEde();
  return des$1;
}
var browserifyDes;
var hasRequiredBrowserifyDes;
function requireBrowserifyDes() {
  if (hasRequiredBrowserifyDes) return browserifyDes;
  hasRequiredBrowserifyDes = 1;
  var CipherBase = requireCipherBase();
  var des2 = requireDes();
  var inherits = requireInherits_browser();
  var Buffer2 = safeBufferExports.Buffer;
  var modes2 = {
    "des-ede3-cbc": des2.CBC.instantiate(des2.EDE),
    "des-ede3": des2.EDE,
    "des-ede-cbc": des2.CBC.instantiate(des2.EDE),
    "des-ede": des2.EDE,
    "des-cbc": des2.CBC.instantiate(des2.DES),
    "des-ecb": des2.DES
  };
  modes2.des = modes2["des-cbc"];
  modes2.des3 = modes2["des-ede3-cbc"];
  browserifyDes = DES;
  inherits(DES, CipherBase);
  function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes2[modeName];
    var type2;
    if (opts.decrypt) {
      type2 = "decrypt";
    } else {
      type2 = "encrypt";
    }
    var key2 = opts.key;
    if (!Buffer2.isBuffer(key2)) {
      key2 = Buffer2.from(key2);
    }
    if (modeName === "des-ede" || modeName === "des-ede-cbc") {
      key2 = Buffer2.concat([key2, key2.slice(0, 8)]);
    }
    var iv = opts.iv;
    if (!Buffer2.isBuffer(iv)) {
      iv = Buffer2.from(iv);
    }
    this._des = mode.create({
      key: key2,
      iv,
      type: type2
    });
  }
  DES.prototype._update = function(data) {
    return Buffer2.from(this._des.update(data));
  };
  DES.prototype._final = function() {
    return Buffer2.from(this._des.final());
  };
  return browserifyDes;
}
var browser$5 = {};
var encrypter = {};
var ecb = {};
var hasRequiredEcb;
function requireEcb() {
  if (hasRequiredEcb) return ecb;
  hasRequiredEcb = 1;
  ecb.encrypt = function(self2, block2) {
    return self2._cipher.encryptBlock(block2);
  };
  ecb.decrypt = function(self2, block2) {
    return self2._cipher.decryptBlock(block2);
  };
  return ecb;
}
var cbc = {};
var bufferXor;
var hasRequiredBufferXor;
function requireBufferXor() {
  if (hasRequiredBufferXor) return bufferXor;
  hasRequiredBufferXor = 1;
  bufferXor = function xor2(a2, b2) {
    var length = Math.min(a2.length, b2.length);
    var buffer2 = new Buffer$3(length);
    for (var i2 = 0; i2 < length; ++i2) {
      buffer2[i2] = a2[i2] ^ b2[i2];
    }
    return buffer2;
  };
  return bufferXor;
}
var hasRequiredCbc;
function requireCbc() {
  if (hasRequiredCbc) return cbc;
  hasRequiredCbc = 1;
  var xor2 = requireBufferXor();
  cbc.encrypt = function(self2, block2) {
    var data = xor2(block2, self2._prev);
    self2._prev = self2._cipher.encryptBlock(data);
    return self2._prev;
  };
  cbc.decrypt = function(self2, block2) {
    var pad2 = self2._prev;
    self2._prev = block2;
    var out = self2._cipher.decryptBlock(block2);
    return xor2(out, pad2);
  };
  return cbc;
}
var cfb = {};
var hasRequiredCfb;
function requireCfb() {
  if (hasRequiredCfb) return cfb;
  hasRequiredCfb = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var xor2 = requireBufferXor();
  function encryptStart(self2, data, decrypt) {
    var len2 = data.length;
    var out = xor2(data, self2._cache);
    self2._cache = self2._cache.slice(len2);
    self2._prev = Buffer2.concat([self2._prev, decrypt ? data : out]);
    return out;
  }
  cfb.encrypt = function(self2, data, decrypt) {
    var out = Buffer2.allocUnsafe(0);
    var len2;
    while (data.length) {
      if (self2._cache.length === 0) {
        self2._cache = self2._cipher.encryptBlock(self2._prev);
        self2._prev = Buffer2.allocUnsafe(0);
      }
      if (self2._cache.length <= data.length) {
        len2 = self2._cache.length;
        out = Buffer2.concat([out, encryptStart(self2, data.slice(0, len2), decrypt)]);
        data = data.slice(len2);
      } else {
        out = Buffer2.concat([out, encryptStart(self2, data, decrypt)]);
        break;
      }
    }
    return out;
  };
  return cfb;
}
var cfb8 = {};
var hasRequiredCfb8;
function requireCfb8() {
  if (hasRequiredCfb8) return cfb8;
  hasRequiredCfb8 = 1;
  var Buffer2 = safeBufferExports.Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad2 = self2._cipher.encryptBlock(self2._prev);
    var out = pad2[0] ^ byteParam;
    self2._prev = Buffer2.concat([
      self2._prev.slice(1),
      Buffer2.from([decrypt ? byteParam : out])
    ]);
    return out;
  }
  cfb8.encrypt = function(self2, chunk, decrypt) {
    var len2 = chunk.length;
    var out = Buffer2.allocUnsafe(len2);
    var i2 = -1;
    while (++i2 < len2) {
      out[i2] = encryptByte(self2, chunk[i2], decrypt);
    }
    return out;
  };
  return cfb8;
}
var cfb1 = {};
var hasRequiredCfb1;
function requireCfb1() {
  if (hasRequiredCfb1) return cfb1;
  hasRequiredCfb1 = 1;
  var Buffer2 = safeBufferExports.Buffer;
  function encryptByte(self2, byteParam, decrypt) {
    var pad2;
    var i2 = -1;
    var len2 = 8;
    var out = 0;
    var bit, value3;
    while (++i2 < len2) {
      pad2 = self2._cipher.encryptBlock(self2._prev);
      bit = byteParam & 1 << 7 - i2 ? 128 : 0;
      value3 = pad2[0] ^ bit;
      out += (value3 & 128) >> i2 % 8;
      self2._prev = shiftIn(self2._prev, decrypt ? bit : value3);
    }
    return out;
  }
  function shiftIn(buffer2, value3) {
    var len2 = buffer2.length;
    var i2 = -1;
    var out = Buffer2.allocUnsafe(buffer2.length);
    buffer2 = Buffer2.concat([buffer2, Buffer2.from([value3])]);
    while (++i2 < len2) {
      out[i2] = buffer2[i2] << 1 | buffer2[i2 + 1] >> 7;
    }
    return out;
  }
  cfb1.encrypt = function(self2, chunk, decrypt) {
    var len2 = chunk.length;
    var out = Buffer2.allocUnsafe(len2);
    var i2 = -1;
    while (++i2 < len2) {
      out[i2] = encryptByte(self2, chunk[i2], decrypt);
    }
    return out;
  };
  return cfb1;
}
var ofb = {};
var hasRequiredOfb;
function requireOfb() {
  if (hasRequiredOfb) return ofb;
  hasRequiredOfb = 1;
  var xor2 = requireBufferXor();
  function getBlock(self2) {
    self2._prev = self2._cipher.encryptBlock(self2._prev);
    return self2._prev;
  }
  ofb.encrypt = function(self2, chunk) {
    while (self2._cache.length < chunk.length) {
      self2._cache = Buffer$3.concat([self2._cache, getBlock(self2)]);
    }
    var pad2 = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor2(chunk, pad2);
  };
  return ofb;
}
var ctr = {};
var incr32_1;
var hasRequiredIncr32;
function requireIncr32() {
  if (hasRequiredIncr32) return incr32_1;
  hasRequiredIncr32 = 1;
  function incr32(iv) {
    var len2 = iv.length;
    var item;
    while (len2--) {
      item = iv.readUInt8(len2);
      if (item === 255) {
        iv.writeUInt8(0, len2);
      } else {
        item++;
        iv.writeUInt8(item, len2);
        break;
      }
    }
  }
  incr32_1 = incr32;
  return incr32_1;
}
var hasRequiredCtr;
function requireCtr() {
  if (hasRequiredCtr) return ctr;
  hasRequiredCtr = 1;
  var xor2 = requireBufferXor();
  var Buffer2 = safeBufferExports.Buffer;
  var incr32 = requireIncr32();
  function getBlock(self2) {
    var out = self2._cipher.encryptBlockRaw(self2._prev);
    incr32(self2._prev);
    return out;
  }
  var blockSize = 16;
  ctr.encrypt = function(self2, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self2._cache.length;
    self2._cache = Buffer2.concat([
      self2._cache,
      Buffer2.allocUnsafe(chunkNum * blockSize)
    ]);
    for (var i2 = 0; i2 < chunkNum; i2++) {
      var out = getBlock(self2);
      var offset = start + i2 * blockSize;
      self2._cache.writeUInt32BE(out[0], offset + 0);
      self2._cache.writeUInt32BE(out[1], offset + 4);
      self2._cache.writeUInt32BE(out[2], offset + 8);
      self2._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad2 = self2._cache.slice(0, chunk.length);
    self2._cache = self2._cache.slice(chunk.length);
    return xor2(chunk, pad2);
  };
  return ctr;
}
const aes128 = {
  cipher: "AES",
  key: 128,
  iv: 16,
  mode: "CBC",
  type: "block"
};
const aes192 = {
  cipher: "AES",
  key: 192,
  iv: 16,
  mode: "CBC",
  type: "block"
};
const aes256 = {
  cipher: "AES",
  key: 256,
  iv: 16,
  mode: "CBC",
  type: "block"
};
const require$$2 = {
  "aes-128-ecb": {
    cipher: "AES",
    key: 128,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-192-ecb": {
    cipher: "AES",
    key: 192,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-256-ecb": {
    cipher: "AES",
    key: 256,
    iv: 0,
    mode: "ECB",
    type: "block"
  },
  "aes-128-cbc": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-192-cbc": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  "aes-256-cbc": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CBC",
    type: "block"
  },
  aes128,
  aes192,
  aes256,
  "aes-128-cfb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-192-cfb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-256-cfb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB",
    type: "stream"
  },
  "aes-128-cfb8": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-192-cfb8": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-256-cfb8": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB8",
    type: "stream"
  },
  "aes-128-cfb1": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-192-cfb1": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-256-cfb1": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CFB1",
    type: "stream"
  },
  "aes-128-ofb": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-192-ofb": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-256-ofb": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "OFB",
    type: "stream"
  },
  "aes-128-ctr": {
    cipher: "AES",
    key: 128,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-192-ctr": {
    cipher: "AES",
    key: 192,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-256-ctr": {
    cipher: "AES",
    key: 256,
    iv: 16,
    mode: "CTR",
    type: "stream"
  },
  "aes-128-gcm": {
    cipher: "AES",
    key: 128,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-192-gcm": {
    cipher: "AES",
    key: 192,
    iv: 12,
    mode: "GCM",
    type: "auth"
  },
  "aes-256-gcm": {
    cipher: "AES",
    key: 256,
    iv: 12,
    mode: "GCM",
    type: "auth"
  }
};
var modes_1;
var hasRequiredModes$1;
function requireModes$1() {
  if (hasRequiredModes$1) return modes_1;
  hasRequiredModes$1 = 1;
  var modeModules = {
    ECB: requireEcb(),
    CBC: requireCbc(),
    CFB: requireCfb(),
    CFB8: requireCfb8(),
    CFB1: requireCfb1(),
    OFB: requireOfb(),
    CTR: requireCtr(),
    GCM: requireCtr()
  };
  var modes2 = require$$2;
  for (var key2 in modes2) {
    modes2[key2].module = modeModules[modes2[key2].mode];
  }
  modes_1 = modes2;
  return modes_1;
}
var aes = {};
var hasRequiredAes;
function requireAes() {
  if (hasRequiredAes) return aes;
  hasRequiredAes = 1;
  var Buffer2 = safeBufferExports.Buffer;
  function asUInt32Array(buf) {
    if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
    var len2 = buf.length / 4 | 0;
    var out = new Array(len2);
    for (var i2 = 0; i2 < len2; i2++) {
      out[i2] = buf.readUInt32BE(i2 * 4);
    }
    return out;
  }
  function scrubVec(v2) {
    for (var i2 = 0; i2 < v2.length; v2++) {
      v2[i2] = 0;
    }
  }
  function cryptBlock(M2, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M2[0] ^ keySchedule[0];
    var s1 = M2[1] ^ keySchedule[1];
    var s2 = M2[2] ^ keySchedule[2];
    var s3 = M2[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
      t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
      t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s2 = t2;
      s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [t0, t1, t2, t3];
  }
  var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
  var G2 = function() {
    var d2 = new Array(256);
    for (var j2 = 0; j2 < 256; j2++) {
      if (j2 < 128) {
        d2[j2] = j2 << 1;
      } else {
        d2[j2] = j2 << 1 ^ 283;
      }
    }
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];
    var x2 = 0;
    var xi = 0;
    for (var i2 = 0; i2 < 256; ++i2) {
      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
      sx = sx >>> 8 ^ sx & 255 ^ 99;
      SBOX[x2] = sx;
      INV_SBOX[sx] = x2;
      var x22 = d2[x2];
      var x4 = d2[x22];
      var x8 = d2[x4];
      var t2 = d2[sx] * 257 ^ sx * 16843008;
      SUB_MIX[0][x2] = t2 << 24 | t2 >>> 8;
      SUB_MIX[1][x2] = t2 << 16 | t2 >>> 16;
      SUB_MIX[2][x2] = t2 << 8 | t2 >>> 24;
      SUB_MIX[3][x2] = t2;
      t2 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x2 * 16843008;
      INV_SUB_MIX[0][sx] = t2 << 24 | t2 >>> 8;
      INV_SUB_MIX[1][sx] = t2 << 16 | t2 >>> 16;
      INV_SUB_MIX[2][sx] = t2 << 8 | t2 >>> 24;
      INV_SUB_MIX[3][sx] = t2;
      if (x2 === 0) {
        x2 = xi = 1;
      } else {
        x2 = x22 ^ d2[d2[d2[x8 ^ x22]]];
        xi ^= d2[d2[xi]];
      }
    }
    return {
      SBOX,
      INV_SBOX,
      SUB_MIX,
      INV_SUB_MIX
    };
  }();
  function AES(key2) {
    this._key = asUInt32Array(key2);
    this._reset();
  }
  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for (var k2 = 0; k2 < keySize; k2++) {
      keySchedule[k2] = keyWords[k2];
    }
    for (k2 = keySize; k2 < ksRows; k2++) {
      var t2 = keySchedule[k2 - 1];
      if (k2 % keySize === 0) {
        t2 = t2 << 8 | t2 >>> 24;
        t2 = G2.SBOX[t2 >>> 24] << 24 | G2.SBOX[t2 >>> 16 & 255] << 16 | G2.SBOX[t2 >>> 8 & 255] << 8 | G2.SBOX[t2 & 255];
        t2 ^= RCON[k2 / keySize | 0] << 24;
      } else if (keySize > 6 && k2 % keySize === 4) {
        t2 = G2.SBOX[t2 >>> 24] << 24 | G2.SBOX[t2 >>> 16 & 255] << 16 | G2.SBOX[t2 >>> 8 & 255] << 8 | G2.SBOX[t2 & 255];
      }
      keySchedule[k2] = keySchedule[k2 - keySize] ^ t2;
    }
    var invKeySchedule = [];
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik;
      var tt2 = keySchedule[ksR - (ik % 4 ? 0 : 4)];
      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt2;
      } else {
        invKeySchedule[ik] = G2.INV_SUB_MIX[0][G2.SBOX[tt2 >>> 24]] ^ G2.INV_SUB_MIX[1][G2.SBOX[tt2 >>> 16 & 255]] ^ G2.INV_SUB_MIX[2][G2.SBOX[tt2 >>> 8 & 255]] ^ G2.INV_SUB_MIX[3][G2.SBOX[tt2 & 255]];
      }
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
  };
  AES.prototype.encryptBlockRaw = function(M2) {
    M2 = asUInt32Array(M2);
    return cryptBlock(M2, this._keySchedule, G2.SUB_MIX, G2.SBOX, this._nRounds);
  };
  AES.prototype.encryptBlock = function(M2) {
    var out = this.encryptBlockRaw(M2);
    var buf = Buffer2.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
  };
  AES.prototype.decryptBlock = function(M2) {
    M2 = asUInt32Array(M2);
    var m1 = M2[1];
    M2[1] = M2[3];
    M2[3] = m1;
    var out = cryptBlock(M2, this._invKeySchedule, G2.INV_SUB_MIX, G2.INV_SBOX, this._nRounds);
    var buf = Buffer2.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
  };
  AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
  };
  aes.AES = AES;
  return aes;
}
var ghash;
var hasRequiredGhash;
function requireGhash() {
  if (hasRequiredGhash) return ghash;
  hasRequiredGhash = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var ZEROES = Buffer2.alloc(16, 0);
  function toArray(buf) {
    return [
      buf.readUInt32BE(0),
      buf.readUInt32BE(4),
      buf.readUInt32BE(8),
      buf.readUInt32BE(12)
    ];
  }
  function fromArray(out) {
    var buf = Buffer2.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
  }
  function GHASH(key2) {
    this.h = key2;
    this.state = Buffer2.alloc(16, 0);
    this.cache = Buffer2.allocUnsafe(0);
  }
  GHASH.prototype.ghash = function(block2) {
    var i2 = -1;
    while (++i2 < block2.length) {
      this.state[i2] ^= block2[i2];
    }
    this._multiply();
  };
  GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [0, 0, 0, 0];
    var j2, xi, lsbVi;
    var i2 = -1;
    while (++i2 < 128) {
      xi = (this.state[~~(i2 / 8)] & 1 << 7 - i2 % 8) !== 0;
      if (xi) {
        Zi[0] ^= Vi[0];
        Zi[1] ^= Vi[1];
        Zi[2] ^= Vi[2];
        Zi[3] ^= Vi[3];
      }
      lsbVi = (Vi[3] & 1) !== 0;
      for (j2 = 3; j2 > 0; j2--) {
        Vi[j2] = Vi[j2] >>> 1 | (Vi[j2 - 1] & 1) << 31;
      }
      Vi[0] = Vi[0] >>> 1;
      if (lsbVi) {
        Vi[0] = Vi[0] ^ 225 << 24;
      }
    }
    this.state = fromArray(Zi);
  };
  GHASH.prototype.update = function(buf) {
    this.cache = Buffer2.concat([this.cache, buf]);
    var chunk;
    while (this.cache.length >= 16) {
      chunk = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      this.ghash(chunk);
    }
  };
  GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) {
      this.ghash(Buffer2.concat([this.cache, ZEROES], 16));
    }
    this.ghash(fromArray([0, abl, 0, bl]));
    return this.state;
  };
  ghash = GHASH;
  return ghash;
}
var authCipher;
var hasRequiredAuthCipher;
function requireAuthCipher() {
  if (hasRequiredAuthCipher) return authCipher;
  hasRequiredAuthCipher = 1;
  var aes2 = requireAes();
  var Buffer2 = safeBufferExports.Buffer;
  var Transform = requireCipherBase();
  var inherits = requireInherits_browser();
  var GHASH = requireGhash();
  var xor2 = requireBufferXor();
  var incr32 = requireIncr32();
  function xorTest(a2, b2) {
    var out = 0;
    if (a2.length !== b2.length) out++;
    var len2 = Math.min(a2.length, b2.length);
    for (var i2 = 0; i2 < len2; ++i2) {
      out += a2[i2] ^ b2[i2];
    }
    return out;
  }
  function calcIv(self2, iv, ck) {
    if (iv.length === 12) {
      self2._finID = Buffer2.concat([iv, Buffer2.from([0, 0, 0, 1])]);
      return Buffer2.concat([iv, Buffer2.from([0, 0, 0, 2])]);
    }
    var ghash2 = new GHASH(ck);
    var len2 = iv.length;
    var toPad = len2 % 16;
    ghash2.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash2.update(Buffer2.alloc(toPad, 0));
    }
    ghash2.update(Buffer2.alloc(8, 0));
    var ivBits = len2 * 8;
    var tail = Buffer2.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash2.update(tail);
    self2._finID = ghash2.state;
    var out = Buffer2.from(self2._finID);
    incr32(out);
    return out;
  }
  function StreamCipher(mode, key2, iv, decrypt) {
    Transform.call(this);
    var h2 = Buffer2.alloc(4, 0);
    this._cipher = new aes2.AES(key2);
    var ck = this._cipher.encryptBlock(h2);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer2.from(iv);
    this._cache = Buffer2.allocUnsafe(0);
    this._secCache = Buffer2.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
  }
  inherits(StreamCipher, Transform);
  StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
      var rump = 16 - this._alen % 16;
      if (rump < 16) {
        rump = Buffer2.alloc(rump, 0);
        this._ghash.update(rump);
      }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) {
      this._ghash.update(chunk);
    } else {
      this._ghash.update(out);
    }
    this._len += chunk.length;
    return out;
  };
  StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
    var tag = xor2(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = tag;
    this._cipher.scrub();
  };
  StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer2.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
  };
  StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = tag;
  };
  StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(buf);
    this._alen += buf.length;
  };
  authCipher = StreamCipher;
  return authCipher;
}
var streamCipher;
var hasRequiredStreamCipher;
function requireStreamCipher() {
  if (hasRequiredStreamCipher) return streamCipher;
  hasRequiredStreamCipher = 1;
  var aes2 = requireAes();
  var Buffer2 = safeBufferExports.Buffer;
  var Transform = requireCipherBase();
  var inherits = requireInherits_browser();
  function StreamCipher(mode, key2, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes2.AES(key2);
    this._prev = Buffer2.from(iv);
    this._cache = Buffer2.allocUnsafe(0);
    this._secCache = Buffer2.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
  }
  inherits(StreamCipher, Transform);
  StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
  };
  StreamCipher.prototype._final = function() {
    this._cipher.scrub();
  };
  streamCipher = StreamCipher;
  return streamCipher;
}
var evp_bytestokey;
var hasRequiredEvp_bytestokey;
function requireEvp_bytestokey() {
  if (hasRequiredEvp_bytestokey) return evp_bytestokey;
  hasRequiredEvp_bytestokey = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var MD5 = requireMd5_js();
  function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer2.isBuffer(password)) password = Buffer2.from(password, "binary");
    if (salt) {
      if (!Buffer2.isBuffer(salt)) salt = Buffer2.from(salt, "binary");
      if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key2 = Buffer2.alloc(keyLen);
    var iv = Buffer2.alloc(ivLen || 0);
    var tmp = Buffer2.alloc(0);
    while (keyLen > 0 || ivLen > 0) {
      var hash2 = new MD5();
      hash2.update(tmp);
      hash2.update(password);
      if (salt) hash2.update(salt);
      tmp = hash2.digest();
      var used = 0;
      if (keyLen > 0) {
        var keyStart = key2.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key2, keyStart, 0, used);
        keyLen -= used;
      }
      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }
    tmp.fill(0);
    return { key: key2, iv };
  }
  evp_bytestokey = EVP_BytesToKey;
  return evp_bytestokey;
}
var hasRequiredEncrypter;
function requireEncrypter() {
  if (hasRequiredEncrypter) return encrypter;
  hasRequiredEncrypter = 1;
  var MODES = requireModes$1();
  var AuthCipher = requireAuthCipher();
  var Buffer2 = safeBufferExports.Buffer;
  var StreamCipher = requireStreamCipher();
  var Transform = requireCipherBase();
  var aes2 = requireAes();
  var ebtk = requireEvp_bytestokey();
  var inherits = requireInherits_browser();
  function Cipher(mode, key2, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes2.AES(key2);
    this._prev = Buffer2.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }
  inherits(Cipher, Transform);
  Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while (chunk = this._cache.get()) {
      thing = this._mode.encrypt(this, chunk);
      out.push(thing);
    }
    return Buffer2.concat(out);
  };
  var PADDING = Buffer2.alloc(16, 16);
  Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      chunk = this._mode.encrypt(this, chunk);
      this._cipher.scrub();
      return chunk;
    }
    if (!chunk.equals(PADDING)) {
      this._cipher.scrub();
      throw new Error("data not multiple of block length");
    }
  };
  Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
  };
  function Splitter() {
    this.cache = Buffer2.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data) {
    this.cache = Buffer2.concat([this.cache, data]);
  };
  Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
      var out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    var len2 = 16 - this.cache.length;
    var padBuff = Buffer2.allocUnsafe(len2);
    var i2 = -1;
    while (++i2 < len2) {
      padBuff.writeUInt8(len2, i2);
    }
    return Buffer2.concat([this.cache, padBuff]);
  };
  function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof password === "string") password = Buffer2.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string") iv = Buffer2.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (config.type === "stream") {
      return new StreamCipher(config.module, password, iv);
    } else if (config.type === "auth") {
      return new AuthCipher(config.module, password, iv);
    }
    return new Cipher(config.module, password, iv);
  }
  function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
  }
  encrypter.createCipheriv = createCipheriv;
  encrypter.createCipher = createCipher;
  return encrypter;
}
var decrypter = {};
var hasRequiredDecrypter;
function requireDecrypter() {
  if (hasRequiredDecrypter) return decrypter;
  hasRequiredDecrypter = 1;
  var AuthCipher = requireAuthCipher();
  var Buffer2 = safeBufferExports.Buffer;
  var MODES = requireModes$1();
  var StreamCipher = requireStreamCipher();
  var Transform = requireCipherBase();
  var aes2 = requireAes();
  var ebtk = requireEvp_bytestokey();
  var inherits = requireInherits_browser();
  function Decipher(mode, key2, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes2.AES(key2);
    this._prev = Buffer2.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }
  inherits(Decipher, Transform);
  Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while (chunk = this._cache.get(this._autopadding)) {
      thing = this._mode.decrypt(this, chunk);
      out.push(thing);
    }
    return Buffer2.concat(out);
  };
  Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      return unpad(this._mode.decrypt(this, chunk));
    } else if (chunk) {
      throw new Error("data not multiple of block length");
    }
  };
  Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
  };
  function Splitter() {
    this.cache = Buffer2.allocUnsafe(0);
  }
  Splitter.prototype.add = function(data) {
    this.cache = Buffer2.concat([this.cache, data]);
  };
  Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
      if (this.cache.length > 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
    } else {
      if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
      }
    }
    return null;
  };
  Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
  };
  function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) {
      throw new Error("unable to decrypt data");
    }
    var i2 = -1;
    while (++i2 < padded) {
      if (last[i2 + (16 - padded)] !== padded) {
        throw new Error("unable to decrypt data");
      }
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
  }
  function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof iv === "string") iv = Buffer2.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string") password = Buffer2.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (config.type === "stream") {
      return new StreamCipher(config.module, password, iv, true);
    } else if (config.type === "auth") {
      return new AuthCipher(config.module, password, iv, true);
    }
    return new Decipher(config.module, password, iv);
  }
  function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
  }
  decrypter.createDecipher = createDecipher;
  decrypter.createDecipheriv = createDecipheriv;
  return decrypter;
}
var hasRequiredBrowser$6;
function requireBrowser$6() {
  if (hasRequiredBrowser$6) return browser$5;
  hasRequiredBrowser$6 = 1;
  var ciphers = requireEncrypter();
  var deciphers = requireDecrypter();
  var modes2 = require$$2;
  function getCiphers() {
    return Object.keys(modes2);
  }
  browser$5.createCipher = browser$5.Cipher = ciphers.createCipher;
  browser$5.createCipheriv = browser$5.Cipheriv = ciphers.createCipheriv;
  browser$5.createDecipher = browser$5.Decipher = deciphers.createDecipher;
  browser$5.createDecipheriv = browser$5.Decipheriv = deciphers.createDecipheriv;
  browser$5.listCiphers = browser$5.getCiphers = getCiphers;
  return browser$5;
}
var modes = {};
var hasRequiredModes;
function requireModes() {
  if (hasRequiredModes) return modes;
  hasRequiredModes = 1;
  (function(exports2) {
    exports2["des-ecb"] = {
      key: 8,
      iv: 0
    };
    exports2["des-cbc"] = exports2.des = {
      key: 8,
      iv: 8
    };
    exports2["des-ede3-cbc"] = exports2.des3 = {
      key: 24,
      iv: 8
    };
    exports2["des-ede3"] = {
      key: 24,
      iv: 0
    };
    exports2["des-ede-cbc"] = {
      key: 16,
      iv: 8
    };
    exports2["des-ede"] = {
      key: 16,
      iv: 0
    };
  })(modes);
  return modes;
}
var hasRequiredBrowser$5;
function requireBrowser$5() {
  if (hasRequiredBrowser$5) return browser$6;
  hasRequiredBrowser$5 = 1;
  var DES = requireBrowserifyDes();
  var aes2 = requireBrowser$6();
  var aesModes = requireModes$1();
  var desModes = requireModes();
  var ebtk = requireEvp_bytestokey();
  function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
  }
  function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
      keyLen = aesModes[suite].key;
      ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
      keyLen = desModes[suite].key * 8;
      ivLen = desModes[suite].iv;
    } else {
      throw new TypeError("invalid suite type");
    }
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
  }
  function createCipheriv(suite, key2, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes2.createCipheriv(suite, key2, iv);
    if (desModes[suite]) return new DES({ key: key2, iv, mode: suite });
    throw new TypeError("invalid suite type");
  }
  function createDecipheriv(suite, key2, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes2.createDecipheriv(suite, key2, iv);
    if (desModes[suite]) return new DES({ key: key2, iv, mode: suite, decrypt: true });
    throw new TypeError("invalid suite type");
  }
  function getCiphers() {
    return Object.keys(desModes).concat(aes2.getCiphers());
  }
  browser$6.createCipher = browser$6.Cipher = createCipher;
  browser$6.createCipheriv = browser$6.Cipheriv = createCipheriv;
  browser$6.createDecipher = browser$6.Decipher = createDecipher;
  browser$6.createDecipheriv = browser$6.Decipheriv = createDecipheriv;
  browser$6.listCiphers = browser$6.getCiphers = getCiphers;
  return browser$6;
}
var browser$4 = {};
var bn$1 = { exports: {} };
bn$1.exports;
var hasRequiredBn$1;
function requireBn$1() {
  if (hasRequiredBn$1) return bn$1.exports;
  hasRequiredBn$1 = 1;
  (function(module) {
    (function(module2, exports2) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number2, base2, endian) {
        if (BN.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require$$1$2.Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN.prototype._init = function init(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN.prototype._initArray = function _initArray(number2, base2, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j2, w2;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j2 = 0; i2 >= 0; i2 -= 3) {
            w2 = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j2 = 0; i2 < number2.length; i2 += 3) {
            w2 = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string2, index) {
        var c2 = string2.charCodeAt(index);
        if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          return c2 - 48 & 15;
        }
      }
      function parseHexByte(string2, lowerBound, index) {
        var r2 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r2;
      }
      BN.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w2;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c2 >= 49) {
            r2 += c2 - 49 + 10;
          } else if (c2 >= 17) {
            r2 += c2 - 17 + 10;
          } else {
            r2 += c2;
          }
        }
        return r2;
      }
      BN.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone2() {
        var r2 = new BN(null);
        this.copy(r2);
        return r2;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w2 = this.words[i2];
            var word = ((w2 << off | carry) & 16777215).toString(16);
            carry = w2 >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer2(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b2, i2;
        var q2 = this.clone();
        if (!littleEndian) {
          for (i2 = 0; i2 < reqLength - byteLength2; i2++) {
            res[i2] = 0;
          }
          for (i2 = 0; !q2.isZero(); i2++) {
            b2 = q2.andln(255);
            q2.iushrn(8);
            res[reqLength - i2 - 1] = b2;
          }
        } else {
          for (i2 = 0; !q2.isZero(); i2++) {
            b2 = q2.andln(255);
            q2.iushrn(8);
            res[i2] = b2;
          }
          for (; i2 < reqLength; i2++) {
            res[i2] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w2) {
          return 32 - Math.clz32(w2);
        };
      } else {
        BN.prototype._countBits = function _countBits(w2) {
          var t2 = w2;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w2) {
        if (w2 === 0) return 26;
        var t2 = w2;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN.prototype.bitLength = function bitLength() {
        var w2 = this.words[this.length - 1];
        var hi = this._countBits(w2);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w2 = new Array(num.bitLength());
        for (var bit = 0; bit < w2.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w2[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w2;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26) break;
        }
        return r2;
      };
      BN.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b2.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a2, b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b2;
        if (cmp > 0) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a2 * b2;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k2 = 1; k2 < len2; k2++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2 | 0;
            a2 = self2.words[i2] | 0;
            b2 = num.words[j2] | 0;
            r2 = a2 * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k2] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k2] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b2 = num.words;
        var o3 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o3[0] = w0;
        o3[1] = w1;
        o3[2] = w2;
        o3[3] = w3;
        o3[4] = w4;
        o3[5] = w5;
        o3[6] = w6;
        o3[7] = w7;
        o3[8] = w8;
        o3[9] = w9;
        o3[10] = w10;
        o3[11] = w11;
        o3[12] = w12;
        o3[13] = w13;
        o3[14] = w14;
        o3[15] = w15;
        o3[16] = w16;
        o3[17] = w17;
        o3[18] = w18;
        if (c2 !== 0) {
          o3[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k2 = 0; k2 < out.length - 1; k2++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2;
            var a2 = self2.words[i2] | 0;
            var b2 = num.words[j2] | 0;
            var r2 = a2 * b2;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k2] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k2] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x2, y2) {
        this.x = x2;
        this.y = y2;
      }
      FFTM.prototype.makeRBT = function makeRBT(N2) {
        var t2 = new Array(N2);
        var l2 = BN.prototype._countBits(N2) - 1;
        for (var i2 = 0; i2 < N2; i2++) {
          t2[i2] = this.revBin(i2, l2, N2);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x2, l2, N2) {
        if (x2 === 0 || x2 === N2 - 1) return x2;
        var rb = 0;
        for (var i2 = 0; i2 < l2; i2++) {
          rb |= (x2 & 1) << l2 - i2 - 1;
          x2 >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N2) {
        for (var i2 = 0; i2 < N2; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N2, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N2);
        for (var s2 = 1; s2 < N2; s2 <<= 1) {
          var l2 = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l2);
          var itwdf = Math.sin(2 * Math.PI / l2);
          for (var p2 = 0; p2 < N2; p2 += l2) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j2 = 0; j2 < s2; j2++) {
              var re = rtws[p2 + j2];
              var ie = itws[p2 + j2];
              var ro = rtws[p2 + j2 + s2];
              var io = itws[p2 + j2 + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p2 + j2] = re + ro;
              itws[p2 + j2] = ie + io;
              rtws[p2 + j2 + s2] = re - ro;
              itws[p2 + j2 + s2] = ie - io;
              if (j2 !== l2) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m2) {
        var N2 = Math.max(m2, n2) | 1;
        var odd = N2 & 1;
        var i2 = 0;
        for (N2 = N2 / 2 | 0; N2; N2 = N2 >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N2) {
        if (N2 <= 1) return;
        for (var i2 = 0; i2 < N2 / 2; i2++) {
          var t2 = rws[i2];
          rws[i2] = rws[N2 - i2 - 1];
          rws[N2 - i2 - 1] = t2;
          t2 = iws[i2];
          iws[i2] = -iws[N2 - i2 - 1];
          iws[N2 - i2 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N2) {
        var carry = 0;
        for (var i2 = 0; i2 < N2 / 2; i2++) {
          var w2 = Math.round(ws[2 * i2 + 1] / N2) * 8192 + Math.round(ws[2 * i2] / N2) + carry;
          ws[i2] = w2 & 67108863;
          if (w2 < 67108864) {
            carry = 0;
          } else {
            carry = w2 / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len2, rws, N2) {
        var carry = 0;
        for (var i2 = 0; i2 < len2; i2++) {
          carry = carry + (ws[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len2; i2 < N2; ++i2) {
          rws[i2] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N2) {
        var ph = new Array(N2);
        for (var i2 = 0; i2 < N2; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x2, y2, out) {
        var N2 = 2 * this.guessLen13b(x2.length, y2.length);
        var rbt = this.makeRBT(N2);
        var _2 = this.stub(N2);
        var rws = new Array(N2);
        var rwst = new Array(N2);
        var iwst = new Array(N2);
        var nrws = new Array(N2);
        var nrwst = new Array(N2);
        var niwst = new Array(N2);
        var rmws = out.words;
        rmws.length = N2;
        this.convert13b(x2.words, x2.length, rws, N2);
        this.convert13b(y2.words, y2.length, nrws, N2);
        this.transform(rws, _2, rwst, iwst, N2, rbt);
        this.transform(nrws, _2, nrwst, niwst, N2, rbt);
        for (var i2 = 0; i2 < N2; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N2);
        this.transform(rwst, iwst, rmws, _2, N2, rbt);
        this.conjugate(rmws, _2, N2);
        this.normalize13b(rmws, N2);
        out.negative = x2.negative ^ y2.negative;
        out.length = x2.length + y2.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w2 = (this.words[i2] | 0) * num;
          var lo = (w2 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w2 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w2 = toBitArray(num);
        if (w2.length === 0) return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w2.length; i2++, res = res.sqr()) {
          if (w2[i2] !== 0) break;
        }
        if (++i2 < w2.length) {
          for (var q2 = res.sqr(); i2 < w2.length; i2++, q2 = q2.sqr()) {
            if (w2[i2] === 0) continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) return false;
        var w2 = this.words[s2];
        return !!(w2 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w2;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w2 -= right & 67108863;
          carry = (w2 >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w2 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2 + shift] = w2 & 67108863;
        }
        if (carry === 0) return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w2 = -(this.words[i2] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2] = w2 & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a2.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m2 = a2.length - b2.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i2 = 0; i2 < q2.length; i2++) {
            q2.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj = (a2.words[b2.length + j2] | 0) * 67108864 + (a2.words[b2.length + j2 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a2._ishlnsubmul(b2, qj, j2);
          while (a2.negative !== 0) {
            qj--;
            a2.negative = 0;
            a2._ishlnsubmul(b2, 1, j2);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj;
          }
        }
        if (q2) {
          q2.strip();
        }
        a2.strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w2 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w2 / num | 0;
          carry = w2 % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert2(p2.negative === 0);
        assert2(!p2.isZero());
        var x2 = this;
        var y2 = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN(1);
        var B = new BN(0);
        var C2 = new BN(0);
        var D2 = new BN(1);
        var g2 = 0;
        while (x2.isEven() && y2.isEven()) {
          x2.iushrn(1);
          y2.iushrn(1);
          ++g2;
        }
        var yp = y2.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i2 = 0, im = 1; (x2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x2.iushrn(i2);
            while (i2-- > 0) {
              if (A2.isOdd() || B.isOdd()) {
                A2.iadd(yp);
                B.isub(xp);
              }
              A2.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1) ;
          if (j2 > 0) {
            y2.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y2) >= 0) {
            x2.isub(y2);
            A2.isub(C2);
            B.isub(D2);
          } else {
            y2.isub(x2);
            C2.isub(A2);
            D2.isub(B);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y2.iushln(g2)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert2(p2.negative === 0);
        assert2(!p2.isZero());
        var a2 = this;
        var b2 = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b2.clone();
        while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1) ;
          if (j2 > 0) {
            b2.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b2) >= 0) {
            a2.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a2 = this.clone();
        var b2 = num.clone();
        a2.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
          a2.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a2.cmp(b2);
          if (r2 < 0) {
            var t2 = a2;
            a2 = b2;
            b2 = t2;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a2.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w2 = this.words[i2] | 0;
          w2 += carry;
          carry = w2 >>> 26;
          w2 &= 67108863;
          this.words[i2] = w2;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero2() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w2 = this.words[0] | 0;
          res = w2 === num ? 0 : w2 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a2 === b2) continue;
          if (a2 < b2) {
            res = -1;
          } else if (a2 > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w2 = num.words[i2] | 0;
          lo += w2 * 977;
          num.words[i2] = lo & 67108863;
          lo = w2 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert2(a2.negative === 0, "red works only with positives");
        assert2(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b2) {
        assert2((a2.negative | b2.negative) === 0, "red works only with positives");
        assert2(
          a2.red && a2.red === b2.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime) return this.prime.ireduce(a2)._forceRed(this);
        return a2.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add2(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.imul(b2));
      };
      Red.prototype.mul = function mul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.mul(b2));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero()) return a2.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert2(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r2 = this.pow(a2, q2.addn(1).iushrn(1));
        var t2 = this.pow(a2, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m2);
          var b2 = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j2 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a2, b2) {
        if (a2.isZero() || b2.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b2) {
        if (a2.isZero() || b2.isZero()) return new BN(0)._forceRed(this);
        var t2 = a2.mul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn$1);
  return bn$1.exports;
}
var brorand = { exports: {} };
var hasRequiredBrorand;
function requireBrorand() {
  if (hasRequiredBrorand) return brorand.exports;
  hasRequiredBrorand = 1;
  var r2;
  brorand.exports = function rand(len2) {
    if (!r2)
      r2 = new Rand(null);
    return r2.generate(len2);
  };
  function Rand(rand) {
    this.rand = rand;
  }
  brorand.exports.Rand = Rand;
  Rand.prototype.generate = function generate(len2) {
    return this._rand(len2);
  };
  Rand.prototype._rand = function _rand(n2) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n2);
    var res = new Uint8Array(n2);
    for (var i2 = 0; i2 < res.length; i2++)
      res[i2] = this.rand.getByte();
    return res;
  };
  if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n2) {
        var arr = new Uint8Array(n2);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n2) {
        var arr = new Uint8Array(n2);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === "object") {
      Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
      };
    }
  } else {
    try {
      var crypto2 = requireCryptoBrowserify();
      if (typeof crypto2.randomBytes !== "function")
        throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n2) {
        return crypto2.randomBytes(n2);
      };
    } catch (e2) {
    }
  }
  return brorand.exports;
}
var mr;
var hasRequiredMr;
function requireMr() {
  if (hasRequiredMr) return mr;
  hasRequiredMr = 1;
  var bn2 = requireBn$1();
  var brorand2 = requireBrorand();
  function MillerRabin(rand) {
    this.rand = rand || new brorand2.Rand();
  }
  mr = MillerRabin;
  MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
  };
  MillerRabin.prototype._randbelow = function _randbelow(n2) {
    var len2 = n2.bitLength();
    var min_bytes = Math.ceil(len2 / 8);
    do
      var a2 = new bn2(this.rand.generate(min_bytes));
    while (a2.cmp(n2) >= 0);
    return a2;
  };
  MillerRabin.prototype._randrange = function _randrange(start, stop) {
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
  };
  MillerRabin.prototype.test = function test(n2, k2, cb) {
    var len2 = n2.bitLength();
    var red = bn2.mont(n2);
    var rone = new bn2(1).toRed(red);
    if (!k2)
      k2 = Math.max(1, len2 / 48 | 0);
    var n1 = n2.subn(1);
    for (var s2 = 0; !n1.testn(s2); s2++) {
    }
    var d2 = n2.shrn(s2);
    var rn1 = n1.toRed(red);
    var prime = true;
    for (; k2 > 0; k2--) {
      var a2 = this._randrange(new bn2(2), n1);
      if (cb)
        cb(a2);
      var x2 = a2.toRed(red).redPow(d2);
      if (x2.cmp(rone) === 0 || x2.cmp(rn1) === 0)
        continue;
      for (var i2 = 1; i2 < s2; i2++) {
        x2 = x2.redSqr();
        if (x2.cmp(rone) === 0)
          return false;
        if (x2.cmp(rn1) === 0)
          break;
      }
      if (i2 === s2)
        return false;
    }
    return prime;
  };
  MillerRabin.prototype.getDivisor = function getDivisor(n2, k2) {
    var len2 = n2.bitLength();
    var red = bn2.mont(n2);
    var rone = new bn2(1).toRed(red);
    if (!k2)
      k2 = Math.max(1, len2 / 48 | 0);
    var n1 = n2.subn(1);
    for (var s2 = 0; !n1.testn(s2); s2++) {
    }
    var d2 = n2.shrn(s2);
    var rn1 = n1.toRed(red);
    for (; k2 > 0; k2--) {
      var a2 = this._randrange(new bn2(2), n1);
      var g2 = n2.gcd(a2);
      if (g2.cmpn(1) !== 0)
        return g2;
      var x2 = a2.toRed(red).redPow(d2);
      if (x2.cmp(rone) === 0 || x2.cmp(rn1) === 0)
        continue;
      for (var i2 = 1; i2 < s2; i2++) {
        x2 = x2.redSqr();
        if (x2.cmp(rone) === 0)
          return x2.fromRed().subn(1).gcd(n2);
        if (x2.cmp(rn1) === 0)
          break;
      }
      if (i2 === s2) {
        x2 = x2.redSqr();
        return x2.fromRed().subn(1).gcd(n2);
      }
    }
    return false;
  };
  return mr;
}
var generatePrime;
var hasRequiredGeneratePrime;
function requireGeneratePrime() {
  if (hasRequiredGeneratePrime) return generatePrime;
  hasRequiredGeneratePrime = 1;
  var randomBytes2 = browserExports;
  generatePrime = findPrime;
  findPrime.simpleSieve = simpleSieve;
  findPrime.fermatTest = fermatTest;
  var BN = requireBn$1();
  var TWENTYFOUR = new BN(24);
  var MillerRabin = requireMr();
  var millerRabin = new MillerRabin();
  var ONE2 = new BN(1);
  var TWO = new BN(2);
  var FIVE = new BN(5);
  new BN(16);
  new BN(8);
  var TEN = new BN(10);
  var THREE = new BN(3);
  new BN(7);
  var ELEVEN = new BN(11);
  var FOUR = new BN(4);
  new BN(12);
  var primes = null;
  function _getPrimes() {
    if (primes !== null)
      return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for (var i2 = 1, k2 = 3; k2 < limit; k2 += 2) {
      var sqrt = Math.ceil(Math.sqrt(k2));
      for (var j2 = 0; j2 < i2 && res[j2] <= sqrt; j2++)
        if (k2 % res[j2] === 0)
          break;
      if (i2 !== j2 && res[j2] <= sqrt)
        continue;
      res[i2++] = k2;
    }
    primes = res;
    return res;
  }
  function simpleSieve(p2) {
    var primes2 = _getPrimes();
    for (var i2 = 0; i2 < primes2.length; i2++)
      if (p2.modn(primes2[i2]) === 0) {
        if (p2.cmpn(primes2[i2]) === 0) {
          return true;
        } else {
          return false;
        }
      }
    return true;
  }
  function fermatTest(p2) {
    var red = BN.mont(p2);
    return TWO.toRed(red).redPow(p2.subn(1)).fromRed().cmpn(1) === 0;
  }
  function findPrime(bits, gen) {
    if (bits < 16) {
      if (gen === 2 || gen === 5) {
        return new BN([140, 123]);
      } else {
        return new BN([140, 39]);
      }
    }
    gen = new BN(gen);
    var num, n2;
    while (true) {
      num = new BN(randomBytes2(Math.ceil(bits / 8)));
      while (num.bitLength() > bits) {
        num.ishrn(1);
      }
      if (num.isEven()) {
        num.iadd(ONE2);
      }
      if (!num.testn(1)) {
        num.iadd(TWO);
      }
      if (!gen.cmp(TWO)) {
        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
          num.iadd(FOUR);
        }
      } else if (!gen.cmp(FIVE)) {
        while (num.mod(TEN).cmp(THREE)) {
          num.iadd(FOUR);
        }
      }
      n2 = num.shrn(1);
      if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
        return num;
      }
    }
  }
  return generatePrime;
}
const modp1 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
};
const modp2 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
};
const modp5 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
};
const modp14 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
};
const modp15 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
};
const modp16 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
};
const modp17 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
};
const modp18 = {
  gen: "02",
  prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
};
const require$$1$1 = {
  modp1,
  modp2,
  modp5,
  modp14,
  modp15,
  modp16,
  modp17,
  modp18
};
var dh;
var hasRequiredDh;
function requireDh() {
  if (hasRequiredDh) return dh;
  hasRequiredDh = 1;
  var BN = requireBn$1();
  var MillerRabin = requireMr();
  var millerRabin = new MillerRabin();
  var TWENTYFOUR = new BN(24);
  var ELEVEN = new BN(11);
  var TEN = new BN(10);
  var THREE = new BN(3);
  var SEVEN = new BN(7);
  var primes = requireGeneratePrime();
  var randomBytes2 = browserExports;
  dh = DH;
  function setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer$3.isBuffer(pub)) {
      pub = new Buffer$3(pub, enc);
    }
    this._pub = new BN(pub);
    return this;
  }
  function setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer$3.isBuffer(priv)) {
      priv = new Buffer$3(priv, enc);
    }
    this._priv = new BN(priv);
    return this;
  }
  var primeCache = {};
  function checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [gen, prime.toString(16)].join("_");
    if (hex in primeCache) {
      return primeCache[hex];
    }
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
      error += 1;
      if (gen === "02" || gen === "05") {
        error += 8;
      } else {
        error += 4;
      }
      primeCache[hex] = error;
      return error;
    }
    if (!millerRabin.test(prime.shrn(1))) {
      error += 2;
    }
    var rem;
    switch (gen) {
      case "02":
        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
          error += 8;
        }
        break;
      case "05":
        rem = prime.mod(TEN);
        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
          error += 8;
        }
        break;
      default:
        error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = void 0;
    this._priv = void 0;
    this._primeCode = void 0;
    if (malleable) {
      this.setPublicKey = setPublicKey;
      this.setPrivateKey = setPrivateKey;
    } else {
      this._primeCode = 8;
    }
  }
  Object.defineProperty(DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
      if (typeof this._primeCode !== "number") {
        this._primeCode = checkPrime(this.__prime, this.__gen);
      }
      return this._primeCode;
    }
  });
  DH.prototype.generateKeys = function() {
    if (!this._priv) {
      this._priv = new BN(randomBytes2(this._primeLen));
    }
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
  };
  DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer$3(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
      var front = new Buffer$3(prime.length - out.length);
      front.fill(0);
      out = Buffer$3.concat([front, out]);
    }
    return out;
  };
  DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
  };
  DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
  };
  DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
  };
  DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
  };
  DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!Buffer$3.isBuffer(gen)) {
      gen = new Buffer$3(gen, enc);
    }
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
  };
  function formatReturnValue(bn2, enc) {
    var buf = new Buffer$3(bn2.toArray());
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return dh;
}
var hasRequiredBrowser$4;
function requireBrowser$4() {
  if (hasRequiredBrowser$4) return browser$4;
  hasRequiredBrowser$4 = 1;
  var generatePrime2 = requireGeneratePrime();
  var primes = require$$1$1;
  var DH = requireDh();
  function getDiffieHellman(mod) {
    var prime = new Buffer$3(primes[mod].prime, "hex");
    var gen = new Buffer$3(primes[mod].gen, "hex");
    return new DH(prime, gen);
  }
  var ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
  };
  function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer$3.isBuffer(enc) || ENCODINGS[enc] === void 0) {
      return createDiffieHellman(prime, "binary", enc, generator);
    }
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new Buffer$3([2]);
    if (!Buffer$3.isBuffer(generator)) {
      generator = new Buffer$3(generator, genc);
    }
    if (typeof prime === "number") {
      return new DH(generatePrime2(prime, generator), generator, true);
    }
    if (!Buffer$3.isBuffer(prime)) {
      prime = new Buffer$3(prime, enc);
    }
    return new DH(prime, generator, true);
  }
  browser$4.DiffieHellmanGroup = browser$4.createDiffieHellmanGroup = browser$4.getDiffieHellman = getDiffieHellman;
  browser$4.createDiffieHellman = browser$4.DiffieHellman = createDiffieHellman;
  return browser$4;
}
var readableBrowser = { exports: {} };
var processNextickArgs = { exports: {} };
var hasRequiredProcessNextickArgs;
function requireProcessNextickArgs() {
  if (hasRequiredProcessNextickArgs) return processNextickArgs.exports;
  hasRequiredProcessNextickArgs = 1;
  if (typeof process$1 === "undefined" || !process$1.version || process$1.version.indexOf("v0.") === 0 || process$1.version.indexOf("v1.") === 0 && process$1.version.indexOf("v1.8.") !== 0) {
    processNextickArgs.exports = { nextTick };
  } else {
    processNextickArgs.exports = process$1;
  }
  function nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== "function") {
      throw new TypeError('"callback" argument must be a function');
    }
    var len2 = arguments.length;
    var args, i2;
    switch (len2) {
      case 0:
      case 1:
        return process$1.nextTick(fn);
      case 2:
        return process$1.nextTick(function afterTickOne() {
          fn.call(null, arg1);
        });
      case 3:
        return process$1.nextTick(function afterTickTwo() {
          fn.call(null, arg1, arg2);
        });
      case 4:
        return process$1.nextTick(function afterTickThree() {
          fn.call(null, arg1, arg2, arg3);
        });
      default:
        args = new Array(len2 - 1);
        i2 = 0;
        while (i2 < args.length) {
          args[i2++] = arguments[i2];
        }
        return process$1.nextTick(function afterTick() {
          fn.apply(null, args);
        });
    }
  }
  return processNextickArgs.exports;
}
var isarray;
var hasRequiredIsarray;
function requireIsarray() {
  if (hasRequiredIsarray) return isarray;
  hasRequiredIsarray = 1;
  var toString = {}.toString;
  isarray = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
  };
  return isarray;
}
var streamBrowser;
var hasRequiredStreamBrowser;
function requireStreamBrowser() {
  if (hasRequiredStreamBrowser) return streamBrowser;
  hasRequiredStreamBrowser = 1;
  streamBrowser = requireEvents().EventEmitter;
  return streamBrowser;
}
var safeBuffer = { exports: {} };
var hasRequiredSafeBuffer;
function requireSafeBuffer() {
  if (hasRequiredSafeBuffer) return safeBuffer.exports;
  hasRequiredSafeBuffer = 1;
  (function(module, exports2) {
    var buffer2 = require$$1$2;
    var Buffer2 = buffer2.Buffer;
    function copyProps(src2, dst) {
      for (var key2 in src2) {
        dst[key2] = src2[key2];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer2;
    } else {
      copyProps(buffer2, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer2.SlowBuffer(size);
    };
  })(safeBuffer, safeBuffer.exports);
  return safeBuffer.exports;
}
var util = {};
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil) return util;
  hasRequiredUtil = 1;
  function isArray(arg) {
    if (Array.isArray) {
      return Array.isArray(arg);
    }
    return objectToString2(arg) === "[object Array]";
  }
  util.isArray = isArray;
  function isBoolean(arg) {
    return typeof arg === "boolean";
  }
  util.isBoolean = isBoolean;
  function isNull(arg) {
    return arg === null;
  }
  util.isNull = isNull;
  function isNullOrUndefined(arg) {
    return arg == null;
  }
  util.isNullOrUndefined = isNullOrUndefined;
  function isNumber2(arg) {
    return typeof arg === "number";
  }
  util.isNumber = isNumber2;
  function isString2(arg) {
    return typeof arg === "string";
  }
  util.isString = isString2;
  function isSymbol(arg) {
    return typeof arg === "symbol";
  }
  util.isSymbol = isSymbol;
  function isUndefined(arg) {
    return arg === void 0;
  }
  util.isUndefined = isUndefined;
  function isRegExp(re) {
    return objectToString2(re) === "[object RegExp]";
  }
  util.isRegExp = isRegExp;
  function isObject2(arg) {
    return typeof arg === "object" && arg !== null;
  }
  util.isObject = isObject2;
  function isDate(d2) {
    return objectToString2(d2) === "[object Date]";
  }
  util.isDate = isDate;
  function isError(e2) {
    return objectToString2(e2) === "[object Error]" || e2 instanceof Error;
  }
  util.isError = isError;
  function isFunction2(arg) {
    return typeof arg === "function";
  }
  util.isFunction = isFunction2;
  function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
  }
  util.isPrimitive = isPrimitive;
  util.isBuffer = require$$1$2.Buffer.isBuffer;
  function objectToString2(o3) {
    return Object.prototype.toString.call(o3);
  }
  return util;
}
var BufferList = { exports: {} };
var hasRequiredBufferList;
function requireBufferList() {
  if (hasRequiredBufferList) return BufferList.exports;
  hasRequiredBufferList = 1;
  (function(module) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Buffer2 = requireSafeBuffer().Buffer;
    var util2 = requireUtil$1();
    function copyBuffer(src2, target, offset) {
      src2.copy(target, offset);
    }
    module.exports = function() {
      function BufferList2() {
        _classCallCheck(this, BufferList2);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      BufferList2.prototype.push = function push(v2) {
        var entry = { data: v2, next: null };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
      };
      BufferList2.prototype.unshift = function unshift(v2) {
        var entry = { data: v2, next: this.head };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };
      BufferList2.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
      };
      BufferList2.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };
      BufferList2.prototype.join = function join(s2) {
        if (this.length === 0) return "";
        var p2 = this.head;
        var ret = "" + p2.data;
        while (p2 = p2.next) {
          ret += s2 + p2.data;
        }
        return ret;
      };
      BufferList2.prototype.concat = function concat(n2) {
        if (this.length === 0) return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n2 >>> 0);
        var p2 = this.head;
        var i2 = 0;
        while (p2) {
          copyBuffer(p2.data, ret, i2);
          i2 += p2.data.length;
          p2 = p2.next;
        }
        return ret;
      };
      return BufferList2;
    }();
    if (util2 && util2.inspect && util2.inspect.custom) {
      module.exports.prototype[util2.inspect.custom] = function() {
        var obj = util2.inspect({ length: this.length });
        return this.constructor.name + " " + obj;
      };
    }
  })(BufferList);
  return BufferList.exports;
}
var destroy_1;
var hasRequiredDestroy;
function requireDestroy() {
  if (hasRequiredDestroy) return destroy_1;
  hasRequiredDestroy = 1;
  var pna = requireProcessNextickArgs();
  function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          pna.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          pna.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb && err2) {
        if (!_this._writableState) {
          pna.nextTick(emitErrorNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          pna.nextTick(emitErrorNT, _this, err2);
        }
      } else if (cb) {
        cb(err2);
      }
    });
    return this;
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  destroy_1 = {
    destroy,
    undestroy
  };
  return destroy_1;
}
var _stream_writable;
var hasRequired_stream_writable;
function require_stream_writable() {
  if (hasRequired_stream_writable) return _stream_writable;
  hasRequired_stream_writable = 1;
  var pna = requireProcessNextickArgs();
  _stream_writable = Writable;
  function CorkedRequest(state2) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state2);
    };
  }
  var asyncWrite = !process$1.browser && ["v0.10", "v0.9."].indexOf(process$1.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
  var Duplex;
  Writable.WritableState = WritableState;
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  var internalUtil = {
    deprecate: requireBrowser$a()
  };
  var Stream = requireStreamBrowser();
  var Buffer2 = requireSafeBuffer().Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = requireDestroy();
  util2.inherits(Writable, Stream);
  function nop() {
  }
  function WritableState(options, stream) {
    Duplex = Duplex || require_stream_duplex();
    options = options || {};
    var isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0) this.highWaterMark = hwm;
    else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;
    else this.highWaterMark = defaultHwm;
    this.highWaterMark = Math.floor(this.highWaterMark);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_2) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function(object3) {
        if (realHasInstance.call(this, object3)) return true;
        if (this !== Writable) return false;
        return object3 && object3._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function(object3) {
      return object3 instanceof this;
    };
  }
  function Writable(options) {
    Duplex = Duplex || require_stream_duplex();
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
      return new Writable(options);
    }
    this._writableState = new WritableState(options, this);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function") this._write = options.write;
      if (typeof options.writev === "function") this._writev = options.writev;
      if (typeof options.destroy === "function") this._destroy = options.destroy;
      if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    this.emit("error", new Error("Cannot pipe, not readable"));
  };
  function writeAfterEnd(stream, cb) {
    var er = new Error("write after end");
    stream.emit("error", er);
    pna.nextTick(cb, er);
  }
  function validChunk(stream, state2, chunk, cb) {
    var valid = true;
    var er = false;
    if (chunk === null) {
      er = new TypeError("May not write null values to stream");
    } else if (typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    if (er) {
      stream.emit("error", er);
      pna.nextTick(cb, er);
      valid = false;
    }
    return valid;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    var ret = false;
    var isBuf = !state2.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer2.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state2.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state2.ended) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state2, chunk, cb)) {
      state2.pendingcb++;
      ret = writeOrBuffer(this, state2, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    var state2 = this._writableState;
    state2.corked++;
  };
  Writable.prototype.uncork = function() {
    var state2 = this._writableState;
    if (state2.corked) {
      state2.corked--;
      if (!state2.writing && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) clearBuffer(this, state2);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  function decodeChunk(state2, chunk, encoding) {
    if (!state2.objectMode && state2.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer2.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream, state2, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state2, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len2 = state2.objectMode ? 1 : chunk.length;
    state2.length += len2;
    var ret = state2.length < state2.highWaterMark;
    if (!ret) state2.needDrain = true;
    if (state2.writing || state2.corked) {
      var last = state2.lastBufferedRequest;
      state2.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state2.lastBufferedRequest;
      } else {
        state2.bufferedRequest = state2.lastBufferedRequest;
      }
      state2.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state2, false, len2, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream, state2, writev, len2, chunk, encoding, cb) {
    state2.writelen = len2;
    state2.writecb = cb;
    state2.writing = true;
    state2.sync = true;
    if (writev) stream._writev(chunk, state2.onwrite);
    else stream._write(chunk, encoding, state2.onwrite);
    state2.sync = false;
  }
  function onwriteError(stream, state2, sync, er, cb) {
    --state2.pendingcb;
    if (sync) {
      pna.nextTick(cb, er);
      pna.nextTick(finishMaybe, stream, state2);
      stream._writableState.errorEmitted = true;
      stream.emit("error", er);
    } else {
      cb(er);
      stream._writableState.errorEmitted = true;
      stream.emit("error", er);
      finishMaybe(stream, state2);
    }
  }
  function onwriteStateUpdate(state2) {
    state2.writing = false;
    state2.writecb = null;
    state2.length -= state2.writelen;
    state2.writelen = 0;
  }
  function onwrite(stream, er) {
    var state2 = stream._writableState;
    var sync = state2.sync;
    var cb = state2.writecb;
    onwriteStateUpdate(state2);
    if (er) onwriteError(stream, state2, sync, er, cb);
    else {
      var finished = needFinish(state2);
      if (!finished && !state2.corked && !state2.bufferProcessing && state2.bufferedRequest) {
        clearBuffer(stream, state2);
      }
      if (sync) {
        asyncWrite(afterWrite, stream, state2, finished, cb);
      } else {
        afterWrite(stream, state2, finished, cb);
      }
    }
  }
  function afterWrite(stream, state2, finished, cb) {
    if (!finished) onwriteDrain(stream, state2);
    state2.pendingcb--;
    cb();
    finishMaybe(stream, state2);
  }
  function onwriteDrain(stream, state2) {
    if (state2.length === 0 && state2.needDrain) {
      state2.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state2) {
    state2.bufferProcessing = true;
    var entry = state2.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l2 = state2.bufferedRequestCount;
      var buffer2 = new Array(l2);
      var holder = state2.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer2[count] = entry;
        if (!entry.isBuf) allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer2.allBuffers = allBuffers;
      doWrite(stream, state2, true, state2.length, buffer2, "", holder.finish);
      state2.pendingcb++;
      state2.lastBufferedRequest = null;
      if (holder.next) {
        state2.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state2.corkedRequestsFree = new CorkedRequest(state2);
      }
      state2.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len2 = state2.objectMode ? 1 : chunk.length;
        doWrite(stream, state2, false, len2, chunk, encoding, cb);
        entry = entry.next;
        state2.bufferedRequestCount--;
        if (state2.writing) {
          break;
        }
      }
      if (entry === null) state2.lastBufferedRequest = null;
    }
    state2.bufferedRequest = entry;
    state2.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error("_write() is not implemented"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state2 = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
    if (state2.corked) {
      state2.corked = 1;
      this.uncork();
    }
    if (!state2.ending) endWritable(this, state2, cb);
  };
  function needFinish(state2) {
    return state2.ending && state2.length === 0 && state2.bufferedRequest === null && !state2.finished && !state2.writing;
  }
  function callFinal(stream, state2) {
    stream._final(function(err) {
      state2.pendingcb--;
      if (err) {
        stream.emit("error", err);
      }
      state2.prefinished = true;
      stream.emit("prefinish");
      finishMaybe(stream, state2);
    });
  }
  function prefinish(stream, state2) {
    if (!state2.prefinished && !state2.finalCalled) {
      if (typeof stream._final === "function") {
        state2.pendingcb++;
        state2.finalCalled = true;
        pna.nextTick(callFinal, stream, state2);
      } else {
        state2.prefinished = true;
        stream.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream, state2) {
    var need = needFinish(state2);
    if (need) {
      prefinish(stream, state2);
      if (state2.pendingcb === 0) {
        state2.finished = true;
        stream.emit("finish");
      }
    }
    return need;
  }
  function endWritable(stream, state2, cb) {
    state2.ending = true;
    finishMaybe(stream, state2);
    if (cb) {
      if (state2.finished) pna.nextTick(cb);
      else stream.once("finish", cb);
    }
    state2.ended = true;
    stream.writable = false;
  }
  function onCorkedFinish(corkReq, state2, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state2.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    state2.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    get: function() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function(value3) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value3;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err, cb) {
    this.end();
    cb(err);
  };
  return _stream_writable;
}
var _stream_duplex;
var hasRequired_stream_duplex;
function require_stream_duplex() {
  if (hasRequired_stream_duplex) return _stream_duplex;
  hasRequired_stream_duplex = 1;
  var pna = requireProcessNextickArgs();
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key2 in obj) {
      keys2.push(key2);
    }
    return keys2;
  };
  _stream_duplex = Duplex;
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  var Readable = require_stream_readable();
  var Writable = require_stream_writable();
  util2.inherits(Duplex, Readable);
  {
    var keys = objectKeys(Writable.prototype);
    for (var v2 = 0; v2 < keys.length; v2++) {
      var method = keys[v2];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false) this.readable = false;
    if (options && options.writable === false) this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
    this.once("end", onend);
  }
  Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function onend() {
    if (this.allowHalfOpen || this._writableState.ended) return;
    pna.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex.prototype, "destroyed", {
    get: function() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(value3) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value3;
      this._writableState.destroyed = value3;
    }
  });
  Duplex.prototype._destroy = function(err, cb) {
    this.push(null);
    this.end();
    pna.nextTick(cb, err);
  };
  return _stream_duplex;
}
var _stream_readable;
var hasRequired_stream_readable;
function require_stream_readable() {
  if (hasRequired_stream_readable) return _stream_readable;
  hasRequired_stream_readable = 1;
  var pna = requireProcessNextickArgs();
  _stream_readable = Readable;
  var isArray = requireIsarray();
  var Duplex;
  Readable.ReadableState = ReadableState;
  requireEvents().EventEmitter;
  var EElistenerCount = function(emitter, type2) {
    return emitter.listeners(type2).length;
  };
  var Stream = requireStreamBrowser();
  var Buffer2 = requireSafeBuffer().Buffer;
  var OurUint8Array = (typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  var debugUtil = requireUtil$1();
  var debug = void 0;
  if (debugUtil && debugUtil.debuglog) {
    debug = debugUtil.debuglog("stream");
  } else {
    debug = function() {
    };
  }
  var BufferList2 = requireBufferList();
  var destroyImpl = requireDestroy();
  var StringDecoder;
  util2.inherits(Readable, Stream);
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream) {
    Duplex = Duplex || require_stream_duplex();
    options = options || {};
    var isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0) this.highWaterMark = hwm;
    else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;
    else this.highWaterMark = defaultHwm;
    this.highWaterMark = Math.floor(this.highWaterMark);
    this.buffer = new BufferList2();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    Duplex = Duplex || require_stream_duplex();
    if (!(this instanceof Readable)) return new Readable(options);
    this._readableState = new ReadableState(options, this);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function") this._read = options.read;
      if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
  }
  Object.defineProperty(Readable.prototype, "destroyed", {
    get: function() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function(value3) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value3;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function(err, cb) {
    this.push(null);
    cb(err);
  };
  Readable.prototype.push = function(chunk, encoding) {
    var state2 = this._readableState;
    var skipChunkCheck;
    if (!state2.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state2.defaultEncoding;
        if (encoding !== state2.encoding) {
          chunk = Buffer2.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state2 = stream._readableState;
    if (chunk === null) {
      state2.reading = false;
      onEofChunk(stream, state2);
    } else {
      var er;
      if (!skipChunkCheck) er = chunkInvalid(state2, chunk);
      if (er) {
        stream.emit("error", er);
      } else if (state2.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state2.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state2.endEmitted) stream.emit("error", new Error("stream.unshift() after end event"));
          else addChunk(stream, state2, chunk, true);
        } else if (state2.ended) {
          stream.emit("error", new Error("stream.push() after EOF"));
        } else {
          state2.reading = false;
          if (state2.decoder && !encoding) {
            chunk = state2.decoder.write(chunk);
            if (state2.objectMode || chunk.length !== 0) addChunk(stream, state2, chunk, false);
            else maybeReadMore(stream, state2);
          } else {
            addChunk(stream, state2, chunk, false);
          }
        }
      } else if (!addToFront) {
        state2.reading = false;
      }
    }
    return needMoreData(state2);
  }
  function addChunk(stream, state2, chunk, addToFront) {
    if (state2.flowing && state2.length === 0 && !state2.sync) {
      stream.emit("data", chunk);
      stream.read(0);
    } else {
      state2.length += state2.objectMode ? 1 : chunk.length;
      if (addToFront) state2.buffer.unshift(chunk);
      else state2.buffer.push(chunk);
      if (state2.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state2);
  }
  function chunkInvalid(state2, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state2.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    return er;
  }
  function needMoreData(state2) {
    return !state2.ended && (state2.needReadable || state2.length < state2.highWaterMark || state2.length === 0);
  }
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = requireString_decoder().StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };
  var MAX_HWM = 8388608;
  function computeNewHighWaterMark(n2) {
    if (n2 >= MAX_HWM) {
      n2 = MAX_HWM;
    } else {
      n2--;
      n2 |= n2 >>> 1;
      n2 |= n2 >>> 2;
      n2 |= n2 >>> 4;
      n2 |= n2 >>> 8;
      n2 |= n2 >>> 16;
      n2++;
    }
    return n2;
  }
  function howMuchToRead(n2, state2) {
    if (n2 <= 0 || state2.length === 0 && state2.ended) return 0;
    if (state2.objectMode) return 1;
    if (n2 !== n2) {
      if (state2.flowing && state2.length) return state2.buffer.head.data.length;
      else return state2.length;
    }
    if (n2 > state2.highWaterMark) state2.highWaterMark = computeNewHighWaterMark(n2);
    if (n2 <= state2.length) return n2;
    if (!state2.ended) {
      state2.needReadable = true;
      return 0;
    }
    return state2.length;
  }
  Readable.prototype.read = function(n2) {
    debug("read", n2);
    n2 = parseInt(n2, 10);
    var state2 = this._readableState;
    var nOrig = n2;
    if (n2 !== 0) state2.emittedReadable = false;
    if (n2 === 0 && state2.needReadable && (state2.length >= state2.highWaterMark || state2.ended)) {
      debug("read: emitReadable", state2.length, state2.ended);
      if (state2.length === 0 && state2.ended) endReadable(this);
      else emitReadable(this);
      return null;
    }
    n2 = howMuchToRead(n2, state2);
    if (n2 === 0 && state2.ended) {
      if (state2.length === 0) endReadable(this);
      return null;
    }
    var doRead = state2.needReadable;
    debug("need readable", doRead);
    if (state2.length === 0 || state2.length - n2 < state2.highWaterMark) {
      doRead = true;
      debug("length less than watermark", doRead);
    }
    if (state2.ended || state2.reading) {
      doRead = false;
      debug("reading or ended", doRead);
    } else if (doRead) {
      debug("do read");
      state2.reading = true;
      state2.sync = true;
      if (state2.length === 0) state2.needReadable = true;
      this._read(state2.highWaterMark);
      state2.sync = false;
      if (!state2.reading) n2 = howMuchToRead(nOrig, state2);
    }
    var ret;
    if (n2 > 0) ret = fromList(n2, state2);
    else ret = null;
    if (ret === null) {
      state2.needReadable = true;
      n2 = 0;
    } else {
      state2.length -= n2;
    }
    if (state2.length === 0) {
      if (!state2.ended) state2.needReadable = true;
      if (nOrig !== n2 && state2.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream, state2) {
    if (state2.ended) return;
    if (state2.decoder) {
      var chunk = state2.decoder.end();
      if (chunk && chunk.length) {
        state2.buffer.push(chunk);
        state2.length += state2.objectMode ? 1 : chunk.length;
      }
    }
    state2.ended = true;
    emitReadable(stream);
  }
  function emitReadable(stream) {
    var state2 = stream._readableState;
    state2.needReadable = false;
    if (!state2.emittedReadable) {
      debug("emitReadable", state2.flowing);
      state2.emittedReadable = true;
      if (state2.sync) pna.nextTick(emitReadable_, stream);
      else emitReadable_(stream);
    }
  }
  function emitReadable_(stream) {
    debug("emit readable");
    stream.emit("readable");
    flow(stream);
  }
  function maybeReadMore(stream, state2) {
    if (!state2.readingMore) {
      state2.readingMore = true;
      pna.nextTick(maybeReadMore_, stream, state2);
    }
  }
  function maybeReadMore_(stream, state2) {
    var len2 = state2.length;
    while (!state2.reading && !state2.flowing && !state2.ended && state2.length < state2.highWaterMark) {
      debug("maybeReadMore read 0");
      stream.read(0);
      if (len2 === state2.length)
        break;
      else len2 = state2.length;
    }
    state2.readingMore = false;
  }
  Readable.prototype._read = function(n2) {
    this.emit("error", new Error("_read() is not implemented"));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src2 = this;
    var state2 = this._readableState;
    switch (state2.pipesCount) {
      case 0:
        state2.pipes = dest;
        break;
      case 1:
        state2.pipes = [state2.pipes, dest];
        break;
      default:
        state2.pipes.push(dest);
        break;
    }
    state2.pipesCount += 1;
    debug("pipe count=%d opts=%j", state2.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$1.stdout && dest !== process$1.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state2.endEmitted) pna.nextTick(endFn);
    else src2.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug("onunpipe");
      if (readable === src2) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src2);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src2.removeListener("end", onend);
      src2.removeListener("end", unpipe);
      src2.removeListener("data", ondata);
      cleanedUp = true;
      if (state2.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    var increasedAwaitDrain = false;
    src2.on("data", ondata);
    function ondata(chunk) {
      debug("ondata");
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        if ((state2.pipesCount === 1 && state2.pipes === dest || state2.pipesCount > 1 && indexOf2(state2.pipes, dest) !== -1) && !cleanedUp) {
          debug("false write response, pause", state2.awaitDrain);
          state2.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src2.pause();
      }
    }
    function onerror(er) {
      debug("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0) dest.emit("error", er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug("unpipe");
      src2.unpipe(dest);
    }
    dest.emit("pipe", src2);
    if (!state2.flowing) {
      debug("pipe resume");
      src2.resume();
    }
    return dest;
  };
  function pipeOnDrain(src2) {
    return function() {
      var state2 = src2._readableState;
      debug("pipeOnDrain", state2.awaitDrain);
      if (state2.awaitDrain) state2.awaitDrain--;
      if (state2.awaitDrain === 0 && EElistenerCount(src2, "data")) {
        state2.flowing = true;
        flow(src2);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state2 = this._readableState;
    var unpipeInfo = { hasUnpiped: false };
    if (state2.pipesCount === 0) return this;
    if (state2.pipesCount === 1) {
      if (dest && dest !== state2.pipes) return this;
      if (!dest) dest = state2.pipes;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      if (dest) dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state2.pipes;
      var len2 = state2.pipesCount;
      state2.pipes = null;
      state2.pipesCount = 0;
      state2.flowing = false;
      for (var i2 = 0; i2 < len2; i2++) {
        dests[i2].emit("unpipe", this, { hasUnpiped: false });
      }
      return this;
    }
    var index = indexOf2(state2.pipes, dest);
    if (index === -1) return this;
    state2.pipes.splice(index, 1);
    state2.pipesCount -= 1;
    if (state2.pipesCount === 1) state2.pipes = state2.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    if (ev === "data") {
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === "readable") {
      var state2 = this._readableState;
      if (!state2.endEmitted && !state2.readableListening) {
        state2.readableListening = state2.needReadable = true;
        state2.emittedReadable = false;
        if (!state2.reading) {
          pna.nextTick(nReadingNextTick, this);
        } else if (state2.length) {
          emitReadable(this);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  function nReadingNextTick(self2) {
    debug("readable nexttick read 0");
    self2.read(0);
  }
  Readable.prototype.resume = function() {
    var state2 = this._readableState;
    if (!state2.flowing) {
      debug("resume");
      state2.flowing = true;
      resume(this, state2);
    }
    return this;
  };
  function resume(stream, state2) {
    if (!state2.resumeScheduled) {
      state2.resumeScheduled = true;
      pna.nextTick(resume_, stream, state2);
    }
  }
  function resume_(stream, state2) {
    if (!state2.reading) {
      debug("resume read 0");
      stream.read(0);
    }
    state2.resumeScheduled = false;
    state2.awaitDrain = 0;
    stream.emit("resume");
    flow(stream);
    if (state2.flowing && !state2.reading) stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    return this;
  };
  function flow(stream) {
    var state2 = stream._readableState;
    debug("flow", state2.flowing);
    while (state2.flowing && stream.read() !== null) {
    }
  }
  Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state2 = this._readableState;
    var paused = false;
    stream.on("end", function() {
      debug("wrapped end");
      if (state2.decoder && !state2.ended) {
        var chunk = state2.decoder.end();
        if (chunk && chunk.length) _this.push(chunk);
      }
      _this.push(null);
    });
    stream.on("data", function(chunk) {
      debug("wrapped data");
      if (state2.decoder) chunk = state2.decoder.write(chunk);
      if (state2.objectMode && (chunk === null || chunk === void 0)) return;
      else if (!state2.objectMode && (!chunk || !chunk.length)) return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i2 in stream) {
      if (this[i2] === void 0 && typeof stream[i2] === "function") {
        this[i2] = /* @__PURE__ */ function(method) {
          return function() {
            return stream[method].apply(stream, arguments);
          };
        }(i2);
      }
    }
    for (var n2 = 0; n2 < kProxyEvents.length; n2++) {
      stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
    }
    this._read = function(n3) {
      debug("wrapped _read", n3);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return this;
  };
  Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function() {
      return this._readableState.highWaterMark;
    }
  });
  Readable._fromList = fromList;
  function fromList(n2, state2) {
    if (state2.length === 0) return null;
    var ret;
    if (state2.objectMode) ret = state2.buffer.shift();
    else if (!n2 || n2 >= state2.length) {
      if (state2.decoder) ret = state2.buffer.join("");
      else if (state2.buffer.length === 1) ret = state2.buffer.head.data;
      else ret = state2.buffer.concat(state2.length);
      state2.buffer.clear();
    } else {
      ret = fromListPartial(n2, state2.buffer, state2.decoder);
    }
    return ret;
  }
  function fromListPartial(n2, list, hasStrings) {
    var ret;
    if (n2 < list.head.data.length) {
      ret = list.head.data.slice(0, n2);
      list.head.data = list.head.data.slice(n2);
    } else if (n2 === list.head.data.length) {
      ret = list.shift();
    } else {
      ret = hasStrings ? copyFromBufferString(n2, list) : copyFromBuffer(n2, list);
    }
    return ret;
  }
  function copyFromBufferString(n2, list) {
    var p2 = list.head;
    var c2 = 1;
    var ret = p2.data;
    n2 -= ret.length;
    while (p2 = p2.next) {
      var str = p2.data;
      var nb = n2 > str.length ? str.length : n2;
      if (nb === str.length) ret += str;
      else ret += str.slice(0, n2);
      n2 -= nb;
      if (n2 === 0) {
        if (nb === str.length) {
          ++c2;
          if (p2.next) list.head = p2.next;
          else list.head = list.tail = null;
        } else {
          list.head = p2;
          p2.data = str.slice(nb);
        }
        break;
      }
      ++c2;
    }
    list.length -= c2;
    return ret;
  }
  function copyFromBuffer(n2, list) {
    var ret = Buffer2.allocUnsafe(n2);
    var p2 = list.head;
    var c2 = 1;
    p2.data.copy(ret);
    n2 -= p2.data.length;
    while (p2 = p2.next) {
      var buf = p2.data;
      var nb = n2 > buf.length ? buf.length : n2;
      buf.copy(ret, ret.length - n2, 0, nb);
      n2 -= nb;
      if (n2 === 0) {
        if (nb === buf.length) {
          ++c2;
          if (p2.next) list.head = p2.next;
          else list.head = list.tail = null;
        } else {
          list.head = p2;
          p2.data = buf.slice(nb);
        }
        break;
      }
      ++c2;
    }
    list.length -= c2;
    return ret;
  }
  function endReadable(stream) {
    var state2 = stream._readableState;
    if (state2.length > 0) throw new Error('"endReadable()" called on non-empty stream');
    if (!state2.endEmitted) {
      state2.ended = true;
      pna.nextTick(endReadableNT, state2, stream);
    }
  }
  function endReadableNT(state2, stream) {
    if (!state2.endEmitted && state2.length === 0) {
      state2.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
    }
  }
  function indexOf2(xs, x2) {
    for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
      if (xs[i2] === x2) return i2;
    }
    return -1;
  }
  return _stream_readable;
}
var _stream_transform;
var hasRequired_stream_transform;
function require_stream_transform() {
  if (hasRequired_stream_transform) return _stream_transform;
  hasRequired_stream_transform = 1;
  _stream_transform = Transform;
  var Duplex = require_stream_duplex();
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  util2.inherits(Transform, Duplex);
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) {
      return this.emit("error", new Error("write callback called multiple times"));
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function") this._transform = options.transform;
      if (typeof options.flush === "function") this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function") {
      this._flush(function(er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error("_transform() is not implemented");
  };
  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };
  Transform.prototype._read = function(n2) {
    var ts = this._transformState;
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform.prototype._destroy = function(err, cb) {
    var _this2 = this;
    Duplex.prototype._destroy.call(this, err, function(err2) {
      cb(err2);
      _this2.emit("close");
    });
  };
  function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null)
      stream.push(data);
    if (stream._writableState.length) throw new Error("Calling transform done when ws.length != 0");
    if (stream._transformState.transforming) throw new Error("Calling transform done when still transforming");
    return stream.push(null);
  }
  return _stream_transform;
}
var _stream_passthrough;
var hasRequired_stream_passthrough;
function require_stream_passthrough() {
  if (hasRequired_stream_passthrough) return _stream_passthrough;
  hasRequired_stream_passthrough = 1;
  _stream_passthrough = PassThrough;
  var Transform = require_stream_transform();
  var util2 = Object.create(requireUtil());
  util2.inherits = requireInherits_browser();
  util2.inherits(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
  return _stream_passthrough;
}
var hasRequiredReadableBrowser;
function requireReadableBrowser() {
  if (hasRequiredReadableBrowser) return readableBrowser.exports;
  hasRequiredReadableBrowser = 1;
  (function(module, exports2) {
    exports2 = module.exports = require_stream_readable();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
  })(readableBrowser, readableBrowser.exports);
  return readableBrowser.exports;
}
var sign$1 = { exports: {} };
var bn = { exports: {} };
bn.exports;
var hasRequiredBn;
function requireBn() {
  if (hasRequiredBn) return bn.exports;
  hasRequiredBn = 1;
  (function(module) {
    (function(module2, exports2) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number2, base2, endian) {
        if (BN.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number2 || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require$$1$2.Buffer;
        }
      } catch (e2) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN.prototype._init = function init(number2, base2, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base2, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base2 === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN.prototype._initNumber = function _initNumber(number2, base2, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN.prototype._initArray = function _initArray(number2, base2, endian) {
        assert2(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j2, w2;
        var off = 0;
        if (endian === "be") {
          for (i2 = number2.length - 1, j2 = 0; i2 >= 0; i2 -= 3) {
            w2 = number2[i2] | number2[i2 - 1] << 8 | number2[i2 - 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j2 = 0; i2 < number2.length; i2 += 3) {
            w2 = number2[i2] | number2[i2 + 1] << 8 | number2[i2 + 2] << 16;
            this.words[j2] |= w2 << off & 67108863;
            this.words[j2 + 1] = w2 >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j2++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string2, index) {
        var c2 = string2.charCodeAt(index);
        if (c2 >= 48 && c2 <= 57) {
          return c2 - 48;
        } else if (c2 >= 65 && c2 <= 70) {
          return c2 - 55;
        } else if (c2 >= 97 && c2 <= 102) {
          return c2 - 87;
        } else {
          assert2(false, "Invalid character in " + string2);
        }
      }
      function parseHexByte(string2, lowerBound, index) {
        var r2 = parseHex4Bits(string2, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string2, index - 1) << 4;
        }
        return r2;
      }
      BN.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j2 = 0;
        var w2;
        if (endian === "be") {
          for (i2 = number2.length - 1; i2 >= start; i2 -= 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i2 = parseLength % 2 === 0 ? start + 1 : start; i2 < number2.length; i2 += 2) {
            w2 = parseHexByte(number2, start, i2) << off;
            this.words[j2] |= w2 & 67108863;
            if (off >= 18) {
              off -= 18;
              j2 += 1;
              this.words[j2] |= w2 >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b2 = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start; i2 < len2; i2++) {
          var c2 = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c2 >= 49) {
            b2 = c2 - 49 + 10;
          } else if (c2 >= 17) {
            b2 = c2 - 17 + 10;
          } else {
            b2 = c2;
          }
          assert2(c2 >= 0 && b2 < mul, "Invalid character");
          r2 += b2;
        }
        return r2;
      }
      BN.prototype._parseBase = function _parseBase(number2, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number2.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i2 = start; i2 < end; i2 += limbLen) {
          word = parseBase(number2, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number2, i2, number2.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src2) {
        dest.words = src2.words;
        dest.length = src2.length;
        dest.negative = src2.negative;
        dest.red = src2.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone2() {
        var r2 = new BN(null);
        this.copy(r2);
        return r2;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e2) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w2 = this.words[i2];
            var word = ((w2 << off | carry) & 16777215).toString(16);
            carry = w2 >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c2 = this.clone();
          c2.negative = 0;
          while (!c2.isZero()) {
            var r2 = c2.modrn(groupBase).toString(base2);
            c2 = c2.idivn(groupBase);
            if (!c2.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN.prototype.toBuffer = function toBuffer2(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength2);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength2) {
        var position = 0;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength2) {
        var position = res.length - 1;
        var carry = 0;
        for (var i2 = 0, shift = 0; i2 < this.length; i2++) {
          var word = this.words[i2] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w2) {
          return 32 - Math.clz32(w2);
        };
      } else {
        BN.prototype._countBits = function _countBits(w2) {
          var t2 = w2;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w2) {
        if (w2 === 0) return 26;
        var t2 = w2;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN.prototype.bitLength = function bitLength() {
        var w2 = this.words[this.length - 1];
        var hi = this._countBits(w2);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w2 = new Array(num.bitLength());
        for (var bit = 0; bit < w2.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w2[bit] = num.words[off] >>> wbit & 1;
        }
        return w2;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b2 = this._zeroBits(this.words[i2]);
          r2 += b2;
          if (b2 !== 26) break;
        }
        return r2;
      };
      BN.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b2.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a2;
        var b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        for (var i2 = 0; i2 < b2.length; i2++) {
          this.words[i2] = a2.words[i2] ^ b2.words[i2];
        }
        if (this !== a2) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = a2.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor2(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a2, b2;
        if (this.length > num.length) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) + (b2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a2.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        return this;
      };
      BN.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a2, b2;
        if (cmp > 0) {
          a2 = this;
          b2 = num;
        } else {
          a2 = num;
          b2 = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b2.length; i2++) {
          r2 = (a2.words[i2] | 0) - (b2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a2.length; i2++) {
          r2 = (a2.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a2.length && a2 !== this) {
          for (; i2 < a2.length; i2++) {
            this.words[i2] = a2.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a2 !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a2 = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a2 * b2;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k2 = 1; k2 < len2; k2++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2 | 0;
            a2 = self2.words[i2] | 0;
            b2 = num.words[j2] | 0;
            r2 = a2 * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k2] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k2] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a2 = self2.words;
        var b2 = num.words;
        var o3 = out.words;
        var c2 = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a2[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a2[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a22 = a2[2] | 0;
        var al2 = a22 & 8191;
        var ah2 = a22 >>> 13;
        var a3 = a2[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a2[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a2[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a2[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a2[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a2[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a2[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c2 + lo | 0) + ((mid & 8191) << 13) | 0;
        c2 = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o3[0] = w0;
        o3[1] = w1;
        o3[2] = w2;
        o3[3] = w3;
        o3[4] = w4;
        o3[5] = w5;
        o3[6] = w6;
        o3[7] = w7;
        o3[8] = w8;
        o3[9] = w9;
        o3[10] = w10;
        o3[11] = w11;
        o3[12] = w12;
        o3[13] = w13;
        o3[14] = w14;
        o3[15] = w15;
        o3[16] = w16;
        o3[17] = w17;
        o3[18] = w18;
        if (c2 !== 0) {
          o3[19] = c2;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k2 = 0; k2 < out.length - 1; k2++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k2, num.length - 1);
          for (var j2 = Math.max(0, k2 - self2.length + 1); j2 <= maxJ; j2++) {
            var i2 = k2 - j2;
            var a2 = self2.words[i2] | 0;
            var b2 = num.words[j2] | 0;
            var r2 = a2 * b2;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k2] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k2] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w2 = (this.words[i2] | 0) * num;
          var lo = (w2 & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w2 / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w2 = toBitArray(num);
        if (w2.length === 0) return new BN(1);
        var res = this;
        for (var i2 = 0; i2 < w2.length; i2++, res = res.sqr()) {
          if (w2[i2] !== 0) break;
        }
        if (++i2 < w2.length) {
          for (var q2 = res.sqr(); i2 < w2.length; i2++, q2 = q2.sqr()) {
            if (w2[i2] === 0) continue;
            res = res.mul(q2);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c2 = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c2 | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h2;
        if (hint) {
          h2 = (hint - hint % 26) / 26;
        } else {
          h2 = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h2 -= s2;
        h2 = Math.max(0, h2);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h2); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) return false;
        var w2 = this.words[s2];
        return !!(w2 & q2);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w2;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w2 -= right & 67108863;
          carry = (w2 >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w2 & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w2 = (this.words[i2 + shift] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2 + shift] = w2 & 67108863;
        }
        if (carry === 0) return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w2 = -(this.words[i2] | 0) + carry;
          carry = w2 >> 26;
          this.words[i2] = w2 & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a2 = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a2.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m2 = a2.length - b2.length;
        var q2;
        if (mode !== "mod") {
          q2 = new BN(null);
          q2.length = m2 + 1;
          q2.words = new Array(q2.length);
          for (var i2 = 0; i2 < q2.length; i2++) {
            q2.words[i2] = 0;
          }
        }
        var diff = a2.clone()._ishlnsubmul(b2, 1, m2);
        if (diff.negative === 0) {
          a2 = diff;
          if (q2) {
            q2.words[m2] = 1;
          }
        }
        for (var j2 = m2 - 1; j2 >= 0; j2--) {
          var qj = (a2.words[b2.length + j2] | 0) * 67108864 + (a2.words[b2.length + j2 - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a2._ishlnsubmul(b2, qj, j2);
          while (a2.negative !== 0) {
            qj--;
            a2.negative = 0;
            a2._ishlnsubmul(b2, 1, j2);
            if (!a2.isZero()) {
              a2.negative ^= 1;
            }
          }
          if (q2) {
            q2.words[j2] = qj;
          }
        }
        if (q2) {
          q2._strip();
        }
        a2._strip();
        if (mode !== "div" && shift !== 0) {
          a2.iushrn(shift);
        }
        return {
          div: q2 || null,
          mod: a2
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var p2 = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p2 * acc + (this.words[i2] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w2 = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w2 / num | 0;
          carry = w2 % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p2) {
        assert2(p2.negative === 0);
        assert2(!p2.isZero());
        var x2 = this;
        var y2 = p2.clone();
        if (x2.negative !== 0) {
          x2 = x2.umod(p2);
        } else {
          x2 = x2.clone();
        }
        var A2 = new BN(1);
        var B = new BN(0);
        var C2 = new BN(0);
        var D2 = new BN(1);
        var g2 = 0;
        while (x2.isEven() && y2.isEven()) {
          x2.iushrn(1);
          y2.iushrn(1);
          ++g2;
        }
        var yp = y2.clone();
        var xp = x2.clone();
        while (!x2.isZero()) {
          for (var i2 = 0, im = 1; (x2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x2.iushrn(i2);
            while (i2-- > 0) {
              if (A2.isOdd() || B.isOdd()) {
                A2.iadd(yp);
                B.isub(xp);
              }
              A2.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (y2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1) ;
          if (j2 > 0) {
            y2.iushrn(j2);
            while (j2-- > 0) {
              if (C2.isOdd() || D2.isOdd()) {
                C2.iadd(yp);
                D2.isub(xp);
              }
              C2.iushrn(1);
              D2.iushrn(1);
            }
          }
          if (x2.cmp(y2) >= 0) {
            x2.isub(y2);
            A2.isub(C2);
            B.isub(D2);
          } else {
            y2.isub(x2);
            C2.isub(A2);
            D2.isub(B);
          }
        }
        return {
          a: C2,
          b: D2,
          gcd: y2.iushln(g2)
        };
      };
      BN.prototype._invmp = function _invmp(p2) {
        assert2(p2.negative === 0);
        assert2(!p2.isZero());
        var a2 = this;
        var b2 = p2.clone();
        if (a2.negative !== 0) {
          a2 = a2.umod(p2);
        } else {
          a2 = a2.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b2.clone();
        while (a2.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a2.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a2.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j2 = 0, jm = 1; (b2.words[0] & jm) === 0 && j2 < 26; ++j2, jm <<= 1) ;
          if (j2 > 0) {
            b2.iushrn(j2);
            while (j2-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a2.cmp(b2) >= 0) {
            a2.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a2);
            x2.isub(x1);
          }
        }
        var res;
        if (a2.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p2);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a2 = this.clone();
        var b2 = num.clone();
        a2.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a2.isEven() && b2.isEven(); shift++) {
          a2.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a2.isEven()) {
            a2.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a2.cmp(b2);
          if (r2 < 0) {
            var t2 = a2;
            a2 = b2;
            b2 = t2;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a2.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd2() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q2 = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q2;
          return this;
        }
        var carry = q2;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w2 = this.words[i2] | 0;
          w2 += carry;
          carry = w2 >>> 26;
          w2 &= 67108863;
          this.words[i2] = w2;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero2() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w2 = this.words[0] | 0;
          res = w2 === num ? 0 : w2 < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a2 = this.words[i2] | 0;
          var b2 = num.words[i2] | 0;
          if (a2 === b2) continue;
          if (a2 < b2) {
            res = -1;
          } else if (a2 > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p2) {
        this.name = name2;
        this.p = new BN(p2, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output2.words[i2] = input.words[i2];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w2 = num.words[i2] | 0;
          lo += w2 * 977;
          num.words[i2] = lo & 67108863;
          lo = w2 * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m2) {
        if (typeof m2 === "string") {
          var prime = BN._prime(m2);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m2.gtn(1), "modulus must be greater than 1");
          this.m = m2;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a2) {
        assert2(a2.negative === 0, "red works only with positives");
        assert2(a2.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a2, b2) {
        assert2((a2.negative | b2.negative) === 0, "red works only with positives");
        assert2(
          a2.red && a2.red === b2.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a2) {
        if (this.prime) return this.prime.ireduce(a2)._forceRed(this);
        move(a2, a2.umod(this.m)._forceRed(this));
        return a2;
      };
      Red.prototype.neg = function neg(a2) {
        if (a2.isZero()) {
          return a2.clone();
        }
        return this.m.sub(a2)._forceRed(this);
      };
      Red.prototype.add = function add2(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a2, b2) {
        this._verify2(a2, b2);
        var res = a2.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a2, num) {
        this._verify1(a2);
        return this.imod(a2.ushln(num));
      };
      Red.prototype.imul = function imul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.imul(b2));
      };
      Red.prototype.mul = function mul(a2, b2) {
        this._verify2(a2, b2);
        return this.imod(a2.mul(b2));
      };
      Red.prototype.isqr = function isqr(a2) {
        return this.imul(a2, a2.clone());
      };
      Red.prototype.sqr = function sqr(a2) {
        return this.mul(a2, a2);
      };
      Red.prototype.sqrt = function sqrt(a2) {
        if (a2.isZero()) return a2.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a2, pow);
        }
        var q2 = this.m.subn(1);
        var s2 = 0;
        while (!q2.isZero() && q2.andln(1) === 0) {
          s2++;
          q2.iushrn(1);
        }
        assert2(!q2.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z2 = this.m.bitLength();
        z2 = new BN(2 * z2 * z2).toRed(this);
        while (this.pow(z2, lpow).cmp(nOne) !== 0) {
          z2.redIAdd(nOne);
        }
        var c2 = this.pow(z2, q2);
        var r2 = this.pow(a2, q2.addn(1).iushrn(1));
        var t2 = this.pow(a2, q2);
        var m2 = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m2);
          var b2 = this.pow(c2, new BN(1).iushln(m2 - i2 - 1));
          r2 = r2.redMul(b2);
          c2 = b2.redSqr();
          t2 = t2.redMul(c2);
          m2 = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a2) {
        var inv = a2._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a2, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a2.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a2;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a2);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j2 = start - 1; j2 >= 0; j2--) {
            var bit = word >> j2 & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j2 !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m2) {
        Red.call(this, m2);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a2, b2) {
        if (a2.isZero() || b2.isZero()) {
          a2.words[0] = 0;
          a2.length = 1;
          return a2;
        }
        var t2 = a2.imul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a2, b2) {
        if (a2.isZero() || b2.isZero()) return new BN(0)._forceRed(this);
        var t2 = a2.mul(b2);
        var c2 = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u2 = t2.isub(c2).iushrn(this.shift);
        var res = u2;
        if (u2.cmp(this.m) >= 0) {
          res = u2.isub(this.m);
        } else if (u2.cmpn(0) < 0) {
          res = u2.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a2) {
        var res = this.imod(a2._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn);
  return bn.exports;
}
var browserifyRsa;
var hasRequiredBrowserifyRsa;
function requireBrowserifyRsa() {
  if (hasRequiredBrowserifyRsa) return browserifyRsa;
  hasRequiredBrowserifyRsa = 1;
  var BN = requireBn();
  var randomBytes2 = browserExports;
  function blind(priv) {
    var r2 = getr(priv);
    var blinder = r2.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return { blinder, unblinder: r2.invm(priv.modulus) };
  }
  function getr(priv) {
    var len2 = priv.modulus.byteLength();
    var r2;
    do {
      r2 = new BN(randomBytes2(len2));
    } while (r2.cmp(priv.modulus) >= 0 || !r2.umod(priv.prime1) || !r2.umod(priv.prime2));
    return r2;
  }
  function crt(msg, priv) {
    var blinds = blind(priv);
    var len2 = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p2 = priv.prime1;
    var q2 = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h2 = m1.isub(m2).imul(qinv).umod(p2).imul(q2);
    return m2.iadd(h2).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer$3, "be", len2);
  }
  crt.getr = getr;
  browserifyRsa = crt;
  return browserifyRsa;
}
var elliptic = {};
const name = "elliptic";
const version = "6.5.7";
const description = "EC cryptography";
const main = "lib/elliptic.js";
const files = [
  "lib"
];
const scripts = {
  lint: "eslint lib test",
  "lint:fix": "npm run lint -- --fix",
  unit: "istanbul test _mocha --reporter=spec test/index.js",
  test: "npm run lint && npm run unit",
  version: "grunt dist && git add dist/"
};
const repository = {
  type: "git",
  url: "git@github.com:indutny/elliptic"
};
const keywords = [
  "EC",
  "Elliptic",
  "curve",
  "Cryptography"
];
const author = "Fedor Indutny <fedor@indutny.com>";
const license = "MIT";
const bugs = {
  url: "https://github.com/indutny/elliptic/issues"
};
const homepage = "https://github.com/indutny/elliptic";
const devDependencies = {
  brfs: "^2.0.2",
  coveralls: "^3.1.0",
  eslint: "^7.6.0",
  grunt: "^1.2.1",
  "grunt-browserify": "^5.3.0",
  "grunt-cli": "^1.3.2",
  "grunt-contrib-connect": "^3.0.0",
  "grunt-contrib-copy": "^1.0.0",
  "grunt-contrib-uglify": "^5.0.0",
  "grunt-mocha-istanbul": "^5.0.2",
  "grunt-saucelabs": "^9.0.1",
  istanbul: "^0.4.5",
  mocha: "^8.0.1"
};
const dependencies = {
  "bn.js": "^4.11.9",
  brorand: "^1.1.0",
  "hash.js": "^1.0.0",
  "hmac-drbg": "^1.0.1",
  inherits: "^2.0.4",
  "minimalistic-assert": "^1.0.1",
  "minimalistic-crypto-utils": "^1.0.1"
};
const require$$0 = {
  name,
  version,
  description,
  main,
  files,
  scripts,
  repository,
  keywords,
  author,
  license,
  bugs,
  homepage,
  devDependencies,
  dependencies
};
var utils$2 = {};
var utils$1 = {};
var hasRequiredUtils$2;
function requireUtils$2() {
  if (hasRequiredUtils$2) return utils$1;
  hasRequiredUtils$2 = 1;
  (function(exports2) {
    var utils2 = exports2;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          var hi = c2 >> 8;
          var lo = c2 & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero2;
    function toHex(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero2(msg[i2].toString(16));
      return res;
    }
    utils2.toHex = toHex;
    utils2.encode = function encode2(arr, enc) {
      if (enc === "hex")
        return toHex(arr);
      else
        return arr;
    };
  })(utils$1);
  return utils$1;
}
var hasRequiredUtils$1;
function requireUtils$1() {
  if (hasRequiredUtils$1) return utils$2;
  hasRequiredUtils$1 = 1;
  (function(exports2) {
    var utils2 = exports2;
    var BN = requireBn$1();
    var minAssert = requireMinimalisticAssert();
    var minUtils = requireUtils$2();
    utils2.assert = minAssert;
    utils2.toArray = minUtils.toArray;
    utils2.zero2 = minUtils.zero2;
    utils2.toHex = minUtils.toHex;
    utils2.encode = minUtils.encode;
    function getNAF(num, w2, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i2;
      for (i2 = 0; i2 < naf.length; i2 += 1) {
        naf[i2] = 0;
      }
      var ws = 1 << w2 + 1;
      var k2 = num.clone();
      for (i2 = 0; i2 < naf.length; i2++) {
        var z2;
        var mod = k2.andln(ws - 1);
        if (k2.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z2 = (ws >> 1) - mod;
          else
            z2 = mod;
          k2.isubn(z2);
        } else {
          z2 = 0;
        }
        naf[i2] = z2;
        k2.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF;
    function getJSF(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF;
    function cachedProperty(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty;
    function parseBytes(bytes2) {
      return typeof bytes2 === "string" ? utils2.toArray(bytes2, "hex") : bytes2;
    }
    utils2.parseBytes = parseBytes;
    function intFromLE(bytes2) {
      return new BN(bytes2, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  })(utils$2);
  return utils$2;
}
var curve = {};
var base$1;
var hasRequiredBase$1;
function requireBase$1() {
  if (hasRequiredBase$1) return base$1;
  hasRequiredBase$1 = 1;
  var BN = requireBn$1();
  var utils2 = requireUtils$1();
  var getNAF = utils2.getNAF;
  var getJSF = utils2.getJSF;
  var assert2 = utils2.assert;
  function BaseCurve(type2, conf) {
    this.type = type2;
    this.p = new BN(conf.p, 16);
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  base$1 = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p2, k2) {
    assert2(p2.precomputed);
    var doubles = p2._getDoubles();
    var naf = getNAF(k2, 1, this._bitLength);
    var I2 = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I2 /= 3;
    var repr = [];
    var j2;
    var nafW;
    for (j2 = 0; j2 < naf.length; j2 += doubles.step) {
      nafW = 0;
      for (var l2 = j2 + doubles.step - 1; l2 >= j2; l2--)
        nafW = (nafW << 1) + naf[l2];
      repr.push(nafW);
    }
    var a2 = this.jpoint(null, null, null);
    var b2 = this.jpoint(null, null, null);
    for (var i2 = I2; i2 > 0; i2--) {
      for (j2 = 0; j2 < repr.length; j2++) {
        nafW = repr[j2];
        if (nafW === i2)
          b2 = b2.mixedAdd(doubles.points[j2]);
        else if (nafW === -i2)
          b2 = b2.mixedAdd(doubles.points[j2].neg());
      }
      a2 = a2.add(b2);
    }
    return a2.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p2, k2) {
    var w2 = 4;
    var nafPoints = p2._getNAFPoints(w2);
    w2 = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k2, w2, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i2 = naf.length - 1; i2 >= 0; i2--) {
      for (var l2 = 0; i2 >= 0 && naf[i2] === 0; i2--)
        l2++;
      if (i2 >= 0)
        l2++;
      acc = acc.dblp(l2);
      if (i2 < 0)
        break;
      var z2 = naf[i2];
      assert2(z2 !== 0);
      if (p2.type === "affine") {
        if (z2 > 0)
          acc = acc.mixedAdd(wnd[z2 - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z2 - 1 >> 1].neg());
      } else {
        if (z2 > 0)
          acc = acc.add(wnd[z2 - 1 >> 1]);
        else
          acc = acc.add(wnd[-z2 - 1 >> 1].neg());
      }
    }
    return p2.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len2, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i2;
    var j2;
    var p2;
    for (i2 = 0; i2 < len2; i2++) {
      p2 = points[i2];
      var nafPoints = p2._getNAFPoints(defW);
      wndWidth[i2] = nafPoints.wnd;
      wnd[i2] = nafPoints.points;
    }
    for (i2 = len2 - 1; i2 >= 1; i2 -= 2) {
      var a2 = i2 - 1;
      var b2 = i2;
      if (wndWidth[a2] !== 1 || wndWidth[b2] !== 1) {
        naf[a2] = getNAF(coeffs[a2], wndWidth[a2], this._bitLength);
        naf[b2] = getNAF(coeffs[b2], wndWidth[b2], this._bitLength);
        max = Math.max(naf[a2].length, max);
        max = Math.max(naf[b2].length, max);
        continue;
      }
      var comb = [
        points[a2],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b2]
        /* 7 */
      ];
      if (points[a2].y.cmp(points[b2].y) === 0) {
        comb[1] = points[a2].add(points[b2]);
        comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
      } else if (points[a2].y.cmp(points[b2].y.redNeg()) === 0) {
        comb[1] = points[a2].toJ().mixedAdd(points[b2]);
        comb[2] = points[a2].add(points[b2].neg());
      } else {
        comb[1] = points[a2].toJ().mixedAdd(points[b2]);
        comb[2] = points[a2].toJ().mixedAdd(points[b2].neg());
      }
      var index = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ];
      var jsf = getJSF(coeffs[a2], coeffs[b2]);
      max = Math.max(jsf[0].length, max);
      naf[a2] = new Array(max);
      naf[b2] = new Array(max);
      for (j2 = 0; j2 < max; j2++) {
        var ja = jsf[0][j2] | 0;
        var jb = jsf[1][j2] | 0;
        naf[a2][j2] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b2][j2] = 0;
        wnd[a2] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i2 = max; i2 >= 0; i2--) {
      var k2 = 0;
      while (i2 >= 0) {
        var zero = true;
        for (j2 = 0; j2 < len2; j2++) {
          tmp[j2] = naf[j2][i2] | 0;
          if (tmp[j2] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k2++;
        i2--;
      }
      if (i2 >= 0)
        k2++;
      acc = acc.dblp(k2);
      if (i2 < 0)
        break;
      for (j2 = 0; j2 < len2; j2++) {
        var z2 = tmp[j2];
        if (z2 === 0)
          continue;
        else if (z2 > 0)
          p2 = wnd[j2][z2 - 1 >> 1];
        else if (z2 < 0)
          p2 = wnd[j2][-z2 - 1 >> 1].neg();
        if (p2.type === "affine")
          acc = acc.mixedAdd(p2);
        else
          acc = acc.add(p2);
      }
    }
    for (i2 = 0; i2 < len2; i2++)
      wnd[i2] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve2, type2) {
    this.curve = curve2;
    this.type = type2;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
    bytes2 = utils2.toArray(bytes2, enc);
    var len2 = this.p.byteLength();
    if ((bytes2[0] === 4 || bytes2[0] === 6 || bytes2[0] === 7) && bytes2.length - 1 === 2 * len2) {
      if (bytes2[0] === 6)
        assert2(bytes2[bytes2.length - 1] % 2 === 0);
      else if (bytes2[0] === 7)
        assert2(bytes2[bytes2.length - 1] % 2 === 1);
      var res = this.point(
        bytes2.slice(1, 1 + len2),
        bytes2.slice(1 + len2, 1 + 2 * len2)
      );
      return res;
    } else if ((bytes2[0] === 2 || bytes2[0] === 3) && bytes2.length - 1 === len2) {
      return this.pointFromX(bytes2.slice(1, 1 + len2), bytes2[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
    var len2 = this.curve.p.byteLength();
    var x2 = this.getX().toArray("be", len2);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x2);
    return [4].concat(x2, this.getY().toArray("be", len2));
  };
  BasePoint.prototype.encode = function encode2(enc, compact) {
    return utils2.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k2) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k2.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i2 = 0; i2 < power; i2 += step) {
      for (var j2 = 0; j2 < step; j2++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i2 = 1; i2 < max; i2++)
      res[i2] = res[i2 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k2) {
    var r2 = this;
    for (var i2 = 0; i2 < k2; i2++)
      r2 = r2.dbl();
    return r2;
  };
  return base$1;
}
var short;
var hasRequiredShort;
function requireShort() {
  if (hasRequiredShort) return short;
  hasRequiredShort = 1;
  var utils2 = requireUtils$1();
  var BN = requireBn$1();
  var inherits = requireInherits_browser();
  var Base = requireBase$1();
  var assert2 = utils2.assert;
  function ShortCurve(conf) {
    Base.call(this, "short", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits(ShortCurve, Base);
  short = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN(vec.a, 16),
          b: new BN(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u2 = lambda;
    var v2 = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i2 = 0;
    var r2;
    var x3;
    while (u2.cmpn(0) !== 0) {
      var q2 = v2.div(u2);
      r2 = v2.sub(q2.mul(u2));
      x3 = x2.sub(q2.mul(x1));
      var y3 = y2.sub(q2.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x3;
      } else if (a1 && ++i2 === 2) {
        break;
      }
      prevR = r2;
      v2 = u2;
      u2 = r2;
      x2 = x1;
      x1 = x3;
      y2 = y1;
      y1 = y3;
    }
    a2 = r2.neg();
    b2 = x3;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k2) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k2).divRound(this.n);
    var c2 = v1.b.neg().mul(k2).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k2.sub(p1).sub(p2);
    var k22 = q1.add(q2).neg();
    return { k1, k2: k22 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x2, odd) {
    x2 = new BN(x2, 16);
    if (!x2.red)
      x2 = x2.toRed(this.red);
    var y2 = x2.redSqr().redMul(x2).redIAdd(x2.redMul(this.a)).redIAdd(this.b);
    var y3 = y2.redSqrt();
    if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd2 = y3.fromRed().isOdd();
    if (odd && !isOdd2 || !odd && isOdd2)
      y3 = y3.redNeg();
    return this.point(x2, y3);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x2 = point.x;
    var y2 = point.y;
    var ax = this.a.redMul(x2);
    var rhs = x2.redSqr().redMul(x2).redIAdd(ax).redIAdd(this.b);
    return y2.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i2 = 0; i2 < points.length; i2++) {
      var split2 = this._endoSplit(coeffs[i2]);
      var p2 = points[i2];
      var beta = p2._getBeta();
      if (split2.k1.negative) {
        split2.k1.ineg();
        p2 = p2.neg(true);
      }
      if (split2.k2.negative) {
        split2.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i2 * 2] = p2;
      npoints[i2 * 2 + 1] = beta;
      ncoeffs[i2 * 2] = split2.k1;
      ncoeffs[i2 * 2 + 1] = split2.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
    for (var j2 = 0; j2 < i2 * 2; j2++) {
      npoints[j2] = null;
      ncoeffs[j2] = null;
    }
    return res;
  };
  function Point(curve2, x2, y2, isRed) {
    Base.BasePoint.call(this, curve2, "affine");
    if (x2 === null && y2 === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN(x2, 16);
      this.y = new BN(y2, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits(Point, Base.BasePoint);
  ShortCurve.prototype.point = function point(x2, y2, isRed) {
    return new Point(this, x2, y2, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
  };
  Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve2 = this.curve;
      var endoMul = function(p2) {
        return curve2.point(p2.x.redMul(curve2.endo.beta), p2.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point.fromJSON = function fromJSON(curve2, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve2.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve2.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point.prototype.add = function add2(p2) {
    if (this.inf)
      return p2;
    if (p2.inf)
      return this;
    if (this.eq(p2))
      return this.dbl();
    if (this.neg().eq(p2))
      return this.curve.point(null, null);
    if (this.x.cmp(p2.x) === 0)
      return this.curve.point(null, null);
    var c2 = this.y.redSub(p2.y);
    if (c2.cmpn(0) !== 0)
      c2 = c2.redMul(this.x.redSub(p2.x).redInvm());
    var nx = c2.redSqr().redISub(this.x).redISub(p2.x);
    var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a2 = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c2 = x2.redAdd(x2).redIAdd(x2).redIAdd(a2).redMul(dyinv);
    var nx = c2.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c2.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point.prototype.mul = function mul(k2) {
    k2 = new BN(k2, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k2))
      return this.curve._fixedNafMul(this, k2);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k2]);
    else
      return this.curve._wnafMul(this, k2);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point.prototype.eq = function eq(p2) {
    return this === p2 || this.inf === p2.inf && (this.inf || this.x.cmp(p2.x) === 0 && this.y.cmp(p2.y) === 0);
  };
  Point.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p2) {
        return p2.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve2, x2, y2, z2) {
    Base.BasePoint.call(this, curve2, "jacobian");
    if (x2 === null && y2 === null && z2 === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN(0);
    } else {
      this.x = new BN(x2, 16);
      this.y = new BN(y2, 16);
      this.z = new BN(z2, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits(JPoint, Base.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x2, y2, z2) {
    return new JPoint(this, x2, y2, z2);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add2(p2) {
    if (this.isInfinity())
      return p2;
    if (p2.isInfinity())
      return this;
    var pz2 = p2.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p2.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p2.z));
    var s2 = p2.y.redMul(z2.redMul(this.z));
    var h2 = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h2.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h2.redSqr();
    var h3 = h22.redMul(h2);
    var v2 = u1.redMul(h22);
    var nx = r2.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
    var ny = r2.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p2.z).redMul(h2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p2) {
    if (this.isInfinity())
      return p2.toJ();
    if (p2.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p2.x.redMul(z2);
    var s1 = this.y;
    var s2 = p2.y.redMul(z2).redMul(this.z);
    var h2 = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h2.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h22 = h2.redSqr();
    var h3 = h22.redMul(h2);
    var v2 = u1.redMul(h22);
    var nx = r2.redSqr().redIAdd(h3).redISub(v2).redISub(v2);
    var ny = r2.redMul(v2.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i2;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i2 = 0; i2 < pow; i2++)
        r2 = r2.dbl();
      return r2;
    }
    var a2 = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i2 = 0; i2 < pow; i2++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c2.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c2.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i2 + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m2 = xx.redAdd(xx).redIAdd(xx);
      var t2 = m2.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t2;
      ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a2 = this.x.redSqr();
      var b2 = this.y.redSqr();
      var c2 = b2.redSqr();
      var d2 = this.x.redAdd(b2).redSqr().redISub(a2).redISub(c2);
      d2 = d2.redIAdd(d2);
      var e2 = a2.redAdd(a2).redIAdd(a2);
      var f2 = e2.redSqr();
      var c8 = c2.redIAdd(c2);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d2).redISub(d2);
      ny = e2.redMul(d2.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m2 = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t2 = m2.redSqr().redISub(s2).redISub(s2);
      nx = t2;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m2.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a2 = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c2 = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a2.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c2.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c2.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m2 = xx.redAdd(xx).redIAdd(xx);
    var mm = m2.redSqr();
    var e2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e2 = e2.redIAdd(e2);
    e2 = e2.redAdd(e2).redIAdd(e2);
    e2 = e2.redISub(mm);
    var ee2 = e2.redSqr();
    var t2 = yyyy.redIAdd(yyyy);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    var u2 = m2.redIAdd(e2).redSqr().redISub(mm).redISub(ee2).redISub(t2);
    var yyu4 = yy.redMul(u2);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee2).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u2.redMul(t2.redISub(u2)).redISub(e2.redMul(ee2)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e2).redSqr().redISub(zz).redISub(ee2);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k2, kbase) {
    k2 = new BN(k2, kbase);
    return this.curve._wnafMul(this, k2);
  };
  JPoint.prototype.eq = function eq(p2) {
    if (p2.type === "affine")
      return this.eq(p2.toJ());
    if (this === p2)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p2.z.redSqr();
    if (this.x.redMul(pz2).redISub(p2.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p2.z);
    return this.y.redMul(pz3).redISub(p2.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x2) {
    var zs = this.z.redSqr();
    var rx = x2.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x2.clone();
    var t2 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  return short;
}
var mont;
var hasRequiredMont;
function requireMont() {
  if (hasRequiredMont) return mont;
  hasRequiredMont = 1;
  var BN = requireBn$1();
  var inherits = requireInherits_browser();
  var Base = requireBase$1();
  var utils2 = requireUtils$1();
  function MontCurve(conf) {
    Base.call(this, "mont", conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits(MontCurve, Base);
  mont = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x2 = point.normalize().x;
    var x22 = x2.redSqr();
    var rhs = x22.redMul(x2).redAdd(x22.redMul(this.a)).redAdd(x2);
    var y2 = rhs.redSqrt();
    return y2.redSqr().cmp(rhs) === 0;
  };
  function Point(curve2, x2, z2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x2 === null && z2 === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN(x2, 16);
      this.z = new BN(z2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits(Point, Base.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes2, enc) {
    return this.point(utils2.toArray(bytes2, enc), 1);
  };
  MontCurve.prototype.point = function point(x2, z2) {
    return new Point(this, x2, z2);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  Point.prototype.precompute = function precompute() {
  };
  Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1] || curve2.one);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point.prototype.dbl = function dbl() {
    var a2 = this.x.redAdd(this.z);
    var aa = a2.redSqr();
    var b2 = this.x.redSub(this.z);
    var bb = b2.redSqr();
    var c2 = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c2.redMul(bb.redAdd(this.curve.a24.redMul(c2)));
    return this.curve.point(nx, nz);
  };
  Point.prototype.add = function add2() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.diffAdd = function diffAdd(p2, diff) {
    var a2 = this.x.redAdd(this.z);
    var b2 = this.x.redSub(this.z);
    var c2 = p2.x.redAdd(p2.z);
    var d2 = p2.x.redSub(p2.z);
    var da = d2.redMul(a2);
    var cb = c2.redMul(b2);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point.prototype.mul = function mul(k2) {
    var t2 = k2.clone();
    var a2 = this;
    var b2 = this.curve.point(null, null);
    var c2 = this;
    for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
      bits.push(t2.andln(1));
    for (var i2 = bits.length - 1; i2 >= 0; i2--) {
      if (bits[i2] === 0) {
        a2 = a2.diffAdd(b2, c2);
        b2 = b2.dbl();
      } else {
        b2 = a2.diffAdd(b2, c2);
        a2 = a2.dbl();
      }
    }
    return b2;
  };
  Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  return mont;
}
var edwards;
var hasRequiredEdwards;
function requireEdwards() {
  if (hasRequiredEdwards) return edwards;
  hasRequiredEdwards = 1;
  var utils2 = requireUtils$1();
  var BN = requireBn$1();
  var inherits = requireInherits_browser();
  var Base = requireBase$1();
  var assert2 = utils2.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits(EdwardsCurve, Base);
  edwards = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x2, y2, z2, t2) {
    return this.point(x2, y2, z2, t2);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x2, odd) {
    x2 = new BN(x2, 16);
    if (!x2.red)
      x2 = x2.toRed(this.red);
    var x22 = x2.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x22));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x22));
    var y2 = rhs.redMul(lhs.redInvm());
    var y3 = y2.redSqrt();
    if (y3.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd2 = y3.fromRed().isOdd();
    if (odd && !isOdd2 || !odd && isOdd2)
      y3 = y3.redNeg();
    return this.point(x2, y3);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y2, odd) {
    y2 = new BN(y2, 16);
    if (!y2.red)
      y2 = y2.toRed(this.red);
    var y22 = y2.redSqr();
    var lhs = y22.redSub(this.c2);
    var rhs = y22.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error("invalid point");
      else
        return this.point(this.zero, y2);
    }
    var x3 = x2.redSqrt();
    if (x3.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    if (x3.fromRed().isOdd() !== odd)
      x3 = x3.redNeg();
    return this.point(x3, y2);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve2, x2, y2, z2, t2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x2 === null && y2 === null && z2 === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN(x2, 16);
      this.y = new BN(y2, 16);
      this.z = z2 ? new BN(z2, 16) : this.curve.one;
      this.t = t2 && new BN(t2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x2, y2, z2, t2) {
    return new Point(this, x2, y2, z2, t2);
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };
  Point.prototype._extDbl = function _extDbl() {
    var a2 = this.x.redSqr();
    var b2 = this.y.redSqr();
    var c2 = this.z.redSqr();
    c2 = c2.redIAdd(c2);
    var d2 = this.curve._mulA(a2);
    var e2 = this.x.redAdd(this.y).redSqr().redISub(a2).redISub(b2);
    var g2 = d2.redAdd(b2);
    var f2 = g2.redSub(c2);
    var h2 = d2.redSub(b2);
    var nx = e2.redMul(f2);
    var ny = g2.redMul(h2);
    var nt = e2.redMul(h2);
    var nz = f2.redMul(g2);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b2 = this.x.redAdd(this.y).redSqr();
    var c2 = this.x.redSqr();
    var d2 = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e2;
    var h2;
    var j2;
    if (this.curve.twisted) {
      e2 = this.curve._mulA(c2);
      var f2 = e2.redAdd(d2);
      if (this.zOne) {
        nx = b2.redSub(c2).redSub(d2).redMul(f2.redSub(this.curve.two));
        ny = f2.redMul(e2.redSub(d2));
        nz = f2.redSqr().redSub(f2).redSub(f2);
      } else {
        h2 = this.z.redSqr();
        j2 = f2.redSub(h2).redISub(h2);
        nx = b2.redSub(c2).redISub(d2).redMul(j2);
        ny = f2.redMul(e2.redSub(d2));
        nz = f2.redMul(j2);
      }
    } else {
      e2 = c2.redAdd(d2);
      h2 = this.curve._mulC(this.z).redSqr();
      j2 = e2.redSub(h2).redSub(h2);
      nx = this.curve._mulC(b2.redISub(e2)).redMul(j2);
      ny = this.curve._mulC(e2).redMul(c2.redISub(d2));
      nz = e2.redMul(j2);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p2) {
    var a2 = this.y.redSub(this.x).redMul(p2.y.redSub(p2.x));
    var b2 = this.y.redAdd(this.x).redMul(p2.y.redAdd(p2.x));
    var c2 = this.t.redMul(this.curve.dd).redMul(p2.t);
    var d2 = this.z.redMul(p2.z.redAdd(p2.z));
    var e2 = b2.redSub(a2);
    var f2 = d2.redSub(c2);
    var g2 = d2.redAdd(c2);
    var h2 = b2.redAdd(a2);
    var nx = e2.redMul(f2);
    var ny = g2.redMul(h2);
    var nt = e2.redMul(h2);
    var nz = f2.redMul(g2);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projAdd = function _projAdd(p2) {
    var a2 = this.z.redMul(p2.z);
    var b2 = a2.redSqr();
    var c2 = this.x.redMul(p2.x);
    var d2 = this.y.redMul(p2.y);
    var e2 = this.curve.d.redMul(c2).redMul(d2);
    var f2 = b2.redSub(e2);
    var g2 = b2.redAdd(e2);
    var tmp = this.x.redAdd(this.y).redMul(p2.x.redAdd(p2.y)).redISub(c2).redISub(d2);
    var nx = a2.redMul(f2).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a2.redMul(g2).redMul(d2.redSub(this.curve._mulA(c2)));
      nz = f2.redMul(g2);
    } else {
      ny = a2.redMul(g2).redMul(d2.redSub(c2));
      nz = this.curve._mulC(f2).redMul(g2);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add2(p2) {
    if (this.isInfinity())
      return p2;
    if (p2.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p2);
    else
      return this._projAdd(p2);
  };
  Point.prototype.mul = function mul(k2) {
    if (this._hasDoubles(k2))
      return this.curve._fixedNafMul(this, k2);
    else
      return this.curve._wnafMul(this, k2);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    return this.curve._wnafMulAdd(1, [this, p2], [k1, k2], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(
      this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg()
    );
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x2) {
    var rx = x2.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x2.clone();
    var t2 = this.curve.redN.redMul(this.z);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  return edwards;
}
var hasRequiredCurve;
function requireCurve() {
  if (hasRequiredCurve) return curve;
  hasRequiredCurve = 1;
  (function(exports2) {
    var curve2 = exports2;
    curve2.base = requireBase$1();
    curve2.short = requireShort();
    curve2.mont = requireMont();
    curve2.edwards = requireEdwards();
  })(curve);
  return curve;
}
var curves = {};
var hash = {};
var utils = {};
var hasRequiredUtils;
function requireUtils() {
  if (hasRequiredUtils) return utils;
  hasRequiredUtils = 1;
  var assert2 = requireMinimalisticAssert();
  var inherits = requireInherits_browser();
  utils.inherits = inherits;
  function isSurrogatePair(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p2 = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c2 = msg.charCodeAt(i2);
          if (c2 < 128) {
            res[p2++] = c2;
          } else if (c2 < 2048) {
            res[p2++] = c2 >> 6 | 192;
            res[p2++] = c2 & 63 | 128;
          } else if (isSurrogatePair(msg, i2)) {
            c2 = 65536 + ((c2 & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p2++] = c2 >> 18 | 240;
            res[p2++] = c2 >> 12 & 63 | 128;
            res[p2++] = c2 >> 6 & 63 | 128;
            res[p2++] = c2 & 63 | 128;
          } else {
            res[p2++] = c2 >> 12 | 224;
            res[p2++] = c2 >> 6 & 63 | 128;
            res[p2++] = c2 & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  utils.toArray = toArray;
  function toHex(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2(msg[i2].toString(16));
    return res;
  }
  utils.toHex = toHex;
  function htonl(w2) {
    var res = w2 >>> 24 | w2 >>> 8 & 65280 | w2 << 8 & 16711680 | (w2 & 255) << 24;
    return res >>> 0;
  }
  utils.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w2 = msg[i2];
      if (endian === "little")
        w2 = htonl(w2);
      res += zero8(w2.toString(16));
    }
    return res;
  }
  utils.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  utils.zero8 = zero8;
  function join32(msg, start, end, endian) {
    var len2 = end - start;
    assert2(len2 % 4 === 0);
    var res = new Array(len2 / 4);
    for (var i2 = 0, k2 = start; i2 < res.length; i2++, k2 += 4) {
      var w2;
      if (endian === "big")
        w2 = msg[k2] << 24 | msg[k2 + 1] << 16 | msg[k2 + 2] << 8 | msg[k2 + 3];
      else
        w2 = msg[k2 + 3] << 24 | msg[k2 + 2] << 16 | msg[k2 + 1] << 8 | msg[k2];
      res[i2] = w2 >>> 0;
    }
    return res;
  }
  utils.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k2 = 0; i2 < msg.length; i2++, k2 += 4) {
      var m2 = msg[i2];
      if (endian === "big") {
        res[k2] = m2 >>> 24;
        res[k2 + 1] = m2 >>> 16 & 255;
        res[k2 + 2] = m2 >>> 8 & 255;
        res[k2 + 3] = m2 & 255;
      } else {
        res[k2 + 3] = m2 >>> 24;
        res[k2 + 2] = m2 >>> 16 & 255;
        res[k2 + 1] = m2 >>> 8 & 255;
        res[k2] = m2 & 255;
      }
    }
    return res;
  }
  utils.split32 = split32;
  function rotr32(w2, b2) {
    return w2 >>> b2 | w2 << 32 - b2;
  }
  utils.rotr32 = rotr32;
  function rotl32(w2, b2) {
    return w2 << b2 | w2 >>> 32 - b2;
  }
  utils.rotl32 = rotl32;
  function sum32(a2, b2) {
    return a2 + b2 >>> 0;
  }
  utils.sum32 = sum32;
  function sum32_3(a2, b2, c2) {
    return a2 + b2 + c2 >>> 0;
  }
  utils.sum32_3 = sum32_3;
  function sum32_4(a2, b2, c2, d2) {
    return a2 + b2 + c2 + d2 >>> 0;
  }
  utils.sum32_4 = sum32_4;
  function sum32_5(a2, b2, c2, d2, e2) {
    return a2 + b2 + c2 + d2 + e2 >>> 0;
  }
  utils.sum32_5 = sum32_5;
  function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils.sum64 = sum64;
  function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils.sum64_hi = sum64_hi;
  function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils.sum64_lo = sum64_lo;
  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh2, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh2 + carry;
    return hi >>> 0;
  }
  utils.sum64_4_hi = sum64_4_hi;
  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh2, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils.sum64_4_lo = sum64_4_lo;
  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh2, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh2 + eh + carry;
    return hi >>> 0;
  }
  utils.sum64_5_hi = sum64_5_hi;
  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh2, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  utils.sum64_5_lo = sum64_5_lo;
  function rotr64_hi(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  utils.rotr64_hi = rotr64_hi;
  function rotr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils.rotr64_lo = rotr64_lo;
  function shr64_hi(ah, al, num) {
    return ah >>> num;
  }
  utils.shr64_hi = shr64_hi;
  function shr64_lo(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils.shr64_lo = shr64_lo;
  return utils;
}
var common$1 = {};
var hasRequiredCommon$1;
function requireCommon$1() {
  if (hasRequiredCommon$1) return common$1;
  hasRequiredCommon$1 = 1;
  var utils2 = requireUtils();
  var assert2 = requireMinimalisticAssert();
  function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$1.BlockHash = BlockHash;
  BlockHash.prototype.update = function update(msg, enc) {
    msg = utils2.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils2.join32(msg, 0, msg.length - r2, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert2(this.pending === null);
    return this._digest(enc);
  };
  BlockHash.prototype._pad = function pad2() {
    var len2 = this.pendingTotal;
    var bytes2 = this._delta8;
    var k2 = bytes2 - (len2 + this.padLength) % bytes2;
    var res = new Array(k2 + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k2; i2++)
      res[i2] = 0;
    len2 <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 & 255;
    } else {
      res[i2++] = len2 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  return common$1;
}
var sha = {};
var common = {};
var hasRequiredCommon;
function requireCommon() {
  if (hasRequiredCommon) return common;
  hasRequiredCommon = 1;
  var utils2 = requireUtils();
  var rotr32 = utils2.rotr32;
  function ft_1(s2, x2, y2, z2) {
    if (s2 === 0)
      return ch32(x2, y2, z2);
    if (s2 === 1 || s2 === 3)
      return p32(x2, y2, z2);
    if (s2 === 2)
      return maj32(x2, y2, z2);
  }
  common.ft_1 = ft_1;
  function ch32(x2, y2, z2) {
    return x2 & y2 ^ ~x2 & z2;
  }
  common.ch32 = ch32;
  function maj32(x2, y2, z2) {
    return x2 & y2 ^ x2 & z2 ^ y2 & z2;
  }
  common.maj32 = maj32;
  function p32(x2, y2, z2) {
    return x2 ^ y2 ^ z2;
  }
  common.p32 = p32;
  function s0_256(x2) {
    return rotr32(x2, 2) ^ rotr32(x2, 13) ^ rotr32(x2, 22);
  }
  common.s0_256 = s0_256;
  function s1_256(x2) {
    return rotr32(x2, 6) ^ rotr32(x2, 11) ^ rotr32(x2, 25);
  }
  common.s1_256 = s1_256;
  function g0_256(x2) {
    return rotr32(x2, 7) ^ rotr32(x2, 18) ^ x2 >>> 3;
  }
  common.g0_256 = g0_256;
  function g1_256(x2) {
    return rotr32(x2, 17) ^ rotr32(x2, 19) ^ x2 >>> 10;
  }
  common.g1_256 = g1_256;
  return common;
}
var _1;
var hasRequired_1;
function require_1() {
  if (hasRequired_1) return _1;
  hasRequired_1 = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var shaCommon = requireCommon();
  var rotl32 = utils2.rotl32;
  var sum32 = utils2.sum32;
  var sum32_5 = utils2.sum32_5;
  var ft_1 = shaCommon.ft_1;
  var BlockHash = common2.BlockHash;
  var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function SHA12() {
    if (!(this instanceof SHA12))
      return new SHA12();
    BlockHash.call(this);
    this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ];
    this.W = new Array(80);
  }
  utils2.inherits(SHA12, BlockHash);
  _1 = SHA12;
  SHA12.blockSize = 512;
  SHA12.outSize = 160;
  SHA12.hmacStrength = 80;
  SHA12.padLength = 64;
  SHA12.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2++)
      W[i2] = rotl32(W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16], 1);
    var a2 = this.h[0];
    var b2 = this.h[1];
    var c2 = this.h[2];
    var d2 = this.h[3];
    var e2 = this.h[4];
    for (i2 = 0; i2 < W.length; i2++) {
      var s2 = ~~(i2 / 20);
      var t2 = sum32_5(rotl32(a2, 5), ft_1(s2, b2, c2, d2), e2, W[i2], sha1_K[s2]);
      e2 = d2;
      d2 = c2;
      c2 = rotl32(b2, 30);
      b2 = a2;
      a2 = t2;
    }
    this.h[0] = sum32(this.h[0], a2);
    this.h[1] = sum32(this.h[1], b2);
    this.h[2] = sum32(this.h[2], c2);
    this.h[3] = sum32(this.h[3], d2);
    this.h[4] = sum32(this.h[4], e2);
  };
  SHA12.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  return _1;
}
var _256;
var hasRequired_256;
function require_256() {
  if (hasRequired_256) return _256;
  hasRequired_256 = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var shaCommon = requireCommon();
  var assert2 = requireMinimalisticAssert();
  var sum32 = utils2.sum32;
  var sum32_4 = utils2.sum32_4;
  var sum32_5 = utils2.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash = common2.BlockHash;
  var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA2562() {
    if (!(this instanceof SHA2562))
      return new SHA2562();
    BlockHash.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils2.inherits(SHA2562, BlockHash);
  _256 = SHA2562;
  SHA2562.blockSize = 512;
  SHA2562.outSize = 256;
  SHA2562.hmacStrength = 192;
  SHA2562.padLength = 64;
  SHA2562.prototype._update = function _update(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2++)
      W[i2] = sum32_4(g1_256(W[i2 - 2]), W[i2 - 7], g0_256(W[i2 - 15]), W[i2 - 16]);
    var a2 = this.h[0];
    var b2 = this.h[1];
    var c2 = this.h[2];
    var d2 = this.h[3];
    var e2 = this.h[4];
    var f2 = this.h[5];
    var g2 = this.h[6];
    var h2 = this.h[7];
    assert2(this.k.length === W.length);
    for (i2 = 0; i2 < W.length; i2++) {
      var T1 = sum32_5(h2, s1_256(e2), ch32(e2, f2, g2), this.k[i2], W[i2]);
      var T2 = sum32(s0_256(a2), maj32(a2, b2, c2));
      h2 = g2;
      g2 = f2;
      f2 = e2;
      e2 = sum32(d2, T1);
      d2 = c2;
      c2 = b2;
      b2 = a2;
      a2 = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a2);
    this.h[1] = sum32(this.h[1], b2);
    this.h[2] = sum32(this.h[2], c2);
    this.h[3] = sum32(this.h[3], d2);
    this.h[4] = sum32(this.h[4], e2);
    this.h[5] = sum32(this.h[5], f2);
    this.h[6] = sum32(this.h[6], g2);
    this.h[7] = sum32(this.h[7], h2);
  };
  SHA2562.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  return _256;
}
var _224;
var hasRequired_224;
function require_224() {
  if (hasRequired_224) return _224;
  hasRequired_224 = 1;
  var utils2 = requireUtils();
  var SHA2562 = require_256();
  function SHA2242() {
    if (!(this instanceof SHA2242))
      return new SHA2242();
    SHA2562.call(this);
    this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  utils2.inherits(SHA2242, SHA2562);
  _224 = SHA2242;
  SHA2242.blockSize = 512;
  SHA2242.outSize = 224;
  SHA2242.hmacStrength = 192;
  SHA2242.padLength = 64;
  SHA2242.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h.slice(0, 7), "big");
    else
      return utils2.split32(this.h.slice(0, 7), "big");
  };
  return _224;
}
var _512;
var hasRequired_512;
function require_512() {
  if (hasRequired_512) return _512;
  hasRequired_512 = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var assert2 = requireMinimalisticAssert();
  var rotr64_hi = utils2.rotr64_hi;
  var rotr64_lo = utils2.rotr64_lo;
  var shr64_hi = utils2.shr64_hi;
  var shr64_lo = utils2.shr64_lo;
  var sum64 = utils2.sum64;
  var sum64_hi = utils2.sum64_hi;
  var sum64_lo = utils2.sum64_lo;
  var sum64_4_hi = utils2.sum64_4_hi;
  var sum64_4_lo = utils2.sum64_4_lo;
  var sum64_5_hi = utils2.sum64_5_hi;
  var sum64_5_lo = utils2.sum64_5_lo;
  var BlockHash = common2.BlockHash;
  var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function SHA5122() {
    if (!(this instanceof SHA5122))
      return new SHA5122();
    BlockHash.call(this);
    this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils2.inherits(SHA5122, BlockHash);
  _512 = SHA5122;
  SHA5122.blockSize = 1024;
  SHA5122.outSize = 512;
  SHA5122.hmacStrength = 192;
  SHA5122.padLength = 128;
  SHA5122.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    for (var i2 = 0; i2 < 32; i2++)
      W[i2] = msg[start + i2];
    for (; i2 < W.length; i2 += 2) {
      var c0_hi = g1_512_hi(W[i2 - 4], W[i2 - 3]);
      var c0_lo = g1_512_lo(W[i2 - 4], W[i2 - 3]);
      var c1_hi = W[i2 - 14];
      var c1_lo = W[i2 - 13];
      var c2_hi = g0_512_hi(W[i2 - 30], W[i2 - 29]);
      var c2_lo = g0_512_lo(W[i2 - 30], W[i2 - 29]);
      var c3_hi = W[i2 - 32];
      var c3_lo = W[i2 - 31];
      W[i2] = sum64_4_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
      W[i2 + 1] = sum64_4_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
    }
  };
  SHA5122.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh2 = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert2(this.k.length === W.length);
    for (var i2 = 0; i2 < W.length; i2 += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i2];
      var c3_lo = this.k[i2 + 1];
      var c4_hi = W[i2];
      var c4_lo = W[i2 + 1];
      var T1_hi = sum64_5_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      var T1_lo = sum64_5_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh2, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh2 = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh2, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA5122.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "big");
    else
      return utils2.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  return _512;
}
var _384;
var hasRequired_384;
function require_384() {
  if (hasRequired_384) return _384;
  hasRequired_384 = 1;
  var utils2 = requireUtils();
  var SHA5122 = require_512();
  function SHA3842() {
    if (!(this instanceof SHA3842))
      return new SHA3842();
    SHA5122.call(this);
    this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  utils2.inherits(SHA3842, SHA5122);
  _384 = SHA3842;
  SHA3842.blockSize = 1024;
  SHA3842.outSize = 384;
  SHA3842.hmacStrength = 192;
  SHA3842.padLength = 128;
  SHA3842.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h.slice(0, 12), "big");
    else
      return utils2.split32(this.h.slice(0, 12), "big");
  };
  return _384;
}
var hasRequiredSha;
function requireSha() {
  if (hasRequiredSha) return sha;
  hasRequiredSha = 1;
  sha.sha1 = require_1();
  sha.sha224 = require_224();
  sha.sha256 = require_256();
  sha.sha384 = require_384();
  sha.sha512 = require_512();
  return sha;
}
var ripemd = {};
var hasRequiredRipemd;
function requireRipemd() {
  if (hasRequiredRipemd) return ripemd;
  hasRequiredRipemd = 1;
  var utils2 = requireUtils();
  var common2 = requireCommon$1();
  var rotl32 = utils2.rotl32;
  var sum32 = utils2.sum32;
  var sum32_3 = utils2.sum32_3;
  var sum32_4 = utils2.sum32_4;
  var BlockHash = common2.BlockHash;
  function RIPEMD1602() {
    if (!(this instanceof RIPEMD1602))
      return new RIPEMD1602();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils2.inherits(RIPEMD1602, BlockHash);
  ripemd.ripemd160 = RIPEMD1602;
  RIPEMD1602.blockSize = 512;
  RIPEMD1602.outSize = 160;
  RIPEMD1602.hmacStrength = 192;
  RIPEMD1602.padLength = 64;
  RIPEMD1602.prototype._update = function update(msg, start) {
    var A2 = this.h[0];
    var B = this.h[1];
    var C2 = this.h[2];
    var D2 = this.h[3];
    var E2 = this.h[4];
    var Ah = A2;
    var Bh = B;
    var Ch = C2;
    var Dh = D2;
    var Eh = E2;
    for (var j2 = 0; j2 < 80; j2++) {
      var T2 = sum32(
        rotl32(
          sum32_4(A2, f2(j2, B, C2, D2), msg[r2[j2] + start], K(j2)),
          s2[j2]
        ),
        E2
      );
      A2 = E2;
      E2 = D2;
      D2 = rotl32(C2, 10);
      C2 = B;
      B = T2;
      T2 = sum32(
        rotl32(
          sum32_4(Ah, f2(79 - j2, Bh, Ch, Dh), msg[rh[j2] + start], Kh(j2)),
          sh[j2]
        ),
        Eh
      );
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T2;
    }
    T2 = sum32_3(this.h[1], C2, Dh);
    this.h[1] = sum32_3(this.h[2], D2, Eh);
    this.h[2] = sum32_3(this.h[3], E2, Ah);
    this.h[3] = sum32_3(this.h[4], A2, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T2;
  };
  RIPEMD1602.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils2.toHex32(this.h, "little");
    else
      return utils2.split32(this.h, "little");
  };
  function f2(j2, x2, y2, z2) {
    if (j2 <= 15)
      return x2 ^ y2 ^ z2;
    else if (j2 <= 31)
      return x2 & y2 | ~x2 & z2;
    else if (j2 <= 47)
      return (x2 | ~y2) ^ z2;
    else if (j2 <= 63)
      return x2 & z2 | y2 & ~z2;
    else
      return x2 ^ (y2 | ~z2);
  }
  function K(j2) {
    if (j2 <= 15)
      return 0;
    else if (j2 <= 31)
      return 1518500249;
    else if (j2 <= 47)
      return 1859775393;
    else if (j2 <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j2) {
    if (j2 <= 15)
      return 1352829926;
    else if (j2 <= 31)
      return 1548603684;
    else if (j2 <= 47)
      return 1836072691;
    else if (j2 <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r2 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var s2 = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  return ripemd;
}
var hmac$1;
var hasRequiredHmac;
function requireHmac() {
  if (hasRequiredHmac) return hmac$1;
  hasRequiredHmac = 1;
  var utils2 = requireUtils();
  var assert2 = requireMinimalisticAssert();
  function Hmac(hash2, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash2, key2, enc);
    this.Hash = hash2;
    this.blockSize = hash2.blockSize / 8;
    this.outSize = hash2.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils2.toArray(key2, enc));
  }
  hmac$1 = Hmac;
  Hmac.prototype._init = function init(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    assert2(key2.length <= this.blockSize);
    for (var i2 = key2.length; i2 < this.blockSize; i2++)
      key2.push(0);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  return hmac$1;
}
var hasRequiredHash;
function requireHash() {
  if (hasRequiredHash) return hash;
  hasRequiredHash = 1;
  (function(exports2) {
    var hash2 = exports2;
    hash2.utils = requireUtils();
    hash2.common = requireCommon$1();
    hash2.sha = requireSha();
    hash2.ripemd = requireRipemd();
    hash2.hmac = requireHmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  })(hash);
  return hash;
}
var secp256k1$1;
var hasRequiredSecp256k1;
function requireSecp256k1() {
  if (hasRequiredSecp256k1) return secp256k1$1;
  hasRequiredSecp256k1 = 1;
  secp256k1$1 = {
    doubles: {
      step: 4,
      points: [
        [
          "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
          "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
        ],
        [
          "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
          "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
        ],
        [
          "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
          "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
        ],
        [
          "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
          "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
        ],
        [
          "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
          "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
        ],
        [
          "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
          "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
        ],
        [
          "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
          "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
        ],
        [
          "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
          "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
        ],
        [
          "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
          "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
        ],
        [
          "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
          "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
        ],
        [
          "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
          "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
        ],
        [
          "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
          "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
        ],
        [
          "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
          "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
        ],
        [
          "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
          "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
        ],
        [
          "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
          "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
        ],
        [
          "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
          "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
        ],
        [
          "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
          "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
        ],
        [
          "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
          "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
        ],
        [
          "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
          "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
        ],
        [
          "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
          "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
        ],
        [
          "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
          "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
        ],
        [
          "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
          "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
        ],
        [
          "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
          "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
        ],
        [
          "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
          "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
        ],
        [
          "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
          "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
        ],
        [
          "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
          "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
        ],
        [
          "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
          "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
        ],
        [
          "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
          "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
        ],
        [
          "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
          "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
        ],
        [
          "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
          "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
        ],
        [
          "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
          "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
        ],
        [
          "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
          "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
        ],
        [
          "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
          "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
        ],
        [
          "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
          "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
        ],
        [
          "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
          "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
        ],
        [
          "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
          "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
        ],
        [
          "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
          "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
        ],
        [
          "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
          "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
        ],
        [
          "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
          "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
        ],
        [
          "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
          "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
        ],
        [
          "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
          "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
        ],
        [
          "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
          "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
        ],
        [
          "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
          "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
        ],
        [
          "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
          "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
        ],
        [
          "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
          "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
        ],
        [
          "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
          "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
        ],
        [
          "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
          "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
        ],
        [
          "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
          "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
        ],
        [
          "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
          "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
        ],
        [
          "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
          "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
        ],
        [
          "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
          "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
        ],
        [
          "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
          "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
        ],
        [
          "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
          "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
        ],
        [
          "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
          "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
        ],
        [
          "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
          "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
        ],
        [
          "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
          "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
        ],
        [
          "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
          "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
        ],
        [
          "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
          "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
        ],
        [
          "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
          "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
        ],
        [
          "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
          "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
        ],
        [
          "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
          "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
        ],
        [
          "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
          "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
        ],
        [
          "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
          "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
        ],
        [
          "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
          "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
        ],
        [
          "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
          "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
        ]
      ]
    },
    naf: {
      wnd: 7,
      points: [
        [
          "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
          "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
        ],
        [
          "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
          "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
        ],
        [
          "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
          "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
        ],
        [
          "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
          "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
        ],
        [
          "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
          "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
        ],
        [
          "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
          "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
        ],
        [
          "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
          "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
        ],
        [
          "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
          "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
        ],
        [
          "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
          "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
        ],
        [
          "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
          "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
        ],
        [
          "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
          "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
        ],
        [
          "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
          "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
        ],
        [
          "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
          "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
        ],
        [
          "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
          "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
        ],
        [
          "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
          "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
        ],
        [
          "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
          "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
        ],
        [
          "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
          "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
        ],
        [
          "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
          "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
        ],
        [
          "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
          "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
        ],
        [
          "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
          "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
        ],
        [
          "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
          "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
        ],
        [
          "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
          "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
        ],
        [
          "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
          "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
        ],
        [
          "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
          "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
        ],
        [
          "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
          "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
        ],
        [
          "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
          "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
        ],
        [
          "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
          "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
        ],
        [
          "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
          "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
        ],
        [
          "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
          "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
        ],
        [
          "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
          "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
        ],
        [
          "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
          "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
        ],
        [
          "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
          "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
        ],
        [
          "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
          "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
        ],
        [
          "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
          "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
        ],
        [
          "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
          "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
        ],
        [
          "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
          "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
        ],
        [
          "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
          "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
        ],
        [
          "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
          "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
        ],
        [
          "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
          "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
        ],
        [
          "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
          "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
        ],
        [
          "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
          "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
        ],
        [
          "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
          "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
        ],
        [
          "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
          "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
        ],
        [
          "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
          "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
        ],
        [
          "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
          "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
        ],
        [
          "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
          "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
        ],
        [
          "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
          "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
        ],
        [
          "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
          "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
        ],
        [
          "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
          "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
        ],
        [
          "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
          "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
        ],
        [
          "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
          "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
        ],
        [
          "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
          "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
        ],
        [
          "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
          "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
        ],
        [
          "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
          "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
        ],
        [
          "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
          "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
        ],
        [
          "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
          "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
        ],
        [
          "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
          "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
        ],
        [
          "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
          "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
        ],
        [
          "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
          "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
        ],
        [
          "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
          "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
        ],
        [
          "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
          "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
        ],
        [
          "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
          "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
        ],
        [
          "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
          "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
        ],
        [
          "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
          "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
        ],
        [
          "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
          "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
        ],
        [
          "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
          "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
        ],
        [
          "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
          "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
        ],
        [
          "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
          "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
        ],
        [
          "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
          "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
        ],
        [
          "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
          "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
        ],
        [
          "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
          "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
        ],
        [
          "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
          "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
        ],
        [
          "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
          "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
        ],
        [
          "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
          "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
        ],
        [
          "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
          "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
        ],
        [
          "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
          "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
        ],
        [
          "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
          "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
        ],
        [
          "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
          "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
        ],
        [
          "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
          "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
        ],
        [
          "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
          "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
        ],
        [
          "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
          "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
        ],
        [
          "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
          "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
        ],
        [
          "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
          "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
        ],
        [
          "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
          "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
        ],
        [
          "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
          "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
        ],
        [
          "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
          "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
        ],
        [
          "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
          "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
        ],
        [
          "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
          "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
        ],
        [
          "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
          "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
        ],
        [
          "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
          "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
        ],
        [
          "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
          "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
        ],
        [
          "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
          "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
        ],
        [
          "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
          "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
        ],
        [
          "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
          "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
        ],
        [
          "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
          "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
        ],
        [
          "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
          "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
        ],
        [
          "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
          "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
        ],
        [
          "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
          "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
        ],
        [
          "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
          "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
        ],
        [
          "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
          "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
        ],
        [
          "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
          "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
        ],
        [
          "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
          "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
        ],
        [
          "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
          "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
        ],
        [
          "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
          "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
        ],
        [
          "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
          "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
        ],
        [
          "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
          "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
        ],
        [
          "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
          "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
        ],
        [
          "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
          "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
        ],
        [
          "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
          "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
        ],
        [
          "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
          "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
        ],
        [
          "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
          "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
        ],
        [
          "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
          "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
        ],
        [
          "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
          "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
        ],
        [
          "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
          "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
        ],
        [
          "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
          "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
        ],
        [
          "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
          "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
        ],
        [
          "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
          "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
        ],
        [
          "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
          "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
        ],
        [
          "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
          "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
        ],
        [
          "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
          "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
        ],
        [
          "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
          "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
        ],
        [
          "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
          "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
        ],
        [
          "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
          "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
        ],
        [
          "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
          "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
        ],
        [
          "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
          "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
        ],
        [
          "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
          "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
        ],
        [
          "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
          "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
        ]
      ]
    }
  };
  return secp256k1$1;
}
var hasRequiredCurves;
function requireCurves() {
  if (hasRequiredCurves) return curves;
  hasRequiredCurves = 1;
  (function(exports2) {
    var curves2 = exports2;
    var hash2 = requireHash();
    var curve2 = requireCurve();
    var utils2 = requireUtils$1();
    var assert2 = utils2.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve2.short(options);
      else if (options.type === "edwards")
        this.curve = new curve2.edwards(options);
      else
        this.curve = new curve2.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves2.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves2, name2, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve3 = new PresetCurve(options);
          Object.defineProperty(curves2, name2, {
            configurable: true,
            enumerable: true,
            value: curve3
          });
          return curve3;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = requireSecp256k1();
    } catch (e2) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  })(curves);
  return curves;
}
var hmacDrbg;
var hasRequiredHmacDrbg;
function requireHmacDrbg() {
  if (hasRequiredHmacDrbg) return hmacDrbg;
  hasRequiredHmacDrbg = 1;
  var hash2 = requireHash();
  var utils2 = requireUtils$2();
  var assert2 = requireMinimalisticAssert();
  function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG))
      return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils2.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = utils2.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils2.toArray(options.pers, options.persEnc || "hex");
    assert2(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce, pers);
  }
  hmacDrbg = HmacDRBG;
  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i2 = 0; i2 < this.V.length; i2++) {
      this.K[i2] = 0;
      this.V[i2] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG.prototype._hmac = function hmac2() {
    return new hash2.hmac(this.hash, this.K);
  };
  HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add2, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add2;
      add2 = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils2.toArray(entropy, entropyEnc);
    add2 = utils2.toArray(add2, addEnc);
    assert2(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._update(entropy.concat(add2 || []));
    this._reseed = 1;
  };
  HmacDRBG.prototype.generate = function generate(len2, enc, add2, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add2;
      add2 = enc;
      enc = null;
    }
    if (add2) {
      add2 = utils2.toArray(add2, addEnc || "hex");
      this._update(add2);
    }
    var temp = [];
    while (temp.length < len2) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len2);
    this._update(add2);
    this._reseed++;
    return utils2.encode(res, enc);
  };
  return hmacDrbg;
}
var key$1;
var hasRequiredKey$1;
function requireKey$1() {
  if (hasRequiredKey$1) return key$1;
  hasRequiredKey$1 = 1;
  var BN = requireBn$1();
  var utils2 = requireUtils$1();
  var assert2 = utils2.assert;
  function KeyPair(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  key$1 = KeyPair;
  KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(ec2, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair)
      return priv;
    return new KeyPair(ec2, {
      priv,
      privEnc: enc
    });
  };
  KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new BN(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert2(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert2(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert2(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair.prototype.sign = function sign2(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair.prototype.verify = function verify2(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
  };
  KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  return key$1;
}
var signature$1;
var hasRequiredSignature$1;
function requireSignature$1() {
  if (hasRequiredSignature$1) return signature$1;
  hasRequiredSignature$1 = 1;
  var BN = requireBn$1();
  var utils2 = requireUtils$1();
  var assert2 = utils2.assert;
  function Signature(options, enc) {
    if (options instanceof Signature)
      return options;
    if (this._importDER(options, enc))
      return;
    assert2(options.r && options.s, "Signature without r or s");
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  signature$1 = Signature;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p2) {
    var initial = buf[p2.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    if (buf[p2.place] === 0) {
      return false;
    }
    var val = 0;
    for (var i2 = 0, off = p2.place; i2 < octetLen; i2++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p2.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i2 = 0;
    var len2 = buf.length - 1;
    while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len2) {
      i2++;
    }
    if (i2 === 0) {
      return buf;
    }
    return buf.slice(i2);
  }
  Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils2.toArray(data, enc);
    var p2 = new Position();
    if (data[p2.place++] !== 48) {
      return false;
    }
    var len2 = getLength(data, p2);
    if (len2 === false) {
      return false;
    }
    if (len2 + p2.place !== data.length) {
      return false;
    }
    if (data[p2.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p2);
    if (rlen === false) {
      return false;
    }
    if ((data[p2.place] & 128) !== 0) {
      return false;
    }
    var r2 = data.slice(p2.place, rlen + p2.place);
    p2.place += rlen;
    if (data[p2.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p2);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p2.place) {
      return false;
    }
    if ((data[p2.place] & 128) !== 0) {
      return false;
    }
    var s2 = data.slice(p2.place, slen + p2.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN(r2);
    this.s = new BN(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len2) {
    if (len2 < 128) {
      arr.push(len2);
      return;
    }
    var octets = 1 + (Math.log(len2) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len2 >>> (octets << 3) & 255);
    }
    arr.push(len2);
  }
  Signature.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils2.encode(res, enc);
  };
  return signature$1;
}
var ec;
var hasRequiredEc;
function requireEc() {
  if (hasRequiredEc) return ec;
  hasRequiredEc = 1;
  var BN = requireBn$1();
  var HmacDRBG = requireHmacDrbg();
  var utils2 = requireUtils$1();
  var curves2 = requireCurves();
  var rand = requireBrorand();
  var assert2 = utils2.assert;
  var KeyPair = requireKey$1();
  var Signature = requireSignature$1();
  function EC(options) {
    if (!(this instanceof EC))
      return new EC(options);
    if (typeof options === "string") {
      assert2(
        Object.prototype.hasOwnProperty.call(curves2, options),
        "Unknown curve " + options
      );
      options = curves2[options];
    }
    if (options instanceof curves2.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  ec = EC;
  EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
  };
  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
  };
  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
  };
  EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes2 = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for (; ; ) {
      var priv = new BN(drbg.generate(bytes2));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC.prototype.sign = function sign2(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new BN(msg, 16));
    var bytes2 = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes2);
    var nonce = msg.toArray("be", bytes2);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN(1));
    for (var iter = 0; ; iter++) {
      var k2 = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
      k2 = this._truncateToN(k2, true);
      if (k2.cmpn(1) <= 0 || k2.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k2);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k2.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new Signature({ r: r2, s: s2, recoveryParam });
    }
  };
  EC.prototype.verify = function verify2(msg, signature2, key2, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature2 = new Signature(signature2, "hex");
    var r2 = signature2.r;
    var s2 = signature2.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p2;
    if (!this.curve._maxwellTrick) {
      p2 = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p2.isInfinity())
        return false;
      return p2.getX().umod(this.n).cmp(r2) === 0;
    }
    p2 = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p2.isInfinity())
      return false;
    return p2.eqXToP(r2);
  };
  EC.prototype.recoverPubKey = function(msg, signature2, j2, enc) {
    assert2((3 & j2) === j2, "The recovery param is more than two bits");
    signature2 = new Signature(signature2, enc);
    var n2 = this.n;
    var e2 = new BN(msg);
    var r2 = signature2.r;
    var s2 = signature2.s;
    var isYOdd = j2 & 1;
    var isSecondKey = j2 >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature2.r.invm(n2);
    var s1 = n2.sub(e2).mul(rInv).umod(n2);
    var s22 = s2.mul(rInv).umod(n2);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC.prototype.getKeyRecoveryParam = function(e2, signature2, Q2, enc) {
    signature2 = new Signature(signature2, enc);
    if (signature2.recoveryParam !== null)
      return signature2.recoveryParam;
    for (var i2 = 0; i2 < 4; i2++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e2, signature2, i2);
      } catch (e3) {
        continue;
      }
      if (Qprime.eq(Q2))
        return i2;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  return ec;
}
var key;
var hasRequiredKey;
function requireKey() {
  if (hasRequiredKey) return key;
  hasRequiredKey = 1;
  var utils2 = requireUtils$1();
  var assert2 = utils2.assert;
  var parseBytes = utils2.parseBytes;
  var cachedProperty = utils2.cachedProperty;
  function KeyPair(eddsa2, params) {
    this.eddsa = eddsa2;
    this._secret = parseBytes(params.secret);
    if (eddsa2.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes(params.pub);
  }
  KeyPair.fromPublic = function fromPublic(eddsa2, pub) {
    if (pub instanceof KeyPair)
      return pub;
    return new KeyPair(eddsa2, { pub });
  };
  KeyPair.fromSecret = function fromSecret(eddsa2, secret) {
    if (secret instanceof KeyPair)
      return secret;
    return new KeyPair(eddsa2, { secret });
  };
  KeyPair.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty(KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty(KeyPair, "pub", function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty(KeyPair, "privBytes", function privBytes() {
    var eddsa2 = this.eddsa;
    var hash2 = this.hash();
    var lastIx = eddsa2.encodingLength - 1;
    var a2 = hash2.slice(0, eddsa2.encodingLength);
    a2[0] &= 248;
    a2[lastIx] &= 127;
    a2[lastIx] |= 64;
    return a2;
  });
  cachedProperty(KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty(KeyPair, "hash", function hash2() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair.prototype.sign = function sign2(message) {
    assert2(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
  };
  KeyPair.prototype.verify = function verify2(message, sig) {
    return this.eddsa.verify(message, sig, this);
  };
  KeyPair.prototype.getSecret = function getSecret(enc) {
    assert2(this._secret, "KeyPair is public only");
    return utils2.encode(this.secret(), enc);
  };
  KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils2.encode(this.pubBytes(), enc);
  };
  key = KeyPair;
  return key;
}
var signature;
var hasRequiredSignature;
function requireSignature() {
  if (hasRequiredSignature) return signature;
  hasRequiredSignature = 1;
  var BN = requireBn$1();
  var utils2 = requireUtils$1();
  var assert2 = utils2.assert;
  var cachedProperty = utils2.cachedProperty;
  var parseBytes = utils2.parseBytes;
  function Signature(eddsa2, sig) {
    this.eddsa = eddsa2;
    if (typeof sig !== "object")
      sig = parseBytes(sig);
    if (Array.isArray(sig)) {
      assert2(sig.length === eddsa2.encodingLength * 2, "Signature has invalid size");
      sig = {
        R: sig.slice(0, eddsa2.encodingLength),
        S: sig.slice(eddsa2.encodingLength)
      };
    }
    assert2(sig.R && sig.S, "Signature without R or S");
    if (eddsa2.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature, "S", function S2() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature, "R", function R2() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature.prototype.toHex = function toHex() {
    return utils2.encode(this.toBytes(), "hex").toUpperCase();
  };
  signature = Signature;
  return signature;
}
var eddsa;
var hasRequiredEddsa;
function requireEddsa() {
  if (hasRequiredEddsa) return eddsa;
  hasRequiredEddsa = 1;
  var hash2 = requireHash();
  var curves2 = requireCurves();
  var utils2 = requireUtils$1();
  var assert2 = utils2.assert;
  var parseBytes = utils2.parseBytes;
  var KeyPair = requireKey();
  var Signature = requireSignature();
  function EDDSA(curve2) {
    assert2(curve2 === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA))
      return new EDDSA(curve2);
    curve2 = curves2[curve2].curve;
    this.curve = curve2;
    this.g = curve2.g;
    this.g.precompute(curve2.n.bitLength() + 1);
    this.pointClass = curve2.point().constructor;
    this.encodingLength = Math.ceil(curve2.n.bitLength() / 8);
    this.hash = hash2.sha512;
  }
  eddsa = EDDSA;
  EDDSA.prototype.sign = function sign2(message, secret) {
    message = parseBytes(message);
    var key2 = this.keyFromSecret(secret);
    var r2 = this.hashInt(key2.messagePrefix(), message);
    var R2 = this.g.mul(r2);
    var Rencoded = this.encodePoint(R2);
    var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
    var S2 = r2.add(s_).umod(this.curve.n);
    return this.makeSignature({ R: R2, S: S2, Rencoded });
  };
  EDDSA.prototype.verify = function verify2(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
      return false;
    }
    var key2 = this.keyFromPublic(pub);
    var h2 = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key2.pub().mul(h2));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash3 = this.hash();
    for (var i2 = 0; i2 < arguments.length; i2++)
      hash3.update(arguments[i2]);
    return utils2.intFromLE(hash3.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes2) {
    bytes2 = utils2.parseBytes(bytes2);
    var lastIx = bytes2.length - 1;
    var normed = bytes2.slice(0, lastIx).concat(bytes2[lastIx] & ~128);
    var xIsOdd = (bytes2[lastIx] & 128) !== 0;
    var y2 = utils2.intFromLE(normed);
    return this.curve.pointFromY(y2, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes2) {
    return utils2.intFromLE(bytes2);
  };
  EDDSA.prototype.isPoint = function isPoint2(val) {
    return val instanceof this.pointClass;
  };
  return eddsa;
}
var hasRequiredElliptic;
function requireElliptic() {
  if (hasRequiredElliptic) return elliptic;
  hasRequiredElliptic = 1;
  (function(exports2) {
    var elliptic2 = exports2;
    elliptic2.version = require$$0.version;
    elliptic2.utils = requireUtils$1();
    elliptic2.rand = requireBrorand();
    elliptic2.curve = requireCurve();
    elliptic2.curves = requireCurves();
    elliptic2.ec = requireEc();
    elliptic2.eddsa = requireEddsa();
  })(elliptic);
  return elliptic;
}
var asn1$1 = {};
var asn1 = {};
var api = {};
var vmBrowserify = {};
var hasRequiredVmBrowserify;
function requireVmBrowserify() {
  if (hasRequiredVmBrowserify) return vmBrowserify;
  hasRequiredVmBrowserify = 1;
  (function(exports) {
    var indexOf = function(xs, item) {
      if (xs.indexOf) return xs.indexOf(item);
      else for (var i2 = 0; i2 < xs.length; i2++) {
        if (xs[i2] === item) return i2;
      }
      return -1;
    };
    var Object_keys = function(obj) {
      if (Object.keys) return Object.keys(obj);
      else {
        var res = [];
        for (var key2 in obj) res.push(key2);
        return res;
      }
    };
    var forEach = function(xs, fn) {
      if (xs.forEach) return xs.forEach(fn);
      else for (var i2 = 0; i2 < xs.length; i2++) {
        fn(xs[i2], i2, xs);
      }
    };
    var defineProp = function() {
      try {
        Object.defineProperty({}, "_", {});
        return function(obj, name2, value3) {
          Object.defineProperty(obj, name2, {
            writable: true,
            enumerable: false,
            configurable: true,
            value: value3
          });
        };
      } catch (e2) {
        return function(obj, name2, value3) {
          obj[name2] = value3;
        };
      }
    }();
    var globals = [
      "Array",
      "Boolean",
      "Date",
      "Error",
      "EvalError",
      "Function",
      "Infinity",
      "JSON",
      "Math",
      "NaN",
      "Number",
      "Object",
      "RangeError",
      "ReferenceError",
      "RegExp",
      "String",
      "SyntaxError",
      "TypeError",
      "URIError",
      "decodeURI",
      "decodeURIComponent",
      "encodeURI",
      "encodeURIComponent",
      "escape",
      "eval",
      "isFinite",
      "isNaN",
      "parseFloat",
      "parseInt",
      "undefined",
      "unescape"
    ];
    function Context() {
    }
    Context.prototype = {};
    var Script = exports.Script = function NodeScript(code2) {
      if (!(this instanceof Script)) return new Script(code2);
      this.code = code2;
    };
    Script.prototype.runInContext = function(context) {
      if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
      }
      var iframe = document.createElement("iframe");
      if (!iframe.style) iframe.style = {};
      iframe.style.display = "none";
      document.body.appendChild(iframe);
      var win = iframe.contentWindow;
      var wEval = win.eval, wExecScript = win.execScript;
      if (!wEval && wExecScript) {
        wExecScript.call(win, "null");
        wEval = win.eval;
      }
      forEach(Object_keys(context), function(key2) {
        win[key2] = context[key2];
      });
      forEach(globals, function(key2) {
        if (context[key2]) {
          win[key2] = context[key2];
        }
      });
      var winKeys = Object_keys(win);
      var res = wEval.call(win, this.code);
      forEach(Object_keys(win), function(key2) {
        if (key2 in context || indexOf(winKeys, key2) === -1) {
          context[key2] = win[key2];
        }
      });
      forEach(globals, function(key2) {
        if (!(key2 in context)) {
          defineProp(context, key2, win[key2]);
        }
      });
      document.body.removeChild(iframe);
      return res;
    };
    Script.prototype.runInThisContext = function() {
      return eval(this.code);
    };
    Script.prototype.runInNewContext = function(context) {
      var ctx = Script.createContext(context);
      var res = this.runInContext(ctx);
      if (context) {
        forEach(Object_keys(ctx), function(key2) {
          context[key2] = ctx[key2];
        });
      }
      return res;
    };
    forEach(Object_keys(Script.prototype), function(name2) {
      exports[name2] = Script[name2] = function(code2) {
        var s2 = Script(code2);
        return s2[name2].apply(s2, [].slice.call(arguments, 1));
      };
    });
    exports.isContext = function(context) {
      return context instanceof Context;
    };
    exports.createScript = function(code2) {
      return exports.Script(code2);
    };
    exports.createContext = Script.createContext = function(context) {
      var copy = new Context();
      if (typeof context === "object") {
        forEach(Object_keys(context), function(key2) {
          copy[key2] = context[key2];
        });
      }
      return copy;
    };
  })(vmBrowserify);
  return vmBrowserify;
}
var hasRequiredApi;
function requireApi() {
  if (hasRequiredApi) return api;
  hasRequiredApi = 1;
  (function(exports2) {
    var asn12 = requireAsn1$1();
    var inherits = requireInherits_browser();
    var api2 = exports2;
    api2.define = function define(name2, body) {
      return new Entity(name2, body);
    };
    function Entity(name2, body) {
      this.name = name2;
      this.body = body;
      this.decoders = {};
      this.encoders = {};
    }
    Entity.prototype._createNamed = function createNamed(base2) {
      var named;
      try {
        named = requireVmBrowserify().runInThisContext(
          "(function " + this.name + "(entity) {\n  this._initNamed(entity);\n})"
        );
      } catch (e2) {
        named = function(entity) {
          this._initNamed(entity);
        };
      }
      inherits(named, base2);
      named.prototype._initNamed = function initnamed(entity) {
        base2.call(this, entity);
      };
      return new named(this);
    };
    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || "der";
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(asn12.decoders[enc]);
      return this.decoders[enc];
    };
    Entity.prototype.decode = function decode2(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };
    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || "der";
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(asn12.encoders[enc]);
      return this.encoders[enc];
    };
    Entity.prototype.encode = function encode2(data, enc, reporter2) {
      return this._getEncoder(enc).encode(data, reporter2);
    };
  })(api);
  return api;
}
var base = {};
var reporter = {};
var hasRequiredReporter;
function requireReporter() {
  if (hasRequiredReporter) return reporter;
  hasRequiredReporter = 1;
  var inherits = requireInherits_browser();
  function Reporter(options) {
    this._reporterState = {
      obj: null,
      path: [],
      options: options || {},
      errors: []
    };
  }
  reporter.Reporter = Reporter;
  Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
  };
  Reporter.prototype.save = function save() {
    var state2 = this._reporterState;
    return { obj: state2.obj, pathLen: state2.path.length };
  };
  Reporter.prototype.restore = function restore(data) {
    var state2 = this._reporterState;
    state2.obj = data.obj;
    state2.path = state2.path.slice(0, data.pathLen);
  };
  Reporter.prototype.enterKey = function enterKey(key2) {
    return this._reporterState.path.push(key2);
  };
  Reporter.prototype.exitKey = function exitKey(index) {
    var state2 = this._reporterState;
    state2.path = state2.path.slice(0, index - 1);
  };
  Reporter.prototype.leaveKey = function leaveKey(index, key2, value3) {
    var state2 = this._reporterState;
    this.exitKey(index);
    if (state2.obj !== null)
      state2.obj[key2] = value3;
  };
  Reporter.prototype.path = function path() {
    return this._reporterState.path.join("/");
  };
  Reporter.prototype.enterObject = function enterObject() {
    var state2 = this._reporterState;
    var prev = state2.obj;
    state2.obj = {};
    return prev;
  };
  Reporter.prototype.leaveObject = function leaveObject(prev) {
    var state2 = this._reporterState;
    var now = state2.obj;
    state2.obj = prev;
    return now;
  };
  Reporter.prototype.error = function error(msg) {
    var err;
    var state2 = this._reporterState;
    var inherited = msg instanceof ReporterError;
    if (inherited) {
      err = msg;
    } else {
      err = new ReporterError(state2.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
      }).join(""), msg.message || msg, msg.stack);
    }
    if (!state2.options.partial)
      throw err;
    if (!inherited)
      state2.errors.push(err);
    return err;
  };
  Reporter.prototype.wrapResult = function wrapResult(result) {
    var state2 = this._reporterState;
    if (!state2.options.partial)
      return result;
    return {
      result: this.isError(result) ? null : result,
      errors: state2.errors
    };
  };
  function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
  }
  inherits(ReporterError, Error);
  ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, ReporterError);
    if (!this.stack) {
      try {
        throw new Error(this.message);
      } catch (e2) {
        this.stack = e2.stack;
      }
    }
    return this;
  };
  return reporter;
}
var buffer = {};
var hasRequiredBuffer;
function requireBuffer() {
  if (hasRequiredBuffer) return buffer;
  hasRequiredBuffer = 1;
  var inherits = requireInherits_browser();
  var Reporter = requireBase().Reporter;
  var Buffer2 = require$$1$2.Buffer;
  function DecoderBuffer(base2, options) {
    Reporter.call(this, options);
    if (!Buffer2.isBuffer(base2)) {
      this.error("Input not Buffer");
      return;
    }
    this.base = base2;
    this.offset = 0;
    this.length = base2.length;
  }
  inherits(DecoderBuffer, Reporter);
  buffer.DecoderBuffer = DecoderBuffer;
  DecoderBuffer.prototype.save = function save() {
    return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
  };
  DecoderBuffer.prototype.restore = function restore(save) {
    var res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
  };
  DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
  };
  DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length)
      return this.base.readUInt8(this.offset++, true);
    else
      return this.error(fail || "DecoderBuffer overrun");
  };
  DecoderBuffer.prototype.skip = function skip(bytes2, fail) {
    if (!(this.offset + bytes2 <= this.length))
      return this.error(fail || "DecoderBuffer overrun");
    var res = new DecoderBuffer(this.base);
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes2;
    this.offset += bytes2;
    return res;
  };
  DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
  };
  function EncoderBuffer(value3, reporter2) {
    if (Array.isArray(value3)) {
      this.length = 0;
      this.value = value3.map(function(item) {
        if (!(item instanceof EncoderBuffer))
          item = new EncoderBuffer(item, reporter2);
        this.length += item.length;
        return item;
      }, this);
    } else if (typeof value3 === "number") {
      if (!(0 <= value3 && value3 <= 255))
        return reporter2.error("non-byte EncoderBuffer value");
      this.value = value3;
      this.length = 1;
    } else if (typeof value3 === "string") {
      this.value = value3;
      this.length = Buffer2.byteLength(value3);
    } else if (Buffer2.isBuffer(value3)) {
      this.value = value3;
      this.length = value3.length;
    } else {
      return reporter2.error("Unsupported type: " + typeof value3);
    }
  }
  buffer.EncoderBuffer = EncoderBuffer;
  EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out)
      out = new Buffer2(this.length);
    if (!offset)
      offset = 0;
    if (this.length === 0)
      return out;
    if (Array.isArray(this.value)) {
      this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
      });
    } else {
      if (typeof this.value === "number")
        out[offset] = this.value;
      else if (typeof this.value === "string")
        out.write(this.value, offset);
      else if (Buffer2.isBuffer(this.value))
        this.value.copy(out, offset);
      offset += this.length;
    }
    return out;
  };
  return buffer;
}
var node;
var hasRequiredNode;
function requireNode() {
  if (hasRequiredNode) return node;
  hasRequiredNode = 1;
  var Reporter = requireBase().Reporter;
  var EncoderBuffer = requireBase().EncoderBuffer;
  var DecoderBuffer = requireBase().DecoderBuffer;
  var assert2 = requireMinimalisticAssert();
  var tags = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
  ];
  var methods = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
  ].concat(tags);
  var overrided = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
  ];
  function Node2(enc, parent) {
    var state2 = {};
    this._baseState = state2;
    state2.enc = enc;
    state2.parent = parent || null;
    state2.children = null;
    state2.tag = null;
    state2.args = null;
    state2.reverseArgs = null;
    state2.choice = null;
    state2.optional = false;
    state2.any = false;
    state2.obj = false;
    state2.use = null;
    state2.useDecoder = null;
    state2.key = null;
    state2["default"] = null;
    state2.explicit = null;
    state2.implicit = null;
    state2.contains = null;
    if (!state2.parent) {
      state2.children = [];
      this._wrap();
    }
  }
  node = Node2;
  var stateProps = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
  ];
  Node2.prototype.clone = function clone2() {
    var state2 = this._baseState;
    var cstate = {};
    stateProps.forEach(function(prop2) {
      cstate[prop2] = state2[prop2];
    });
    var res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
  };
  Node2.prototype._wrap = function wrap() {
    var state2 = this._baseState;
    methods.forEach(function(method) {
      this[method] = function _wrappedMethod() {
        var clone2 = new this.constructor(this);
        state2.children.push(clone2);
        return clone2[method].apply(clone2, arguments);
      };
    }, this);
  };
  Node2.prototype._init = function init(body) {
    var state2 = this._baseState;
    assert2(state2.parent === null);
    body.call(this);
    state2.children = state2.children.filter(function(child) {
      return child._baseState.parent === this;
    }, this);
    assert2.equal(state2.children.length, 1, "Root node can have only one child");
  };
  Node2.prototype._useArgs = function useArgs(args) {
    var state2 = this._baseState;
    var children = args.filter(function(arg) {
      return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
      return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
      assert2(state2.children === null);
      state2.children = children;
      children.forEach(function(child) {
        child._baseState.parent = this;
      }, this);
    }
    if (args.length !== 0) {
      assert2(state2.args === null);
      state2.args = args;
      state2.reverseArgs = args.map(function(arg) {
        if (typeof arg !== "object" || arg.constructor !== Object)
          return arg;
        var res = {};
        Object.keys(arg).forEach(function(key2) {
          if (key2 == (key2 | 0))
            key2 |= 0;
          var value3 = arg[key2];
          res[value3] = key2;
        });
        return res;
      });
    }
  };
  overrided.forEach(function(method) {
    Node2.prototype[method] = function _overrided() {
      var state2 = this._baseState;
      throw new Error(method + " not implemented for encoding: " + state2.enc);
    };
  });
  tags.forEach(function(tag) {
    Node2.prototype[tag] = function _tagMethod() {
      var state2 = this._baseState;
      var args = Array.prototype.slice.call(arguments);
      assert2(state2.tag === null);
      state2.tag = tag;
      this._useArgs(args);
      return this;
    };
  });
  Node2.prototype.use = function use(item) {
    assert2(item);
    var state2 = this._baseState;
    assert2(state2.use === null);
    state2.use = item;
    return this;
  };
  Node2.prototype.optional = function optional2() {
    var state2 = this._baseState;
    state2.optional = true;
    return this;
  };
  Node2.prototype.def = function def(val) {
    var state2 = this._baseState;
    assert2(state2["default"] === null);
    state2["default"] = val;
    state2.optional = true;
    return this;
  };
  Node2.prototype.explicit = function explicit(num) {
    var state2 = this._baseState;
    assert2(state2.explicit === null && state2.implicit === null);
    state2.explicit = num;
    return this;
  };
  Node2.prototype.implicit = function implicit(num) {
    var state2 = this._baseState;
    assert2(state2.explicit === null && state2.implicit === null);
    state2.implicit = num;
    return this;
  };
  Node2.prototype.obj = function obj() {
    var state2 = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    state2.obj = true;
    if (args.length !== 0)
      this._useArgs(args);
    return this;
  };
  Node2.prototype.key = function key2(newKey) {
    var state2 = this._baseState;
    assert2(state2.key === null);
    state2.key = newKey;
    return this;
  };
  Node2.prototype.any = function any() {
    var state2 = this._baseState;
    state2.any = true;
    return this;
  };
  Node2.prototype.choice = function choice(obj) {
    var state2 = this._baseState;
    assert2(state2.choice === null);
    state2.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key2) {
      return obj[key2];
    }));
    return this;
  };
  Node2.prototype.contains = function contains(item) {
    var state2 = this._baseState;
    assert2(state2.use === null);
    state2.contains = item;
    return this;
  };
  Node2.prototype._decode = function decode2(input, options) {
    var state2 = this._baseState;
    if (state2.parent === null)
      return input.wrapResult(state2.children[0]._decode(input, options));
    var result = state2["default"];
    var present = true;
    var prevKey = null;
    if (state2.key !== null)
      prevKey = input.enterKey(state2.key);
    if (state2.optional) {
      var tag = null;
      if (state2.explicit !== null)
        tag = state2.explicit;
      else if (state2.implicit !== null)
        tag = state2.implicit;
      else if (state2.tag !== null)
        tag = state2.tag;
      if (tag === null && !state2.any) {
        var save = input.save();
        try {
          if (state2.choice === null)
            this._decodeGeneric(state2.tag, input, options);
          else
            this._decodeChoice(input, options);
          present = true;
        } catch (e2) {
          present = false;
        }
        input.restore(save);
      } else {
        present = this._peekTag(input, tag, state2.any);
        if (input.isError(present))
          return present;
      }
    }
    var prevObj;
    if (state2.obj && present)
      prevObj = input.enterObject();
    if (present) {
      if (state2.explicit !== null) {
        var explicit = this._decodeTag(input, state2.explicit);
        if (input.isError(explicit))
          return explicit;
        input = explicit;
      }
      var start = input.offset;
      if (state2.use === null && state2.choice === null) {
        if (state2.any)
          var save = input.save();
        var body = this._decodeTag(
          input,
          state2.implicit !== null ? state2.implicit : state2.tag,
          state2.any
        );
        if (input.isError(body))
          return body;
        if (state2.any)
          result = input.raw(save);
        else
          input = body;
      }
      if (options && options.track && state2.tag !== null)
        options.track(input.path(), start, input.length, "tagged");
      if (options && options.track && state2.tag !== null)
        options.track(input.path(), input.offset, input.length, "content");
      if (state2.any)
        result = result;
      else if (state2.choice === null)
        result = this._decodeGeneric(state2.tag, input, options);
      else
        result = this._decodeChoice(input, options);
      if (input.isError(result))
        return result;
      if (!state2.any && state2.choice === null && state2.children !== null) {
        state2.children.forEach(function decodeChildren(child) {
          child._decode(input, options);
        });
      }
      if (state2.contains && (state2.tag === "octstr" || state2.tag === "bitstr")) {
        var data = new DecoderBuffer(result);
        result = this._getUse(state2.contains, input._reporterState.obj)._decode(data, options);
      }
    }
    if (state2.obj && present)
      result = input.leaveObject(prevObj);
    if (state2.key !== null && (result !== null || present === true))
      input.leaveKey(prevKey, state2.key, result);
    else if (prevKey !== null)
      input.exitKey(prevKey);
    return result;
  };
  Node2.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    var state2 = this._baseState;
    if (tag === "seq" || tag === "set")
      return null;
    if (tag === "seqof" || tag === "setof")
      return this._decodeList(input, tag, state2.args[0], options);
    else if (/str$/.test(tag))
      return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state2.args)
      return this._decodeObjid(input, state2.args[0], state2.args[1], options);
    else if (tag === "objid")
      return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime")
      return this._decodeTime(input, tag, options);
    else if (tag === "null_")
      return this._decodeNull(input, options);
    else if (tag === "bool")
      return this._decodeBool(input, options);
    else if (tag === "objDesc")
      return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum")
      return this._decodeInt(input, state2.args && state2.args[0], options);
    if (state2.use !== null) {
      return this._getUse(state2.use, input._reporterState.obj)._decode(input, options);
    } else {
      return input.error("unknown tag: " + tag);
    }
  };
  Node2.prototype._getUse = function _getUse(entity, obj) {
    var state2 = this._baseState;
    state2.useDecoder = this._use(entity, obj);
    assert2(state2.useDecoder._baseState.parent === null);
    state2.useDecoder = state2.useDecoder._baseState.children[0];
    if (state2.implicit !== state2.useDecoder._baseState.implicit) {
      state2.useDecoder = state2.useDecoder.clone();
      state2.useDecoder._baseState.implicit = state2.implicit;
    }
    return state2.useDecoder;
  };
  Node2.prototype._decodeChoice = function decodeChoice(input, options) {
    var state2 = this._baseState;
    var result = null;
    var match = false;
    Object.keys(state2.choice).some(function(key2) {
      var save = input.save();
      var node2 = state2.choice[key2];
      try {
        var value3 = node2._decode(input, options);
        if (input.isError(value3))
          return false;
        result = { type: key2, value: value3 };
        match = true;
      } catch (e2) {
        input.restore(save);
        return false;
      }
      return true;
    }, this);
    if (!match)
      return input.error("Choice not matched");
    return result;
  };
  Node2.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
  };
  Node2.prototype._encode = function encode2(data, reporter2, parent) {
    var state2 = this._baseState;
    if (state2["default"] !== null && state2["default"] === data)
      return;
    var result = this._encodeValue(data, reporter2, parent);
    if (result === void 0)
      return;
    if (this._skipDefault(result, reporter2, parent))
      return;
    return result;
  };
  Node2.prototype._encodeValue = function encode2(data, reporter2, parent) {
    var state2 = this._baseState;
    if (state2.parent === null)
      return state2.children[0]._encode(data, reporter2 || new Reporter());
    var result = null;
    this.reporter = reporter2;
    if (state2.optional && data === void 0) {
      if (state2["default"] !== null)
        data = state2["default"];
      else
        return;
    }
    var content = null;
    var primitive = false;
    if (state2.any) {
      result = this._createEncoderBuffer(data);
    } else if (state2.choice) {
      result = this._encodeChoice(data, reporter2);
    } else if (state2.contains) {
      content = this._getUse(state2.contains, parent)._encode(data, reporter2);
      primitive = true;
    } else if (state2.children) {
      content = state2.children.map(function(child2) {
        if (child2._baseState.tag === "null_")
          return child2._encode(null, reporter2, data);
        if (child2._baseState.key === null)
          return reporter2.error("Child should have a key");
        var prevKey = reporter2.enterKey(child2._baseState.key);
        if (typeof data !== "object")
          return reporter2.error("Child expected, but input is not object");
        var res = child2._encode(data[child2._baseState.key], reporter2, data);
        reporter2.leaveKey(prevKey);
        return res;
      }, this).filter(function(child2) {
        return child2;
      });
      content = this._createEncoderBuffer(content);
    } else {
      if (state2.tag === "seqof" || state2.tag === "setof") {
        if (!(state2.args && state2.args.length === 1))
          return reporter2.error("Too many args for : " + state2.tag);
        if (!Array.isArray(data))
          return reporter2.error("seqof/setof, but data is not Array");
        var child = this.clone();
        child._baseState.implicit = null;
        content = this._createEncoderBuffer(data.map(function(item) {
          var state3 = this._baseState;
          return this._getUse(state3.args[0], data)._encode(item, reporter2);
        }, child));
      } else if (state2.use !== null) {
        result = this._getUse(state2.use, parent)._encode(data, reporter2);
      } else {
        content = this._encodePrimitive(state2.tag, data);
        primitive = true;
      }
    }
    var result;
    if (!state2.any && state2.choice === null) {
      var tag = state2.implicit !== null ? state2.implicit : state2.tag;
      var cls = state2.implicit === null ? "universal" : "context";
      if (tag === null) {
        if (state2.use === null)
          reporter2.error("Tag could be omitted only for .use()");
      } else {
        if (state2.use === null)
          result = this._encodeComposite(tag, primitive, cls, content);
      }
    }
    if (state2.explicit !== null)
      result = this._encodeComposite(state2.explicit, false, "context", result);
    return result;
  };
  Node2.prototype._encodeChoice = function encodeChoice(data, reporter2) {
    var state2 = this._baseState;
    var node2 = state2.choice[data.type];
    if (!node2) {
      assert2(
        false,
        data.type + " not found in " + JSON.stringify(Object.keys(state2.choice))
      );
    }
    return node2._encode(data.value, reporter2);
  };
  Node2.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    var state2 = this._baseState;
    if (/str$/.test(tag))
      return this._encodeStr(data, tag);
    else if (tag === "objid" && state2.args)
      return this._encodeObjid(data, state2.reverseArgs[0], state2.args[1]);
    else if (tag === "objid")
      return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime")
      return this._encodeTime(data, tag);
    else if (tag === "null_")
      return this._encodeNull();
    else if (tag === "int" || tag === "enum")
      return this._encodeInt(data, state2.args && state2.reverseArgs[0]);
    else if (tag === "bool")
      return this._encodeBool(data);
    else if (tag === "objDesc")
      return this._encodeStr(data, tag);
    else
      throw new Error("Unsupported tag: " + tag);
  };
  Node2.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
  };
  Node2.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
  };
  return node;
}
var hasRequiredBase;
function requireBase() {
  if (hasRequiredBase) return base;
  hasRequiredBase = 1;
  (function(exports2) {
    var base2 = exports2;
    base2.Reporter = requireReporter().Reporter;
    base2.DecoderBuffer = requireBuffer().DecoderBuffer;
    base2.EncoderBuffer = requireBuffer().EncoderBuffer;
    base2.Node = requireNode();
  })(base);
  return base;
}
var constants = {};
var der = {};
var hasRequiredDer$2;
function requireDer$2() {
  if (hasRequiredDer$2) return der;
  hasRequiredDer$2 = 1;
  (function(exports2) {
    var constants2 = requireConstants();
    exports2.tagClass = {
      0: "universal",
      1: "application",
      2: "context",
      3: "private"
    };
    exports2.tagClassByName = constants2._reverse(exports2.tagClass);
    exports2.tag = {
      0: "end",
      1: "bool",
      2: "int",
      3: "bitstr",
      4: "octstr",
      5: "null_",
      6: "objid",
      7: "objDesc",
      8: "external",
      9: "real",
      10: "enum",
      11: "embed",
      12: "utf8str",
      13: "relativeOid",
      16: "seq",
      17: "set",
      18: "numstr",
      19: "printstr",
      20: "t61str",
      21: "videostr",
      22: "ia5str",
      23: "utctime",
      24: "gentime",
      25: "graphstr",
      26: "iso646str",
      27: "genstr",
      28: "unistr",
      29: "charstr",
      30: "bmpstr"
    };
    exports2.tagByName = constants2._reverse(exports2.tag);
  })(der);
  return der;
}
var hasRequiredConstants;
function requireConstants() {
  if (hasRequiredConstants) return constants;
  hasRequiredConstants = 1;
  (function(exports2) {
    var constants2 = exports2;
    constants2._reverse = function reverse2(map2) {
      var res = {};
      Object.keys(map2).forEach(function(key2) {
        if ((key2 | 0) == key2)
          key2 = key2 | 0;
        var value3 = map2[key2];
        res[value3] = key2;
      });
      return res;
    };
    constants2.der = requireDer$2();
  })(constants);
  return constants;
}
var decoders = {};
var der_1$1;
var hasRequiredDer$1;
function requireDer$1() {
  if (hasRequiredDer$1) return der_1$1;
  hasRequiredDer$1 = 1;
  var inherits = requireInherits_browser();
  var asn12 = requireAsn1$1();
  var base2 = asn12.base;
  var bignum = asn12.bignum;
  var der2 = asn12.constants.der;
  function DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  der_1$1 = DERDecoder;
  DERDecoder.prototype.decode = function decode2(data, options) {
    if (!(data instanceof base2.DecoderBuffer))
      data = new base2.DecoderBuffer(data, options);
    return this.tree._decode(data, options);
  };
  function DERNode(parent) {
    base2.Node.call(this, "der", parent);
  }
  inherits(DERNode, base2.Node);
  DERNode.prototype._peekTag = function peekTag(buffer2, tag, any) {
    if (buffer2.isEmpty())
      return false;
    var state2 = buffer2.save();
    var decodedTag = derDecodeTag(buffer2, 'Failed to peek tag: "' + tag + '"');
    if (buffer2.isError(decodedTag))
      return decodedTag;
    buffer2.restore(state2);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
  };
  DERNode.prototype._decodeTag = function decodeTag(buffer2, tag, any) {
    var decodedTag = derDecodeTag(
      buffer2,
      'Failed to decode tag of "' + tag + '"'
    );
    if (buffer2.isError(decodedTag))
      return decodedTag;
    var len2 = derDecodeLen(
      buffer2,
      decodedTag.primitive,
      'Failed to get length of "' + tag + '"'
    );
    if (buffer2.isError(len2))
      return len2;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) {
      return buffer2.error('Failed to match tag: "' + tag + '"');
    }
    if (decodedTag.primitive || len2 !== null)
      return buffer2.skip(len2, 'Failed to match body of: "' + tag + '"');
    var state2 = buffer2.save();
    var res = this._skipUntilEnd(
      buffer2,
      'Failed to skip indefinite length body: "' + this.tag + '"'
    );
    if (buffer2.isError(res))
      return res;
    len2 = buffer2.offset - state2.offset;
    buffer2.restore(state2);
    return buffer2.skip(len2, 'Failed to match body of: "' + tag + '"');
  };
  DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer2, fail) {
    while (true) {
      var tag = derDecodeTag(buffer2, fail);
      if (buffer2.isError(tag))
        return tag;
      var len2 = derDecodeLen(buffer2, tag.primitive, fail);
      if (buffer2.isError(len2))
        return len2;
      var res;
      if (tag.primitive || len2 !== null)
        res = buffer2.skip(len2);
      else
        res = this._skipUntilEnd(buffer2, fail);
      if (buffer2.isError(res))
        return res;
      if (tag.tagStr === "end")
        break;
    }
  };
  DERNode.prototype._decodeList = function decodeList(buffer2, tag, decoder, options) {
    var result = [];
    while (!buffer2.isEmpty()) {
      var possibleEnd = this._peekTag(buffer2, "end");
      if (buffer2.isError(possibleEnd))
        return possibleEnd;
      var res = decoder.decode(buffer2, "der", options);
      if (buffer2.isError(res) && possibleEnd)
        break;
      result.push(res);
    }
    return result;
  };
  DERNode.prototype._decodeStr = function decodeStr(buffer2, tag) {
    if (tag === "bitstr") {
      var unused = buffer2.readUInt8();
      if (buffer2.isError(unused))
        return unused;
      return { unused, data: buffer2.raw() };
    } else if (tag === "bmpstr") {
      var raw = buffer2.raw();
      if (raw.length % 2 === 1)
        return buffer2.error("Decoding of string type: bmpstr length mismatch");
      var str = "";
      for (var i2 = 0; i2 < raw.length / 2; i2++) {
        str += String.fromCharCode(raw.readUInt16BE(i2 * 2));
      }
      return str;
    } else if (tag === "numstr") {
      var numstr = buffer2.raw().toString("ascii");
      if (!this._isNumstr(numstr)) {
        return buffer2.error("Decoding of string type: numstr unsupported characters");
      }
      return numstr;
    } else if (tag === "octstr") {
      return buffer2.raw();
    } else if (tag === "objDesc") {
      return buffer2.raw();
    } else if (tag === "printstr") {
      var printstr = buffer2.raw().toString("ascii");
      if (!this._isPrintstr(printstr)) {
        return buffer2.error("Decoding of string type: printstr unsupported characters");
      }
      return printstr;
    } else if (/str$/.test(tag)) {
      return buffer2.raw().toString();
    } else {
      return buffer2.error("Decoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._decodeObjid = function decodeObjid(buffer2, values, relative) {
    var result;
    var identifiers = [];
    var ident = 0;
    while (!buffer2.isEmpty()) {
      var subident = buffer2.readUInt8();
      ident <<= 7;
      ident |= subident & 127;
      if ((subident & 128) === 0) {
        identifiers.push(ident);
        ident = 0;
      }
    }
    if (subident & 128)
      identifiers.push(ident);
    var first = identifiers[0] / 40 | 0;
    var second = identifiers[0] % 40;
    if (relative)
      result = identifiers;
    else
      result = [first, second].concat(identifiers.slice(1));
    if (values) {
      var tmp = values[result.join(" ")];
      if (tmp === void 0)
        tmp = values[result.join(".")];
      if (tmp !== void 0)
        result = tmp;
    }
    return result;
  };
  DERNode.prototype._decodeTime = function decodeTime(buffer2, tag) {
    var str = buffer2.raw().toString();
    if (tag === "gentime") {
      var year = str.slice(0, 4) | 0;
      var mon = str.slice(4, 6) | 0;
      var day = str.slice(6, 8) | 0;
      var hour = str.slice(8, 10) | 0;
      var min = str.slice(10, 12) | 0;
      var sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
      var year = str.slice(0, 2) | 0;
      var mon = str.slice(2, 4) | 0;
      var day = str.slice(4, 6) | 0;
      var hour = str.slice(6, 8) | 0;
      var min = str.slice(8, 10) | 0;
      var sec = str.slice(10, 12) | 0;
      if (year < 70)
        year = 2e3 + year;
      else
        year = 1900 + year;
    } else {
      return buffer2.error("Decoding " + tag + " time is not supported yet");
    }
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
  };
  DERNode.prototype._decodeNull = function decodeNull(buffer2) {
    return null;
  };
  DERNode.prototype._decodeBool = function decodeBool(buffer2) {
    var res = buffer2.readUInt8();
    if (buffer2.isError(res))
      return res;
    else
      return res !== 0;
  };
  DERNode.prototype._decodeInt = function decodeInt(buffer2, values) {
    var raw = buffer2.raw();
    var res = new bignum(raw);
    if (values)
      res = values[res.toString(10)] || res;
    return res;
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getDecoder("der").tree;
  };
  function derDecodeTag(buf, fail) {
    var tag = buf.readUInt8(fail);
    if (buf.isError(tag))
      return tag;
    var cls = der2.tagClass[tag >> 6];
    var primitive = (tag & 32) === 0;
    if ((tag & 31) === 31) {
      var oct = tag;
      tag = 0;
      while ((oct & 128) === 128) {
        oct = buf.readUInt8(fail);
        if (buf.isError(oct))
          return oct;
        tag <<= 7;
        tag |= oct & 127;
      }
    } else {
      tag &= 31;
    }
    var tagStr = der2.tag[tag];
    return {
      cls,
      primitive,
      tag,
      tagStr
    };
  }
  function derDecodeLen(buf, primitive, fail) {
    var len2 = buf.readUInt8(fail);
    if (buf.isError(len2))
      return len2;
    if (!primitive && len2 === 128)
      return null;
    if ((len2 & 128) === 0) {
      return len2;
    }
    var num = len2 & 127;
    if (num > 4)
      return buf.error("length octect is too long");
    len2 = 0;
    for (var i2 = 0; i2 < num; i2++) {
      len2 <<= 8;
      var j2 = buf.readUInt8(fail);
      if (buf.isError(j2))
        return j2;
      len2 |= j2;
    }
    return len2;
  }
  return der_1$1;
}
var pem$1;
var hasRequiredPem$1;
function requirePem$1() {
  if (hasRequiredPem$1) return pem$1;
  hasRequiredPem$1 = 1;
  var inherits = requireInherits_browser();
  var Buffer2 = require$$1$2.Buffer;
  var DERDecoder = requireDer$1();
  function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = "pem";
  }
  inherits(PEMDecoder, DERDecoder);
  pem$1 = PEMDecoder;
  PEMDecoder.prototype.decode = function decode2(data, options) {
    var lines = data.toString().split(/[\r\n]+/g);
    var label = options.label.toUpperCase();
    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
    var start = -1;
    var end = -1;
    for (var i2 = 0; i2 < lines.length; i2++) {
      var match = lines[i2].match(re);
      if (match === null)
        continue;
      if (match[2] !== label)
        continue;
      if (start === -1) {
        if (match[1] !== "BEGIN")
          break;
        start = i2;
      } else {
        if (match[1] !== "END")
          break;
        end = i2;
        break;
      }
    }
    if (start === -1 || end === -1)
      throw new Error("PEM section not found for: " + label);
    var base64 = lines.slice(start + 1, end).join("");
    base64.replace(/[^a-z0-9\+\/=]+/gi, "");
    var input = new Buffer2(base64, "base64");
    return DERDecoder.prototype.decode.call(this, input, options);
  };
  return pem$1;
}
var hasRequiredDecoders;
function requireDecoders() {
  if (hasRequiredDecoders) return decoders;
  hasRequiredDecoders = 1;
  (function(exports2) {
    var decoders2 = exports2;
    decoders2.der = requireDer$1();
    decoders2.pem = requirePem$1();
  })(decoders);
  return decoders;
}
var encoders = {};
var der_1;
var hasRequiredDer;
function requireDer() {
  if (hasRequiredDer) return der_1;
  hasRequiredDer = 1;
  var inherits = requireInherits_browser();
  var Buffer2 = require$$1$2.Buffer;
  var asn12 = requireAsn1$1();
  var base2 = asn12.base;
  var der2 = asn12.constants.der;
  function DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    this.tree = new DERNode();
    this.tree._init(entity.body);
  }
  der_1 = DEREncoder;
  DEREncoder.prototype.encode = function encode2(data, reporter2) {
    return this.tree._encode(data, reporter2).join();
  };
  function DERNode(parent) {
    base2.Node.call(this, "der", parent);
  }
  inherits(DERNode, base2.Node);
  DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    var encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    if (content.length < 128) {
      var header = new Buffer2(2);
      header[0] = encodedTag;
      header[1] = content.length;
      return this._createEncoderBuffer([header, content]);
    }
    var lenOctets = 1;
    for (var i2 = content.length; i2 >= 256; i2 >>= 8)
      lenOctets++;
    var header = new Buffer2(1 + 1 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for (var i2 = 1 + lenOctets, j2 = content.length; j2 > 0; i2--, j2 >>= 8)
      header[i2] = j2 & 255;
    return this._createEncoderBuffer([header, content]);
  };
  DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") {
      return this._createEncoderBuffer([str.unused | 0, str.data]);
    } else if (tag === "bmpstr") {
      var buf = new Buffer2(str.length * 2);
      for (var i2 = 0; i2 < str.length; i2++) {
        buf.writeUInt16BE(str.charCodeAt(i2), i2 * 2);
      }
      return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
      if (!this._isNumstr(str)) {
        return this.reporter.error("Encoding of string type: numstr supports only digits and space");
      }
      return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
      if (!this._isPrintstr(str)) {
        return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
      }
      return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) {
      return this._createEncoderBuffer(str);
    } else if (tag === "objDesc") {
      return this._createEncoderBuffer(str);
    } else {
      return this.reporter.error("Encoding of string type: " + tag + " unsupported");
    }
  };
  DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
      if (!values)
        return this.reporter.error("string objid given, but no values map found");
      if (!values.hasOwnProperty(id))
        return this.reporter.error("objid not found in values map");
      id = values[id].split(/[\s\.]+/g);
      for (var i2 = 0; i2 < id.length; i2++)
        id[i2] |= 0;
    } else if (Array.isArray(id)) {
      id = id.slice();
      for (var i2 = 0; i2 < id.length; i2++)
        id[i2] |= 0;
    }
    if (!Array.isArray(id)) {
      return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    }
    if (!relative) {
      if (id[1] >= 40)
        return this.reporter.error("Second objid identifier OOB");
      id.splice(0, 2, id[0] * 40 + id[1]);
    }
    var size = 0;
    for (var i2 = 0; i2 < id.length; i2++) {
      var ident = id[i2];
      for (size++; ident >= 128; ident >>= 7)
        size++;
    }
    var objid = new Buffer2(size);
    var offset = objid.length - 1;
    for (var i2 = id.length - 1; i2 >= 0; i2--) {
      var ident = id[i2];
      objid[offset--] = ident & 127;
      while ((ident >>= 7) > 0)
        objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
  };
  function two(num) {
    if (num < 10)
      return "0" + num;
    else
      return num;
  }
  DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    var str;
    var date = new Date(time);
    if (tag === "gentime") {
      str = [
        two(date.getFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
      ].join("");
    } else if (tag === "utctime") {
      str = [
        two(date.getFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        "Z"
      ].join("");
    } else {
      this.reporter.error("Encoding " + tag + " time is not supported yet");
    }
    return this._encodeStr(str, "octstr");
  };
  DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
  };
  DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
      if (!values)
        return this.reporter.error("String int or enum given, but no values map");
      if (!values.hasOwnProperty(num)) {
        return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
      }
      num = values[num];
    }
    if (typeof num !== "number" && !Buffer2.isBuffer(num)) {
      var numArray = num.toArray();
      if (!num.sign && numArray[0] & 128) {
        numArray.unshift(0);
      }
      num = new Buffer2(numArray);
    }
    if (Buffer2.isBuffer(num)) {
      var size = num.length;
      if (num.length === 0)
        size++;
      var out = new Buffer2(size);
      num.copy(out);
      if (num.length === 0)
        out[0] = 0;
      return this._createEncoderBuffer(out);
    }
    if (num < 128)
      return this._createEncoderBuffer(num);
    if (num < 256)
      return this._createEncoderBuffer([0, num]);
    var size = 1;
    for (var i2 = num; i2 >= 256; i2 >>= 8)
      size++;
    var out = new Array(size);
    for (var i2 = out.length - 1; i2 >= 0; i2--) {
      out[i2] = num & 255;
      num >>= 8;
    }
    if (out[0] & 128) {
      out.unshift(0);
    }
    return this._createEncoderBuffer(new Buffer2(out));
  };
  DERNode.prototype._encodeBool = function encodeBool(value3) {
    return this._createEncoderBuffer(value3 ? 255 : 0);
  };
  DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function")
      entity = entity(obj);
    return entity._getEncoder("der").tree;
  };
  DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter2, parent) {
    var state2 = this._baseState;
    var i2;
    if (state2["default"] === null)
      return false;
    var data = dataBuffer.join();
    if (state2.defaultBuffer === void 0)
      state2.defaultBuffer = this._encodeValue(state2["default"], reporter2, parent).join();
    if (data.length !== state2.defaultBuffer.length)
      return false;
    for (i2 = 0; i2 < data.length; i2++)
      if (data[i2] !== state2.defaultBuffer[i2])
        return false;
    return true;
  };
  function encodeTag(tag, primitive, cls, reporter2) {
    var res;
    if (tag === "seqof")
      tag = "seq";
    else if (tag === "setof")
      tag = "set";
    if (der2.tagByName.hasOwnProperty(tag))
      res = der2.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag)
      res = tag;
    else
      return reporter2.error("Unknown tag: " + tag);
    if (res >= 31)
      return reporter2.error("Multi-octet tag encoding unsupported");
    if (!primitive)
      res |= 32;
    res |= der2.tagClassByName[cls || "universal"] << 6;
    return res;
  }
  return der_1;
}
var pem;
var hasRequiredPem;
function requirePem() {
  if (hasRequiredPem) return pem;
  hasRequiredPem = 1;
  var inherits = requireInherits_browser();
  var DEREncoder = requireDer();
  function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = "pem";
  }
  inherits(PEMEncoder, DEREncoder);
  pem = PEMEncoder;
  PEMEncoder.prototype.encode = function encode2(data, options) {
    var buf = DEREncoder.prototype.encode.call(this, data);
    var p2 = buf.toString("base64");
    var out = ["-----BEGIN " + options.label + "-----"];
    for (var i2 = 0; i2 < p2.length; i2 += 64)
      out.push(p2.slice(i2, i2 + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
  };
  return pem;
}
var hasRequiredEncoders;
function requireEncoders() {
  if (hasRequiredEncoders) return encoders;
  hasRequiredEncoders = 1;
  (function(exports2) {
    var encoders2 = exports2;
    encoders2.der = requireDer();
    encoders2.pem = requirePem();
  })(encoders);
  return encoders;
}
var hasRequiredAsn1$1;
function requireAsn1$1() {
  if (hasRequiredAsn1$1) return asn1;
  hasRequiredAsn1$1 = 1;
  (function(exports2) {
    var asn12 = exports2;
    asn12.bignum = requireBn$1();
    asn12.define = requireApi().define;
    asn12.base = requireBase();
    asn12.constants = requireConstants();
    asn12.decoders = requireDecoders();
    asn12.encoders = requireEncoders();
  })(asn1);
  return asn1;
}
var certificate;
var hasRequiredCertificate;
function requireCertificate() {
  if (hasRequiredCertificate) return certificate;
  hasRequiredCertificate = 1;
  var asn = requireAsn1$1();
  var Time = asn.define("Time", function() {
    this.choice({
      utcTime: this.utctime(),
      generalTime: this.gentime()
    });
  });
  var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
    this.seq().obj(
      this.key("type").objid(),
      this.key("value").any()
    );
  });
  var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
    this.seq().obj(
      this.key("algorithm").objid(),
      this.key("parameters").optional(),
      this.key("curve").objid().optional()
    );
  });
  var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").use(AlgorithmIdentifier),
      this.key("subjectPublicKey").bitstr()
    );
  });
  var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
    this.setof(AttributeTypeValue);
  });
  var RDNSequence = asn.define("RDNSequence", function() {
    this.seqof(RelativeDistinguishedName);
  });
  var Name = asn.define("Name", function() {
    this.choice({
      rdnSequence: this.use(RDNSequence)
    });
  });
  var Validity = asn.define("Validity", function() {
    this.seq().obj(
      this.key("notBefore").use(Time),
      this.key("notAfter").use(Time)
    );
  });
  var Extension = asn.define("Extension", function() {
    this.seq().obj(
      this.key("extnID").objid(),
      this.key("critical").bool().def(false),
      this.key("extnValue").octstr()
    );
  });
  var TBSCertificate = asn.define("TBSCertificate", function() {
    this.seq().obj(
      this.key("version").explicit(0)["int"]().optional(),
      this.key("serialNumber")["int"](),
      this.key("signature").use(AlgorithmIdentifier),
      this.key("issuer").use(Name),
      this.key("validity").use(Validity),
      this.key("subject").use(Name),
      this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo),
      this.key("issuerUniqueID").implicit(1).bitstr().optional(),
      this.key("subjectUniqueID").implicit(2).bitstr().optional(),
      this.key("extensions").explicit(3).seqof(Extension).optional()
    );
  });
  var X509Certificate = asn.define("X509Certificate", function() {
    this.seq().obj(
      this.key("tbsCertificate").use(TBSCertificate),
      this.key("signatureAlgorithm").use(AlgorithmIdentifier),
      this.key("signatureValue").bitstr()
    );
  });
  certificate = X509Certificate;
  return certificate;
}
var hasRequiredAsn1;
function requireAsn1() {
  if (hasRequiredAsn1) return asn1$1;
  hasRequiredAsn1 = 1;
  var asn12 = requireAsn1$1();
  asn1$1.certificate = requireCertificate();
  var RSAPrivateKey = asn12.define("RSAPrivateKey", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("modulus")["int"](),
      this.key("publicExponent")["int"](),
      this.key("privateExponent")["int"](),
      this.key("prime1")["int"](),
      this.key("prime2")["int"](),
      this.key("exponent1")["int"](),
      this.key("exponent2")["int"](),
      this.key("coefficient")["int"]()
    );
  });
  asn1$1.RSAPrivateKey = RSAPrivateKey;
  var RSAPublicKey = asn12.define("RSAPublicKey", function() {
    this.seq().obj(
      this.key("modulus")["int"](),
      this.key("publicExponent")["int"]()
    );
  });
  asn1$1.RSAPublicKey = RSAPublicKey;
  var AlgorithmIdentifier = asn12.define("AlgorithmIdentifier", function() {
    this.seq().obj(
      this.key("algorithm").objid(),
      this.key("none").null_().optional(),
      this.key("curve").objid().optional(),
      this.key("params").seq().obj(
        this.key("p")["int"](),
        this.key("q")["int"](),
        this.key("g")["int"]()
      ).optional()
    );
  });
  var PublicKey = asn12.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").use(AlgorithmIdentifier),
      this.key("subjectPublicKey").bitstr()
    );
  });
  asn1$1.PublicKey = PublicKey;
  var PrivateKeyInfo = asn12.define("PrivateKeyInfo", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("algorithm").use(AlgorithmIdentifier),
      this.key("subjectPrivateKey").octstr()
    );
  });
  asn1$1.PrivateKey = PrivateKeyInfo;
  var EncryptedPrivateKeyInfo = asn12.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(
      this.key("algorithm").seq().obj(
        this.key("id").objid(),
        this.key("decrypt").seq().obj(
          this.key("kde").seq().obj(
            this.key("id").objid(),
            this.key("kdeparams").seq().obj(
              this.key("salt").octstr(),
              this.key("iters")["int"]()
            )
          ),
          this.key("cipher").seq().obj(
            this.key("algo").objid(),
            this.key("iv").octstr()
          )
        )
      ),
      this.key("subjectPrivateKey").octstr()
    );
  });
  asn1$1.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
  var DSAPrivateKey = asn12.define("DSAPrivateKey", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("p")["int"](),
      this.key("q")["int"](),
      this.key("g")["int"](),
      this.key("pub_key")["int"](),
      this.key("priv_key")["int"]()
    );
  });
  asn1$1.DSAPrivateKey = DSAPrivateKey;
  asn1$1.DSAparam = asn12.define("DSAparam", function() {
    this["int"]();
  });
  var ECParameters = asn12.define("ECParameters", function() {
    this.choice({
      namedCurve: this.objid()
    });
  });
  var ECPrivateKey = asn12.define("ECPrivateKey", function() {
    this.seq().obj(
      this.key("version")["int"](),
      this.key("privateKey").octstr(),
      this.key("parameters").optional().explicit(0).use(ECParameters),
      this.key("publicKey").optional().explicit(1).bitstr()
    );
  });
  asn1$1.ECPrivateKey = ECPrivateKey;
  asn1$1.signature = asn12.define("signature", function() {
    this.seq().obj(
      this.key("r")["int"](),
      this.key("s")["int"]()
    );
  });
  return asn1$1;
}
const require$$1 = {
  "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
  "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
  "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
  "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
  "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
  "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
  "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
  "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
  "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
  "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
  "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
  "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
};
var fixProc;
var hasRequiredFixProc;
function requireFixProc() {
  if (hasRequiredFixProc) return fixProc;
  hasRequiredFixProc = 1;
  var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
  var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
  var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
  var evp = requireEvp_bytestokey();
  var ciphers = requireBrowser$6();
  var Buffer2 = safeBufferExports.Buffer;
  fixProc = function(okey, password) {
    var key2 = okey.toString();
    var match = key2.match(findProc);
    var decrypted;
    if (!match) {
      var match2 = key2.match(fullRegex);
      decrypted = Buffer2.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
      var suite = "aes" + match[1];
      var iv = Buffer2.from(match[2], "hex");
      var cipherText = Buffer2.from(match[3].replace(/[\r\n]/g, ""), "base64");
      var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
      var out = [];
      var cipher2 = ciphers.createDecipheriv(suite, cipherKey, iv);
      out.push(cipher2.update(cipherText));
      out.push(cipher2["final"]());
      decrypted = Buffer2.concat(out);
    }
    var tag = key2.match(startRegex)[1];
    return {
      tag,
      data: decrypted
    };
  };
  return fixProc;
}
var parseAsn1;
var hasRequiredParseAsn1;
function requireParseAsn1() {
  if (hasRequiredParseAsn1) return parseAsn1;
  hasRequiredParseAsn1 = 1;
  var asn12 = requireAsn1();
  var aesid = require$$1;
  var fixProc2 = requireFixProc();
  var ciphers = requireBrowser$6();
  var compat = requireBrowser$7();
  var Buffer2 = safeBufferExports.Buffer;
  function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key2 = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher2 = ciphers.createDecipheriv(algo, key2, iv);
    var out = [];
    out.push(cipher2.update(cipherText));
    out.push(cipher2["final"]());
    return Buffer2.concat(out);
  }
  function parseKeys(buffer2) {
    var password;
    if (typeof buffer2 === "object" && !Buffer2.isBuffer(buffer2)) {
      password = buffer2.passphrase;
      buffer2 = buffer2.key;
    }
    if (typeof buffer2 === "string") {
      buffer2 = Buffer2.from(buffer2);
    }
    var stripped = fixProc2(buffer2, password);
    var type2 = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch (type2) {
      case "CERTIFICATE":
        ndata = asn12.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
      case "PUBLIC KEY":
        if (!ndata) {
          ndata = asn12.PublicKey.decode(data, "der");
        }
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn12.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
          case "1.2.840.10045.2.1":
            ndata.subjectPrivateKey = ndata.subjectPublicKey;
            return {
              type: "ec",
              data: ndata
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.pub_key = asn12.DSAparam.decode(ndata.subjectPublicKey.data, "der");
            return {
              type: "dsa",
              data: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "ENCRYPTED PRIVATE KEY":
        data = asn12.EncryptedPrivateKey.decode(data, "der");
        data = decrypt(data, password);
      case "PRIVATE KEY":
        ndata = asn12.PrivateKey.decode(data, "der");
        subtype = ndata.algorithm.algorithm.join(".");
        switch (subtype) {
          case "1.2.840.113549.1.1.1":
            return asn12.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
          case "1.2.840.10045.2.1":
            return {
              curve: ndata.algorithm.curve,
              privateKey: asn12.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
            };
          case "1.2.840.10040.4.1":
            ndata.algorithm.params.priv_key = asn12.DSAparam.decode(ndata.subjectPrivateKey, "der");
            return {
              type: "dsa",
              params: ndata.algorithm.params
            };
          default:
            throw new Error("unknown key id " + subtype);
        }
      case "RSA PUBLIC KEY":
        return asn12.RSAPublicKey.decode(data, "der");
      case "RSA PRIVATE KEY":
        return asn12.RSAPrivateKey.decode(data, "der");
      case "DSA PRIVATE KEY":
        return {
          type: "dsa",
          params: asn12.DSAPrivateKey.decode(data, "der")
        };
      case "EC PRIVATE KEY":
        data = asn12.ECPrivateKey.decode(data, "der");
        return {
          curve: data.parameters.value,
          privateKey: data.privateKey
        };
      default:
        throw new Error("unknown key type " + type2);
    }
  }
  parseKeys.signature = asn12.signature;
  parseAsn1 = parseKeys;
  return parseAsn1;
}
const require$$4 = {
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
};
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign) return sign$1.exports;
  hasRequiredSign = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var createHmac = requireBrowser$8();
  var crt = requireBrowserifyRsa();
  var EC = requireElliptic().ec;
  var BN = requireBn();
  var parseKeys = requireParseAsn1();
  var curves2 = require$$4;
  var RSA_PKCS1_PADDING = 1;
  function sign2(hash2, key2, hashType, signType, tag) {
    var priv = parseKeys(key2);
    if (priv.curve) {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong private key type");
      }
      return ecSign(hash2, priv);
    } else if (priv.type === "dsa") {
      if (signType !== "dsa") {
        throw new Error("wrong private key type");
      }
      return dsaSign(hash2, priv, hashType);
    }
    if (signType !== "rsa" && signType !== "ecdsa/rsa") {
      throw new Error("wrong private key type");
    }
    if (key2.padding !== void 0 && key2.padding !== RSA_PKCS1_PADDING) {
      throw new Error("illegal or unsupported padding mode");
    }
    hash2 = Buffer2.concat([tag, hash2]);
    var len2 = priv.modulus.byteLength();
    var pad2 = [0, 1];
    while (hash2.length + pad2.length + 1 < len2) {
      pad2.push(255);
    }
    pad2.push(0);
    var i2 = -1;
    while (++i2 < hash2.length) {
      pad2.push(hash2[i2]);
    }
    var out = crt(pad2, priv);
    return out;
  }
  function ecSign(hash2, priv) {
    var curveId = curves2[priv.curve.join(".")];
    if (!curveId) {
      throw new Error("unknown curve " + priv.curve.join("."));
    }
    var curve2 = new EC(curveId);
    var key2 = curve2.keyFromPrivate(priv.privateKey);
    var out = key2.sign(hash2);
    return Buffer2.from(out.toDER());
  }
  function dsaSign(hash2, priv, algo) {
    var x2 = priv.params.priv_key;
    var p2 = priv.params.p;
    var q2 = priv.params.q;
    var g2 = priv.params.g;
    var r2 = new BN(0);
    var k2;
    var H2 = bits2int(hash2, q2).mod(q2);
    var s2 = false;
    var kv = getKey(x2, q2, hash2, algo);
    while (s2 === false) {
      k2 = makeKey(q2, kv, algo);
      r2 = makeR(g2, k2, p2, q2);
      s2 = k2.invm(q2).imul(H2.add(x2.mul(r2))).mod(q2);
      if (s2.cmpn(0) === 0) {
        s2 = false;
        r2 = new BN(0);
      }
    }
    return toDER(r2, s2);
  }
  function toDER(r2, s2) {
    r2 = r2.toArray();
    s2 = s2.toArray();
    if (r2[0] & 128) {
      r2 = [0].concat(r2);
    }
    if (s2[0] & 128) {
      s2 = [0].concat(s2);
    }
    var total = r2.length + s2.length + 4;
    var res = [
      48,
      total,
      2,
      r2.length
    ];
    res = res.concat(r2, [2, s2.length], s2);
    return Buffer2.from(res);
  }
  function getKey(x2, q2, hash2, algo) {
    x2 = Buffer2.from(x2.toArray());
    if (x2.length < q2.byteLength()) {
      var zeros = Buffer2.alloc(q2.byteLength() - x2.length);
      x2 = Buffer2.concat([zeros, x2]);
    }
    var hlen = hash2.length;
    var hbits = bits2octets(hash2, q2);
    var v2 = Buffer2.alloc(hlen);
    v2.fill(1);
    var k2 = Buffer2.alloc(hlen);
    k2 = createHmac(algo, k2).update(v2).update(Buffer2.from([0])).update(x2).update(hbits).digest();
    v2 = createHmac(algo, k2).update(v2).digest();
    k2 = createHmac(algo, k2).update(v2).update(Buffer2.from([1])).update(x2).update(hbits).digest();
    v2 = createHmac(algo, k2).update(v2).digest();
    return { k: k2, v: v2 };
  }
  function bits2int(obits, q2) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q2.bitLength();
    if (shift > 0) {
      bits.ishrn(shift);
    }
    return bits;
  }
  function bits2octets(bits, q2) {
    bits = bits2int(bits, q2);
    bits = bits.mod(q2);
    var out = Buffer2.from(bits.toArray());
    if (out.length < q2.byteLength()) {
      var zeros = Buffer2.alloc(q2.byteLength() - out.length);
      out = Buffer2.concat([zeros, out]);
    }
    return out;
  }
  function makeKey(q2, kv, algo) {
    var t2;
    var k2;
    do {
      t2 = Buffer2.alloc(0);
      while (t2.length * 8 < q2.bitLength()) {
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
        t2 = Buffer2.concat([t2, kv.v]);
      }
      k2 = bits2int(t2, q2);
      kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer2.from([0])).digest();
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    } while (k2.cmp(q2) !== -1);
    return k2;
  }
  function makeR(g2, k2, p2, q2) {
    return g2.toRed(BN.mont(p2)).redPow(k2).fromRed().mod(q2);
  }
  sign$1.exports = sign2;
  sign$1.exports.getKey = getKey;
  sign$1.exports.makeKey = makeKey;
  return sign$1.exports;
}
var verify_1$1;
var hasRequiredVerify;
function requireVerify() {
  if (hasRequiredVerify) return verify_1$1;
  hasRequiredVerify = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var BN = requireBn();
  var EC = requireElliptic().ec;
  var parseKeys = requireParseAsn1();
  var curves2 = require$$4;
  function verify2(sig, hash2, key2, signType, tag) {
    var pub = parseKeys(key2);
    if (pub.type === "ec") {
      if (signType !== "ecdsa" && signType !== "ecdsa/rsa") {
        throw new Error("wrong public key type");
      }
      return ecVerify(sig, hash2, pub);
    } else if (pub.type === "dsa") {
      if (signType !== "dsa") {
        throw new Error("wrong public key type");
      }
      return dsaVerify(sig, hash2, pub);
    }
    if (signType !== "rsa" && signType !== "ecdsa/rsa") {
      throw new Error("wrong public key type");
    }
    hash2 = Buffer2.concat([tag, hash2]);
    var len2 = pub.modulus.byteLength();
    var pad2 = [1];
    var padNum = 0;
    while (hash2.length + pad2.length + 2 < len2) {
      pad2.push(255);
      padNum += 1;
    }
    pad2.push(0);
    var i2 = -1;
    while (++i2 < hash2.length) {
      pad2.push(hash2[i2]);
    }
    pad2 = Buffer2.from(pad2);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer2.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len2 = Math.min(sig.length, pad2.length);
    if (sig.length !== pad2.length) {
      out = 1;
    }
    i2 = -1;
    while (++i2 < len2) {
      out |= sig[i2] ^ pad2[i2];
    }
    return out === 0;
  }
  function ecVerify(sig, hash2, pub) {
    var curveId = curves2[pub.data.algorithm.curve.join(".")];
    if (!curveId) {
      throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    }
    var curve2 = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve2.verify(hash2, sig, pubkey);
  }
  function dsaVerify(sig, hash2, pub) {
    var p2 = pub.data.p;
    var q2 = pub.data.q;
    var g2 = pub.data.g;
    var y2 = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, "der");
    var s2 = unpacked.s;
    var r2 = unpacked.r;
    checkValue(s2, q2);
    checkValue(r2, q2);
    var montp = BN.mont(p2);
    var w2 = s2.invm(q2);
    var v2 = g2.toRed(montp).redPow(new BN(hash2).mul(w2).mod(q2)).fromRed().mul(y2.toRed(montp).redPow(r2.mul(w2).mod(q2)).fromRed()).mod(p2).mod(q2);
    return v2.cmp(r2) === 0;
  }
  function checkValue(b2, q2) {
    if (b2.cmpn(0) <= 0) {
      throw new Error("invalid sig");
    }
    if (b2.cmp(q2) >= 0) {
      throw new Error("invalid sig");
    }
  }
  verify_1$1 = verify2;
  return verify_1$1;
}
var browser$3;
var hasRequiredBrowser$3;
function requireBrowser$3() {
  if (hasRequiredBrowser$3) return browser$3;
  hasRequiredBrowser$3 = 1;
  var Buffer2 = safeBufferExports.Buffer;
  var createHash2 = requireBrowser$9();
  var stream = requireReadableBrowser();
  var inherits = requireInherits_browser();
  var sign2 = requireSign();
  var verify2 = requireVerify();
  var algorithms = require$$6;
  Object.keys(algorithms).forEach(function(key2) {
    algorithms[key2].id = Buffer2.from(algorithms[key2].id, "hex");
    algorithms[key2.toLowerCase()] = algorithms[key2];
  });
  function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) {
      throw new Error("Unknown message digest");
    }
    this._hashType = data.hash;
    this._hash = createHash2(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
  }
  inherits(Sign, stream.Writable);
  Sign.prototype._write = function _write(data, _2, done) {
    this._hash.update(data);
    done();
  };
  Sign.prototype.update = function update(data, enc) {
    this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
    return this;
  };
  Sign.prototype.sign = function signMethod(key2, enc) {
    this.end();
    var hash2 = this._hash.digest();
    var sig = sign2(hash2, key2, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
  };
  function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) {
      throw new Error("Unknown message digest");
    }
    this._hash = createHash2(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
  }
  inherits(Verify, stream.Writable);
  Verify.prototype._write = function _write(data, _2, done) {
    this._hash.update(data);
    done();
  };
  Verify.prototype.update = function update(data, enc) {
    this._hash.update(typeof data === "string" ? Buffer2.from(data, enc) : data);
    return this;
  };
  Verify.prototype.verify = function verifyMethod(key2, sig, enc) {
    var sigBuffer = typeof sig === "string" ? Buffer2.from(sig, enc) : sig;
    this.end();
    var hash2 = this._hash.digest();
    return verify2(sigBuffer, hash2, key2, this._signType, this._tag);
  };
  function createSign(algorithm) {
    return new Sign(algorithm);
  }
  function createVerify(algorithm) {
    return new Verify(algorithm);
  }
  browser$3 = {
    Sign: createSign,
    Verify: createVerify,
    createSign,
    createVerify
  };
  return browser$3;
}
var browser$2;
var hasRequiredBrowser$2;
function requireBrowser$2() {
  if (hasRequiredBrowser$2) return browser$2;
  hasRequiredBrowser$2 = 1;
  var elliptic2 = requireElliptic();
  var BN = requireBn$1();
  browser$2 = function createECDH(curve2) {
    return new ECDH(curve2);
  };
  var aliases = {
    secp256k1: {
      name: "secp256k1",
      byteLength: 32
    },
    secp224r1: {
      name: "p224",
      byteLength: 28
    },
    prime256v1: {
      name: "p256",
      byteLength: 32
    },
    prime192v1: {
      name: "p192",
      byteLength: 24
    },
    ed25519: {
      name: "ed25519",
      byteLength: 32
    },
    secp384r1: {
      name: "p384",
      byteLength: 48
    },
    secp521r1: {
      name: "p521",
      byteLength: 66
    }
  };
  aliases.p224 = aliases.secp224r1;
  aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
  aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
  aliases.p384 = aliases.secp384r1;
  aliases.p521 = aliases.secp521r1;
  function ECDH(curve2) {
    this.curveType = aliases[curve2];
    if (!this.curveType) {
      this.curveType = {
        name: curve2
      };
    }
    this.curve = new elliptic2.ec(this.curveType.name);
    this.keys = void 0;
  }
  ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
  };
  ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!Buffer$3.isBuffer(other)) {
      other = new Buffer$3(other, inenc);
    }
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
  };
  ECDH.prototype.getPublicKey = function(enc, format) {
    var key2 = this.keys.getPublic(format === "compressed", true);
    if (format === "hybrid") {
      if (key2[key2.length - 1] % 2) {
        key2[0] = 7;
      } else {
        key2[0] = 6;
      }
    }
    return formatReturnValue(key2, enc);
  };
  ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
  };
  ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!Buffer$3.isBuffer(pub)) {
      pub = new Buffer$3(pub, enc);
    }
    this.keys._importPublic(pub);
    return this;
  };
  ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!Buffer$3.isBuffer(priv)) {
      priv = new Buffer$3(priv, enc);
    }
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
  };
  function formatReturnValue(bn2, enc, len2) {
    if (!Array.isArray(bn2)) {
      bn2 = bn2.toArray();
    }
    var buf = new Buffer$3(bn2);
    if (len2 && buf.length < len2) {
      var zeros = new Buffer$3(len2 - buf.length);
      zeros.fill(0);
      buf = Buffer$3.concat([zeros, buf]);
    }
    if (!enc) {
      return buf;
    } else {
      return buf.toString(enc);
    }
  }
  return browser$2;
}
var browser$1 = {};
var mgf;
var hasRequiredMgf;
function requireMgf() {
  if (hasRequiredMgf) return mgf;
  hasRequiredMgf = 1;
  var createHash2 = requireBrowser$9();
  var Buffer2 = safeBufferExports.Buffer;
  mgf = function(seed, len2) {
    var t2 = Buffer2.alloc(0);
    var i2 = 0;
    var c2;
    while (t2.length < len2) {
      c2 = i2ops(i2++);
      t2 = Buffer2.concat([t2, createHash2("sha1").update(seed).update(c2).digest()]);
    }
    return t2.slice(0, len2);
  };
  function i2ops(c2) {
    var out = Buffer2.allocUnsafe(4);
    out.writeUInt32BE(c2, 0);
    return out;
  }
  return mgf;
}
var xor;
var hasRequiredXor;
function requireXor() {
  if (hasRequiredXor) return xor;
  hasRequiredXor = 1;
  xor = function xor2(a2, b2) {
    var len2 = a2.length;
    var i2 = -1;
    while (++i2 < len2) {
      a2[i2] ^= b2[i2];
    }
    return a2;
  };
  return xor;
}
var withPublic_1;
var hasRequiredWithPublic;
function requireWithPublic() {
  if (hasRequiredWithPublic) return withPublic_1;
  hasRequiredWithPublic = 1;
  var BN = requireBn$1();
  var Buffer2 = safeBufferExports.Buffer;
  function withPublic(paddedMsg, key2) {
    return Buffer2.from(paddedMsg.toRed(BN.mont(key2.modulus)).redPow(new BN(key2.publicExponent)).fromRed().toArray());
  }
  withPublic_1 = withPublic;
  return withPublic_1;
}
var publicEncrypt;
var hasRequiredPublicEncrypt;
function requirePublicEncrypt() {
  if (hasRequiredPublicEncrypt) return publicEncrypt;
  hasRequiredPublicEncrypt = 1;
  var parseKeys = requireParseAsn1();
  var randomBytes2 = browserExports;
  var createHash2 = requireBrowser$9();
  var mgf2 = requireMgf();
  var xor2 = requireXor();
  var BN = requireBn$1();
  var withPublic = requireWithPublic();
  var crt = requireBrowserifyRsa();
  var Buffer2 = safeBufferExports.Buffer;
  publicEncrypt = function publicEncrypt2(publicKey, msg, reverse2) {
    var padding;
    if (publicKey.padding) {
      padding = publicKey.padding;
    } else if (reverse2) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key2 = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) {
      paddedMsg = oaep(key2, msg);
    } else if (padding === 1) {
      paddedMsg = pkcs1(key2, msg, reverse2);
    } else if (padding === 3) {
      paddedMsg = new BN(msg);
      if (paddedMsg.cmp(key2.modulus) >= 0) {
        throw new Error("data too long for modulus");
      }
    } else {
      throw new Error("unknown padding");
    }
    if (reverse2) {
      return crt(paddedMsg, key2);
    } else {
      return withPublic(paddedMsg, key2);
    }
  };
  function oaep(key2, msg) {
    var k2 = key2.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash2("sha1").update(Buffer2.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k2 - hLen2 - 2) {
      throw new Error("message too long");
    }
    var ps = Buffer2.alloc(k2 - mLen - hLen2 - 2);
    var dblen = k2 - hLen - 1;
    var seed = randomBytes2(hLen);
    var maskedDb = xor2(Buffer2.concat([iHash, ps, Buffer2.alloc(1, 1), msg], dblen), mgf2(seed, dblen));
    var maskedSeed = xor2(seed, mgf2(maskedDb, hLen));
    return new BN(Buffer2.concat([Buffer2.alloc(1), maskedSeed, maskedDb], k2));
  }
  function pkcs1(key2, msg, reverse2) {
    var mLen = msg.length;
    var k2 = key2.modulus.byteLength();
    if (mLen > k2 - 11) {
      throw new Error("message too long");
    }
    var ps;
    if (reverse2) {
      ps = Buffer2.alloc(k2 - mLen - 3, 255);
    } else {
      ps = nonZero(k2 - mLen - 3);
    }
    return new BN(Buffer2.concat([Buffer2.from([0, reverse2 ? 1 : 2]), ps, Buffer2.alloc(1), msg], k2));
  }
  function nonZero(len2) {
    var out = Buffer2.allocUnsafe(len2);
    var i2 = 0;
    var cache = randomBytes2(len2 * 2);
    var cur = 0;
    var num;
    while (i2 < len2) {
      if (cur === cache.length) {
        cache = randomBytes2(len2 * 2);
        cur = 0;
      }
      num = cache[cur++];
      if (num) {
        out[i2++] = num;
      }
    }
    return out;
  }
  return publicEncrypt;
}
var privateDecrypt;
var hasRequiredPrivateDecrypt;
function requirePrivateDecrypt() {
  if (hasRequiredPrivateDecrypt) return privateDecrypt;
  hasRequiredPrivateDecrypt = 1;
  var parseKeys = requireParseAsn1();
  var mgf2 = requireMgf();
  var xor2 = requireXor();
  var BN = requireBn$1();
  var crt = requireBrowserifyRsa();
  var createHash2 = requireBrowser$9();
  var withPublic = requireWithPublic();
  var Buffer2 = safeBufferExports.Buffer;
  privateDecrypt = function privateDecrypt2(privateKey, enc, reverse2) {
    var padding;
    if (privateKey.padding) {
      padding = privateKey.padding;
    } else if (reverse2) {
      padding = 1;
    } else {
      padding = 4;
    }
    var key2 = parseKeys(privateKey);
    var k2 = key2.modulus.byteLength();
    if (enc.length > k2 || new BN(enc).cmp(key2.modulus) >= 0) {
      throw new Error("decryption error");
    }
    var msg;
    if (reverse2) {
      msg = withPublic(new BN(enc), key2);
    } else {
      msg = crt(enc, key2);
    }
    var zBuffer = Buffer2.alloc(k2 - msg.length);
    msg = Buffer2.concat([zBuffer, msg], k2);
    if (padding === 4) {
      return oaep(key2, msg);
    } else if (padding === 1) {
      return pkcs1(key2, msg, reverse2);
    } else if (padding === 3) {
      return msg;
    } else {
      throw new Error("unknown padding");
    }
  };
  function oaep(key2, msg) {
    var k2 = key2.modulus.byteLength();
    var iHash = createHash2("sha1").update(Buffer2.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) {
      throw new Error("decryption error");
    }
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor2(maskedSeed, mgf2(maskedDb, hLen));
    var db = xor2(maskedDb, mgf2(seed, k2 - hLen - 1));
    if (compare2(iHash, db.slice(0, hLen))) {
      throw new Error("decryption error");
    }
    var i2 = hLen;
    while (db[i2] === 0) {
      i2++;
    }
    if (db[i2++] !== 1) {
      throw new Error("decryption error");
    }
    return db.slice(i2);
  }
  function pkcs1(key2, msg, reverse2) {
    var p1 = msg.slice(0, 2);
    var i2 = 2;
    var status = 0;
    while (msg[i2++] !== 0) {
      if (i2 >= msg.length) {
        status++;
        break;
      }
    }
    var ps = msg.slice(2, i2 - 1);
    if (p1.toString("hex") !== "0002" && !reverse2 || p1.toString("hex") !== "0001" && reverse2) {
      status++;
    }
    if (ps.length < 8) {
      status++;
    }
    if (status) {
      throw new Error("decryption error");
    }
    return msg.slice(i2);
  }
  function compare2(a2, b2) {
    a2 = Buffer2.from(a2);
    b2 = Buffer2.from(b2);
    var dif = 0;
    var len2 = a2.length;
    if (a2.length !== b2.length) {
      dif++;
      len2 = Math.min(a2.length, b2.length);
    }
    var i2 = -1;
    while (++i2 < len2) {
      dif += a2[i2] ^ b2[i2];
    }
    return dif;
  }
  return privateDecrypt;
}
var hasRequiredBrowser$1;
function requireBrowser$1() {
  if (hasRequiredBrowser$1) return browser$1;
  hasRequiredBrowser$1 = 1;
  (function(exports2) {
    exports2.publicEncrypt = requirePublicEncrypt();
    exports2.privateDecrypt = requirePrivateDecrypt();
    exports2.privateEncrypt = function privateEncrypt(key2, buf) {
      return exports2.publicEncrypt(key2, buf, true);
    };
    exports2.publicDecrypt = function publicDecrypt(key2, buf) {
      return exports2.privateDecrypt(key2, buf, true);
    };
  })(browser$1);
  return browser$1;
}
var browser = {};
var hasRequiredBrowser;
function requireBrowser() {
  if (hasRequiredBrowser) return browser;
  hasRequiredBrowser = 1;
  function oldBrowser2() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
  }
  var safeBuffer2 = safeBufferExports;
  var randombytes = browserExports;
  var Buffer2 = safeBuffer2.Buffer;
  var kBufferMaxLength = safeBuffer2.kMaxLength;
  var crypto2 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;
  var kMaxUint32 = Math.pow(2, 32) - 1;
  function assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) {
      throw new TypeError("offset must be a number");
    }
    if (offset > kMaxUint32 || offset < 0) {
      throw new TypeError("offset must be a uint32");
    }
    if (offset > kBufferMaxLength || offset > length) {
      throw new RangeError("offset out of range");
    }
  }
  function assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) {
      throw new TypeError("size must be a number");
    }
    if (size > kMaxUint32 || size < 0) {
      throw new TypeError("size must be a uint32");
    }
    if (size + offset > length || size > kBufferMaxLength) {
      throw new RangeError("buffer too small");
    }
  }
  if (crypto2 && crypto2.getRandomValues || !process$1.browser) {
    browser.randomFill = randomFill;
    browser.randomFillSync = randomFillSync;
  } else {
    browser.randomFill = oldBrowser2;
    browser.randomFillSync = oldBrowser2;
  }
  function randomFill(buf, offset, size, cb) {
    if (!Buffer2.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    if (typeof offset === "function") {
      cb = offset;
      offset = 0;
      size = buf.length;
    } else if (typeof size === "function") {
      cb = size;
      size = buf.length - offset;
    } else if (typeof cb !== "function") {
      throw new TypeError('"cb" argument must be a function');
    }
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
  }
  function actualFill(buf, offset, size, cb) {
    if (process$1.browser) {
      var ourBuf = buf.buffer;
      var uint = new Uint8Array(ourBuf, offset, size);
      crypto2.getRandomValues(uint);
      if (cb) {
        process$1.nextTick(function() {
          cb(null, buf);
        });
        return;
      }
      return buf;
    }
    if (cb) {
      randombytes(size, function(err, bytes3) {
        if (err) {
          return cb(err);
        }
        bytes3.copy(buf, offset);
        cb(null, buf);
      });
      return;
    }
    var bytes2 = randombytes(size);
    bytes2.copy(buf, offset);
    return buf;
  }
  function randomFillSync(buf, offset, size) {
    if (typeof offset === "undefined") {
      offset = 0;
    }
    if (!Buffer2.isBuffer(buf) && !(buf instanceof commonjsGlobal.Uint8Array)) {
      throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    }
    assertOffset(offset, buf.length);
    if (size === void 0) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
  }
  return browser;
}
var hasRequiredCryptoBrowserify;
function requireCryptoBrowserify() {
  if (hasRequiredCryptoBrowserify) return cryptoBrowserify;
  hasRequiredCryptoBrowserify = 1;
  cryptoBrowserify.randomBytes = cryptoBrowserify.rng = cryptoBrowserify.pseudoRandomBytes = cryptoBrowserify.prng = browserExports;
  cryptoBrowserify.createHash = cryptoBrowserify.Hash = requireBrowser$9();
  cryptoBrowserify.createHmac = cryptoBrowserify.Hmac = requireBrowser$8();
  var algos2 = requireAlgos();
  var algoKeys = Object.keys(algos2);
  var hashes = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(algoKeys);
  cryptoBrowserify.getHashes = function() {
    return hashes;
  };
  var p2 = requireBrowser$7();
  cryptoBrowserify.pbkdf2 = p2.pbkdf2;
  cryptoBrowserify.pbkdf2Sync = p2.pbkdf2Sync;
  var aes2 = requireBrowser$5();
  cryptoBrowserify.Cipher = aes2.Cipher;
  cryptoBrowserify.createCipher = aes2.createCipher;
  cryptoBrowserify.Cipheriv = aes2.Cipheriv;
  cryptoBrowserify.createCipheriv = aes2.createCipheriv;
  cryptoBrowserify.Decipher = aes2.Decipher;
  cryptoBrowserify.createDecipher = aes2.createDecipher;
  cryptoBrowserify.Decipheriv = aes2.Decipheriv;
  cryptoBrowserify.createDecipheriv = aes2.createDecipheriv;
  cryptoBrowserify.getCiphers = aes2.getCiphers;
  cryptoBrowserify.listCiphers = aes2.listCiphers;
  var dh2 = requireBrowser$4();
  cryptoBrowserify.DiffieHellmanGroup = dh2.DiffieHellmanGroup;
  cryptoBrowserify.createDiffieHellmanGroup = dh2.createDiffieHellmanGroup;
  cryptoBrowserify.getDiffieHellman = dh2.getDiffieHellman;
  cryptoBrowserify.createDiffieHellman = dh2.createDiffieHellman;
  cryptoBrowserify.DiffieHellman = dh2.DiffieHellman;
  var sign2 = requireBrowser$3();
  cryptoBrowserify.createSign = sign2.createSign;
  cryptoBrowserify.Sign = sign2.Sign;
  cryptoBrowserify.createVerify = sign2.createVerify;
  cryptoBrowserify.Verify = sign2.Verify;
  cryptoBrowserify.createECDH = requireBrowser$2();
  var publicEncrypt2 = requireBrowser$1();
  cryptoBrowserify.publicEncrypt = publicEncrypt2.publicEncrypt;
  cryptoBrowserify.privateEncrypt = publicEncrypt2.privateEncrypt;
  cryptoBrowserify.publicDecrypt = publicEncrypt2.publicDecrypt;
  cryptoBrowserify.privateDecrypt = publicEncrypt2.privateDecrypt;
  var rf = requireBrowser();
  cryptoBrowserify.randomFill = rf.randomFill;
  cryptoBrowserify.randomFillSync = rf.randomFillSync;
  cryptoBrowserify.createCredentials = function() {
    throw new Error([
      "sorry, createCredentials is not implemented yet",
      "we accept pull requests",
      "https://github.com/crypto-browserify/crypto-browserify"
    ].join("\n"));
  };
  cryptoBrowserify.constants = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
  };
  return cryptoBrowserify;
}
(function(exports2) {
  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.utils = exports2.schnorr = exports2.verify = exports2.signSync = exports2.sign = exports2.getSharedSecret = exports2.recoverPublicKey = exports2.getPublicKey = exports2.Signature = exports2.Point = exports2.CURVE = void 0;
  const nodeCrypto = requireCryptoBrowserify();
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _3n = BigInt(3);
  const _8n = BigInt(8);
  const CURVE = Object.freeze({
    a: _0n,
    b: BigInt(7),
    P: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
    n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
    h: _1n,
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee")
  });
  exports2.CURVE = CURVE;
  const divNearest = (a2, b2) => (a2 + b2 / _2n) / b2;
  const endo = {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar(k2) {
      const { n: n2 } = CURVE;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b2 * k2, n2);
      const c2 = divNearest(-b1 * k2, n2);
      let k1 = mod(k2 - c1 * a1 - c2 * a2, n2);
      let k22 = mod(-c1 * b1 - c2 * b2, n2);
      const k1neg = k1 > POW_2_128;
      const k2neg = k22 > POW_2_128;
      if (k1neg)
        k1 = n2 - k1;
      if (k2neg)
        k22 = n2 - k22;
      if (k1 > POW_2_128 || k22 > POW_2_128) {
        throw new Error("splitScalarEndo: Endomorphism failed, k=" + k2);
      }
      return { k1neg, k1, k2neg, k2: k22 };
    }
  };
  const fieldLen = 32;
  const groupLen = 32;
  const hashLen = 32;
  const compressedLen = fieldLen + 1;
  const uncompressedLen = 2 * fieldLen + 1;
  function weierstrass(x2) {
    const { a: a2, b: b2 } = CURVE;
    const x22 = mod(x2 * x2);
    const x3 = mod(x22 * x2);
    return mod(x3 + a2 * x2 + b2);
  }
  const USE_ENDOMORPHISM = CURVE.a === _0n;
  class ShaError extends Error {
    constructor(message) {
      super(message);
    }
  }
  function assertJacPoint(other) {
    if (!(other instanceof JacobianPoint))
      throw new TypeError("JacobianPoint expected");
  }
  class JacobianPoint {
    constructor(x2, y2, z2) {
      this.x = x2;
      this.y = y2;
      this.z = z2;
    }
    static fromAffine(p2) {
      if (!(p2 instanceof Point)) {
        throw new TypeError("JacobianPoint#fromAffine: expected Point");
      }
      if (p2.equals(Point.ZERO))
        return JacobianPoint.ZERO;
      return new JacobianPoint(p2.x, p2.y, _1n);
    }
    static toAffineBatch(points) {
      const toInv = invertBatch(points.map((p2) => p2.z));
      return points.map((p2, i2) => p2.toAffine(toInv[i2]));
    }
    static normalizeZ(points) {
      return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
    }
    equals(other) {
      assertJacPoint(other);
      const { x: X1, y: Y1, z: Z1 } = this;
      const { x: X2, y: Y2, z: Z2 } = other;
      const Z1Z1 = mod(Z1 * Z1);
      const Z2Z2 = mod(Z2 * Z2);
      const U1 = mod(X1 * Z2Z2);
      const U2 = mod(X2 * Z1Z1);
      const S1 = mod(mod(Y1 * Z2) * Z2Z2);
      const S2 = mod(mod(Y2 * Z1) * Z1Z1);
      return U1 === U2 && S1 === S2;
    }
    negate() {
      return new JacobianPoint(this.x, mod(-this.y), this.z);
    }
    double() {
      const { x: X1, y: Y1, z: Z1 } = this;
      const A2 = mod(X1 * X1);
      const B = mod(Y1 * Y1);
      const C2 = mod(B * B);
      const x1b = X1 + B;
      const D2 = mod(_2n * (mod(x1b * x1b) - A2 - C2));
      const E2 = mod(_3n * A2);
      const F2 = mod(E2 * E2);
      const X3 = mod(F2 - _2n * D2);
      const Y3 = mod(E2 * (D2 - X3) - _8n * C2);
      const Z3 = mod(_2n * Y1 * Z1);
      return new JacobianPoint(X3, Y3, Z3);
    }
    add(other) {
      assertJacPoint(other);
      const { x: X1, y: Y1, z: Z1 } = this;
      const { x: X2, y: Y2, z: Z2 } = other;
      if (X2 === _0n || Y2 === _0n)
        return this;
      if (X1 === _0n || Y1 === _0n)
        return other;
      const Z1Z1 = mod(Z1 * Z1);
      const Z2Z2 = mod(Z2 * Z2);
      const U1 = mod(X1 * Z2Z2);
      const U2 = mod(X2 * Z1Z1);
      const S1 = mod(mod(Y1 * Z2) * Z2Z2);
      const S2 = mod(mod(Y2 * Z1) * Z1Z1);
      const H2 = mod(U2 - U1);
      const r2 = mod(S2 - S1);
      if (H2 === _0n) {
        if (r2 === _0n) {
          return this.double();
        } else {
          return JacobianPoint.ZERO;
        }
      }
      const HH = mod(H2 * H2);
      const HHH = mod(H2 * HH);
      const V = mod(U1 * HH);
      const X3 = mod(r2 * r2 - HHH - _2n * V);
      const Y3 = mod(r2 * (V - X3) - S1 * HHH);
      const Z3 = mod(Z1 * Z2 * H2);
      return new JacobianPoint(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    multiplyUnsafe(scalar) {
      const P0 = JacobianPoint.ZERO;
      if (typeof scalar === "bigint" && scalar === _0n)
        return P0;
      let n2 = normalizeScalar2(scalar);
      if (n2 === _1n)
        return this;
      if (!USE_ENDOMORPHISM) {
        let p2 = P0;
        let d3 = this;
        while (n2 > _0n) {
          if (n2 & _1n)
            p2 = p2.add(d3);
          d3 = d3.double();
          n2 >>= _1n;
        }
        return p2;
      }
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
      let k1p = P0;
      let k2p = P0;
      let d2 = this;
      while (k1 > _0n || k2 > _0n) {
        if (k1 & _1n)
          k1p = k1p.add(d2);
        if (k2 & _1n)
          k2p = k2p.add(d2);
        d2 = d2.double();
        k1 >>= _1n;
        k2 >>= _1n;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
      return k1p.add(k2p);
    }
    precomputeWindow(W) {
      const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
      const points = [];
      let p2 = this;
      let base2 = p2;
      for (let window2 = 0; window2 < windows; window2++) {
        base2 = p2;
        points.push(base2);
        for (let i2 = 1; i2 < 2 ** (W - 1); i2++) {
          base2 = base2.add(p2);
          points.push(base2);
        }
        p2 = base2.double();
      }
      return points;
    }
    wNAF(n2, affinePoint) {
      if (!affinePoint && this.equals(JacobianPoint.BASE))
        affinePoint = Point.BASE;
      const W = affinePoint && affinePoint._WINDOW_SIZE || 1;
      if (256 % W) {
        throw new Error("Point#wNAF: Invalid precomputation window, must be power of 2");
      }
      let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
      if (!precomputes) {
        precomputes = this.precomputeWindow(W);
        if (affinePoint && W !== 1) {
          precomputes = JacobianPoint.normalizeZ(precomputes);
          pointPrecomputes.set(affinePoint, precomputes);
        }
      }
      let p2 = JacobianPoint.ZERO;
      let f2 = JacobianPoint.BASE;
      const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
      const windowSize = 2 ** (W - 1);
      const mask = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n2 & mask);
        n2 >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n2 += _1n;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p2 = p2.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p: p2, f: f2 };
    }
    multiply(scalar, affinePoint) {
      let n2 = normalizeScalar2(scalar);
      let point;
      let fake;
      if (USE_ENDOMORPHISM) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
        let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
        let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
        k1p = constTimeNegate(k1neg, k1p);
        k2p = constTimeNegate(k2neg, k2p);
        k2p = new JacobianPoint(mod(k2p.x * endo.beta), k2p.y, k2p.z);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p: p2, f: f2 } = this.wNAF(n2, affinePoint);
        point = p2;
        fake = f2;
      }
      return JacobianPoint.normalizeZ([point, fake])[0];
    }
    toAffine(invZ) {
      const { x: x2, y: y2, z: z2 } = this;
      const is0 = this.equals(JacobianPoint.ZERO);
      if (invZ == null)
        invZ = is0 ? _8n : invert2(z2);
      const iz1 = invZ;
      const iz2 = mod(iz1 * iz1);
      const iz3 = mod(iz2 * iz1);
      const ax = mod(x2 * iz2);
      const ay = mod(y2 * iz3);
      const zz = mod(z2 * iz1);
      if (is0)
        return Point.ZERO;
      if (zz !== _1n)
        throw new Error("invZ was invalid");
      return new Point(ax, ay);
    }
  }
  JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
  JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
  function constTimeNegate(condition, item) {
    const neg = item.negate();
    return condition ? neg : item;
  }
  const pointPrecomputes = /* @__PURE__ */ new WeakMap();
  class Point {
    constructor(x2, y2) {
      this.x = x2;
      this.y = y2;
    }
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    hasEvenY() {
      return this.y % _2n === _0n;
    }
    static fromCompressedHex(bytes2) {
      const isShort = bytes2.length === 32;
      const x2 = bytesToNumber2(isShort ? bytes2 : bytes2.subarray(1));
      if (!isValidFieldElement(x2))
        throw new Error("Point is not on curve");
      const y2 = weierstrass(x2);
      let y3 = sqrtMod(y2);
      const isYOdd = (y3 & _1n) === _1n;
      if (isShort) {
        if (isYOdd)
          y3 = mod(-y3);
      } else {
        const isFirstByteOdd = (bytes2[0] & 1) === 1;
        if (isFirstByteOdd !== isYOdd)
          y3 = mod(-y3);
      }
      const point = new Point(x2, y3);
      point.assertValidity();
      return point;
    }
    static fromUncompressedHex(bytes2) {
      const x2 = bytesToNumber2(bytes2.subarray(1, fieldLen + 1));
      const y2 = bytesToNumber2(bytes2.subarray(fieldLen + 1, fieldLen * 2 + 1));
      const point = new Point(x2, y2);
      point.assertValidity();
      return point;
    }
    static fromHex(hex) {
      const bytes2 = ensureBytes(hex);
      const len2 = bytes2.length;
      const header = bytes2[0];
      if (len2 === fieldLen)
        return this.fromCompressedHex(bytes2);
      if (len2 === compressedLen && (header === 2 || header === 3)) {
        return this.fromCompressedHex(bytes2);
      }
      if (len2 === uncompressedLen && header === 4)
        return this.fromUncompressedHex(bytes2);
      throw new Error(`Point.fromHex: received invalid point. Expected 32-${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes, not ${len2}`);
    }
    static fromPrivateKey(privateKey) {
      return Point.BASE.multiply(normalizePrivateKey2(privateKey));
    }
    static fromSignature(msgHash, signature2, recovery) {
      const { r: r2, s: s2 } = normalizeSignature(signature2);
      if (![0, 1, 2, 3].includes(recovery))
        throw new Error("Cannot recover: invalid recovery bit");
      const h2 = truncateHash(ensureBytes(msgHash));
      const { n: n2 } = CURVE;
      const radj = recovery === 2 || recovery === 3 ? r2 + n2 : r2;
      const rinv = invert2(radj, n2);
      const u1 = mod(-h2 * rinv, n2);
      const u2 = mod(s2 * rinv, n2);
      const prefix = recovery & 1 ? "03" : "02";
      const R2 = Point.fromHex(prefix + numTo32bStr(radj));
      const Q2 = Point.BASE.multiplyAndAddUnsafe(R2, u1, u2);
      if (!Q2)
        throw new Error("Cannot recover signature: point at infinify");
      Q2.assertValidity();
      return Q2;
    }
    toRawBytes(isCompressed = false) {
      return hexToBytes(this.toHex(isCompressed));
    }
    toHex(isCompressed = false) {
      const x2 = numTo32bStr(this.x);
      if (isCompressed) {
        const prefix = this.hasEvenY() ? "02" : "03";
        return `${prefix}${x2}`;
      } else {
        return `04${x2}${numTo32bStr(this.y)}`;
      }
    }
    toHexX() {
      return this.toHex(true).slice(2);
    }
    toRawX() {
      return this.toRawBytes(true).slice(1);
    }
    assertValidity() {
      const msg = "Point is not on elliptic curve";
      const { x: x2, y: y2 } = this;
      if (!isValidFieldElement(x2) || !isValidFieldElement(y2))
        throw new Error(msg);
      const left = mod(y2 * y2);
      const right = weierstrass(x2);
      if (mod(left - right) !== _0n)
        throw new Error(msg);
    }
    equals(other) {
      return this.x === other.x && this.y === other.y;
    }
    negate() {
      return new Point(this.x, mod(-this.y));
    }
    double() {
      return JacobianPoint.fromAffine(this).double().toAffine();
    }
    add(other) {
      return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
    }
    subtract(other) {
      return this.add(other.negate());
    }
    multiply(scalar) {
      return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
    }
    multiplyAndAddUnsafe(Q2, a2, b2) {
      const P2 = JacobianPoint.fromAffine(this);
      const aP = a2 === _0n || a2 === _1n || this !== Point.BASE ? P2.multiplyUnsafe(a2) : P2.multiply(a2);
      const bQ = JacobianPoint.fromAffine(Q2).multiplyUnsafe(b2);
      const sum = aP.add(bQ);
      return sum.equals(JacobianPoint.ZERO) ? void 0 : sum.toAffine();
    }
  }
  exports2.Point = Point;
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
  Point.ZERO = new Point(_0n, _0n);
  function sliceDER(s2) {
    return Number.parseInt(s2[0], 16) >= 8 ? "00" + s2 : s2;
  }
  function parseDERInt(data) {
    if (data.length < 2 || data[0] !== 2) {
      throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
    }
    const len2 = data[1];
    const res = data.subarray(2, len2 + 2);
    if (!len2 || res.length !== len2) {
      throw new Error(`Invalid signature integer: wrong length`);
    }
    if (res[0] === 0 && res[1] <= 127) {
      throw new Error("Invalid signature integer: trailing length");
    }
    return { data: bytesToNumber2(res), left: data.subarray(len2 + 2) };
  }
  function parseDERSignature(data) {
    if (data.length < 2 || data[0] != 48) {
      throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
    }
    if (data[1] !== data.length - 2) {
      throw new Error("Invalid signature: incorrect length");
    }
    const { data: r2, left: sBytes } = parseDERInt(data.subarray(2));
    const { data: s2, left: rBytesLeft } = parseDERInt(sBytes);
    if (rBytesLeft.length) {
      throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
    }
    return { r: r2, s: s2 };
  }
  class Signature {
    constructor(r2, s2) {
      this.r = r2;
      this.s = s2;
      this.assertValidity();
    }
    static fromCompact(hex) {
      const arr = hex instanceof Uint8Array;
      const name2 = "Signature.fromCompact";
      if (typeof hex !== "string" && !arr)
        throw new TypeError(`${name2}: Expected string or Uint8Array`);
      const str = arr ? bytesToHex(hex) : hex;
      if (str.length !== 128)
        throw new Error(`${name2}: Expected 64-byte hex`);
      return new Signature(hexToNumber2(str.slice(0, 64)), hexToNumber2(str.slice(64, 128)));
    }
    static fromDER(hex) {
      const arr = hex instanceof Uint8Array;
      if (typeof hex !== "string" && !arr)
        throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
      const { r: r2, s: s2 } = parseDERSignature(arr ? hex : hexToBytes(hex));
      return new Signature(r2, s2);
    }
    static fromHex(hex) {
      return this.fromDER(hex);
    }
    assertValidity() {
      const { r: r2, s: s2 } = this;
      if (!isWithinCurveOrder(r2))
        throw new Error("Invalid Signature: r must be 0 < r < n");
      if (!isWithinCurveOrder(s2))
        throw new Error("Invalid Signature: s must be 0 < s < n");
    }
    hasHighS() {
      const HALF = CURVE.n >> _1n;
      return this.s > HALF;
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, mod(-this.s, CURVE.n)) : this;
    }
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      const sHex = sliceDER(numberToHexUnpadded(this.s));
      const rHex = sliceDER(numberToHexUnpadded(this.r));
      const sHexL = sHex.length / 2;
      const rHexL = rHex.length / 2;
      const sLen = numberToHexUnpadded(sHexL);
      const rLen = numberToHexUnpadded(rHexL);
      const length = numberToHexUnpadded(rHexL + sHexL + 4);
      return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
    }
    toRawBytes() {
      return this.toDERRawBytes();
    }
    toHex() {
      return this.toDERHex();
    }
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numTo32bStr(this.r) + numTo32bStr(this.s);
    }
  }
  exports2.Signature = Signature;
  function concatBytes(...arrays) {
    if (!arrays.every((b2) => b2 instanceof Uint8Array))
      throw new Error("Uint8Array list expected");
    if (arrays.length === 1)
      return arrays[0];
    const length = arrays.reduce((a2, arr) => a2 + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i2 = 0, pad2 = 0; i2 < arrays.length; i2++) {
      const arr = arrays[i2];
      result.set(arr, pad2);
      pad2 += arr.length;
    }
    return result;
  }
  const hexes = Array.from({ length: 256 }, (v2, i2) => i2.toString(16).padStart(2, "0"));
  function bytesToHex(uint8a) {
    if (!(uint8a instanceof Uint8Array))
      throw new Error("Expected Uint8Array");
    let hex = "";
    for (let i2 = 0; i2 < uint8a.length; i2++) {
      hex += hexes[uint8a[i2]];
    }
    return hex;
  }
  const POW_2_256 = BigInt("0x10000000000000000000000000000000000000000000000000000000000000000");
  function numTo32bStr(num) {
    if (typeof num !== "bigint")
      throw new Error("Expected bigint");
    if (!(_0n <= num && num < POW_2_256))
      throw new Error("Expected number 0 <= n < 2^256");
    return num.toString(16).padStart(64, "0");
  }
  function numTo32b(num) {
    const b2 = hexToBytes(numTo32bStr(num));
    if (b2.length !== 32)
      throw new Error("Error: expected 32 bytes");
    return b2;
  }
  function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber2(hex) {
    if (typeof hex !== "string") {
      throw new TypeError("hexToNumber: expected string, got " + typeof hex);
    }
    return BigInt(`0x${hex}`);
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string") {
      throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    }
    if (hex.length % 2)
      throw new Error("hexToBytes: received invalid unpadded hex" + hex.length);
    const array2 = new Uint8Array(hex.length / 2);
    for (let i2 = 0; i2 < array2.length; i2++) {
      const j2 = i2 * 2;
      const hexByte = hex.slice(j2, j2 + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("Invalid byte sequence");
      array2[i2] = byte;
    }
    return array2;
  }
  function bytesToNumber2(bytes2) {
    return hexToNumber2(bytesToHex(bytes2));
  }
  function ensureBytes(hex) {
    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
  }
  function normalizeScalar2(num) {
    if (typeof num === "number" && Number.isSafeInteger(num) && num > 0)
      return BigInt(num);
    if (typeof num === "bigint" && isWithinCurveOrder(num))
      return num;
    throw new TypeError("Expected valid private scalar: 0 < scalar < curve.n");
  }
  function mod(a2, b2 = CURVE.P) {
    const result = a2 % b2;
    return result >= _0n ? result : b2 + result;
  }
  function pow2(x2, power) {
    const { P: P2 } = CURVE;
    let res = x2;
    while (power-- > _0n) {
      res *= res;
      res %= P2;
    }
    return res;
  }
  function sqrtMod(x2) {
    const { P: P2 } = CURVE;
    const _6n = BigInt(6);
    const _11n = BigInt(11);
    const _22n = BigInt(22);
    const _23n = BigInt(23);
    const _44n = BigInt(44);
    const _88n = BigInt(88);
    const b2 = x2 * x2 * x2 % P2;
    const b3 = b2 * b2 * x2 % P2;
    const b6 = pow2(b3, _3n) * b3 % P2;
    const b9 = pow2(b6, _3n) * b3 % P2;
    const b11 = pow2(b9, _2n) * b2 % P2;
    const b22 = pow2(b11, _11n) * b11 % P2;
    const b44 = pow2(b22, _22n) * b22 % P2;
    const b88 = pow2(b44, _44n) * b44 % P2;
    const b176 = pow2(b88, _88n) * b88 % P2;
    const b220 = pow2(b176, _44n) * b44 % P2;
    const b223 = pow2(b220, _3n) * b3 % P2;
    const t1 = pow2(b223, _23n) * b22 % P2;
    const t2 = pow2(t1, _6n) * b2 % P2;
    const rt = pow2(t2, _2n);
    const xc = rt * rt % P2;
    if (xc !== x2)
      throw new Error("Cannot find square root");
    return rt;
  }
  function invert2(number2, modulo = CURVE.P) {
    if (number2 === _0n || modulo <= _0n) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a2 = mod(number2, modulo);
    let b2 = modulo;
    let x2 = _0n, u2 = _1n;
    while (a2 !== _0n) {
      const q2 = b2 / a2;
      const r2 = b2 % a2;
      const m2 = x2 - u2 * q2;
      b2 = a2, a2 = r2, x2 = u2, u2 = m2;
    }
    const gcd = b2;
    if (gcd !== _1n)
      throw new Error("invert: does not exist");
    return mod(x2, modulo);
  }
  function invertBatch(nums, p2 = CURVE.P) {
    const scratch = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i2) => {
      if (num === _0n)
        return acc;
      scratch[i2] = acc;
      return mod(acc * num, p2);
    }, _1n);
    const inverted = invert2(lastMultiplied, p2);
    nums.reduceRight((acc, num, i2) => {
      if (num === _0n)
        return acc;
      scratch[i2] = mod(acc * scratch[i2], p2);
      return mod(acc * num, p2);
    }, inverted);
    return scratch;
  }
  function bits2int_2(bytes2) {
    const delta = bytes2.length * 8 - groupLen * 8;
    const num = bytesToNumber2(bytes2);
    return delta > 0 ? num >> BigInt(delta) : num;
  }
  function truncateHash(hash2, truncateOnly = false) {
    const h2 = bits2int_2(hash2);
    if (truncateOnly)
      return h2;
    const { n: n2 } = CURVE;
    return h2 >= n2 ? h2 - n2 : h2;
  }
  let _sha256Sync;
  let _hmacSha256Sync;
  class HmacDrbg {
    constructor(hashLen2, qByteLen) {
      this.hashLen = hashLen2;
      this.qByteLen = qByteLen;
      if (typeof hashLen2 !== "number" || hashLen2 < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      this.v = new Uint8Array(hashLen2).fill(1);
      this.k = new Uint8Array(hashLen2).fill(0);
      this.counter = 0;
    }
    hmac(...values) {
      return exports2.utils.hmacSha256(this.k, ...values);
    }
    hmacSync(...values) {
      return _hmacSha256Sync(this.k, ...values);
    }
    checkSync() {
      if (typeof _hmacSha256Sync !== "function")
        throw new ShaError("hmacSha256Sync needs to be set");
    }
    incr() {
      if (this.counter >= 1e3)
        throw new Error("Tried 1,000 k values for sign(), all were invalid");
      this.counter += 1;
    }
    async reseed(seed = new Uint8Array()) {
      this.k = await this.hmac(this.v, Uint8Array.from([0]), seed);
      this.v = await this.hmac(this.v);
      if (seed.length === 0)
        return;
      this.k = await this.hmac(this.v, Uint8Array.from([1]), seed);
      this.v = await this.hmac(this.v);
    }
    reseedSync(seed = new Uint8Array()) {
      this.checkSync();
      this.k = this.hmacSync(this.v, Uint8Array.from([0]), seed);
      this.v = this.hmacSync(this.v);
      if (seed.length === 0)
        return;
      this.k = this.hmacSync(this.v, Uint8Array.from([1]), seed);
      this.v = this.hmacSync(this.v);
    }
    async generate() {
      this.incr();
      let len2 = 0;
      const out = [];
      while (len2 < this.qByteLen) {
        this.v = await this.hmac(this.v);
        const sl = this.v.slice();
        out.push(sl);
        len2 += this.v.length;
      }
      return concatBytes(...out);
    }
    generateSync() {
      this.checkSync();
      this.incr();
      let len2 = 0;
      const out = [];
      while (len2 < this.qByteLen) {
        this.v = this.hmacSync(this.v);
        const sl = this.v.slice();
        out.push(sl);
        len2 += this.v.length;
      }
      return concatBytes(...out);
    }
  }
  function isWithinCurveOrder(num) {
    return _0n < num && num < CURVE.n;
  }
  function isValidFieldElement(num) {
    return _0n < num && num < CURVE.P;
  }
  function kmdToSig(kBytes, m2, d2, lowS = true) {
    const { n: n2 } = CURVE;
    const k2 = truncateHash(kBytes, true);
    if (!isWithinCurveOrder(k2))
      return;
    const kinv = invert2(k2, n2);
    const q2 = Point.BASE.multiply(k2);
    const r2 = mod(q2.x, n2);
    if (r2 === _0n)
      return;
    const s2 = mod(kinv * mod(m2 + d2 * r2, n2), n2);
    if (s2 === _0n)
      return;
    let sig = new Signature(r2, s2);
    let recovery = (q2.x === sig.r ? 0 : 2) | Number(q2.y & _1n);
    if (lowS && sig.hasHighS()) {
      sig = sig.normalizeS();
      recovery ^= 1;
    }
    return { sig, recovery };
  }
  function normalizePrivateKey2(key2) {
    let num;
    if (typeof key2 === "bigint") {
      num = key2;
    } else if (typeof key2 === "number" && Number.isSafeInteger(key2) && key2 > 0) {
      num = BigInt(key2);
    } else if (typeof key2 === "string") {
      if (key2.length !== 2 * groupLen)
        throw new Error("Expected 32 bytes of private key");
      num = hexToNumber2(key2);
    } else if (key2 instanceof Uint8Array) {
      if (key2.length !== groupLen)
        throw new Error("Expected 32 bytes of private key");
      num = bytesToNumber2(key2);
    } else {
      throw new TypeError("Expected valid private key");
    }
    if (!isWithinCurveOrder(num))
      throw new Error("Expected private key: 0 < key < n");
    return num;
  }
  function normalizePublicKey(publicKey) {
    if (publicKey instanceof Point) {
      publicKey.assertValidity();
      return publicKey;
    } else {
      return Point.fromHex(publicKey);
    }
  }
  function normalizeSignature(signature2) {
    if (signature2 instanceof Signature) {
      signature2.assertValidity();
      return signature2;
    }
    try {
      return Signature.fromDER(signature2);
    } catch (error) {
      return Signature.fromCompact(signature2);
    }
  }
  function getPublicKey(privateKey, isCompressed = false) {
    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  exports2.getPublicKey = getPublicKey;
  function recoverPublicKey(msgHash, signature2, recovery, isCompressed = false) {
    return Point.fromSignature(msgHash, signature2, recovery).toRawBytes(isCompressed);
  }
  exports2.recoverPublicKey = recoverPublicKey;
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len2 = (arr || str) && item.length;
    if (arr)
      return len2 === compressedLen || len2 === uncompressedLen;
    if (str)
      return len2 === compressedLen * 2 || len2 === uncompressedLen * 2;
    if (item instanceof Point)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = false) {
    if (isProbPub(privateA))
      throw new TypeError("getSharedSecret: first arg must be private key");
    if (!isProbPub(publicB))
      throw new TypeError("getSharedSecret: second arg must be public key");
    const b2 = normalizePublicKey(publicB);
    b2.assertValidity();
    return b2.multiply(normalizePrivateKey2(privateA)).toRawBytes(isCompressed);
  }
  exports2.getSharedSecret = getSharedSecret;
  function bits2int(bytes2) {
    const slice = bytes2.length > fieldLen ? bytes2.slice(0, fieldLen) : bytes2;
    return bytesToNumber2(slice);
  }
  function bits2octets(bytes2) {
    const z1 = bits2int(bytes2);
    const z2 = mod(z1, CURVE.n);
    return int2octets(z2 < _0n ? z1 : z2);
  }
  function int2octets(num) {
    return numTo32b(num);
  }
  function initSigArgs(msgHash, privateKey, extraEntropy) {
    if (msgHash == null)
      throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
    const h1 = ensureBytes(msgHash);
    const d2 = normalizePrivateKey2(privateKey);
    const seedArgs = [int2octets(d2), bits2octets(h1)];
    if (extraEntropy != null) {
      if (extraEntropy === true)
        extraEntropy = exports2.utils.randomBytes(fieldLen);
      const e2 = ensureBytes(extraEntropy);
      if (e2.length !== fieldLen)
        throw new Error(`sign: Expected ${fieldLen} bytes of extra data`);
      seedArgs.push(e2);
    }
    const seed = concatBytes(...seedArgs);
    const m2 = bits2int(h1);
    return { seed, m: m2, d: d2 };
  }
  function finalizeSig(recSig, opts) {
    const { sig, recovery } = recSig;
    const { der: der2, recovered } = Object.assign({ canonical: true, der: true }, opts);
    const hashed = der2 ? sig.toDERRawBytes() : sig.toCompactRawBytes();
    return recovered ? [hashed, recovery] : hashed;
  }
  async function sign2(msgHash, privKey, opts = {}) {
    const { seed, m: m2, d: d2 } = initSigArgs(msgHash, privKey, opts.extraEntropy);
    const drbg = new HmacDrbg(hashLen, groupLen);
    await drbg.reseed(seed);
    let sig;
    while (!(sig = kmdToSig(await drbg.generate(), m2, d2, opts.canonical)))
      await drbg.reseed();
    return finalizeSig(sig, opts);
  }
  exports2.sign = sign2;
  function signSync(msgHash, privKey, opts = {}) {
    const { seed, m: m2, d: d2 } = initSigArgs(msgHash, privKey, opts.extraEntropy);
    const drbg = new HmacDrbg(hashLen, groupLen);
    drbg.reseedSync(seed);
    let sig;
    while (!(sig = kmdToSig(drbg.generateSync(), m2, d2, opts.canonical)))
      drbg.reseedSync();
    return finalizeSig(sig, opts);
  }
  exports2.signSync = signSync;
  const vopts = { strict: true };
  function verify2(signature2, msgHash, publicKey, opts = vopts) {
    let sig;
    try {
      sig = normalizeSignature(signature2);
      msgHash = ensureBytes(msgHash);
    } catch (error) {
      return false;
    }
    const { r: r2, s: s2 } = sig;
    if (opts.strict && sig.hasHighS())
      return false;
    const h2 = truncateHash(msgHash);
    let P2;
    try {
      P2 = normalizePublicKey(publicKey);
    } catch (error) {
      return false;
    }
    const { n: n2 } = CURVE;
    const sinv = invert2(s2, n2);
    const u1 = mod(h2 * sinv, n2);
    const u2 = mod(r2 * sinv, n2);
    const R2 = Point.BASE.multiplyAndAddUnsafe(P2, u1, u2);
    if (!R2)
      return false;
    const v2 = mod(R2.x, n2);
    return v2 === r2;
  }
  exports2.verify = verify2;
  function schnorrChallengeFinalize(ch) {
    return mod(bytesToNumber2(ch), CURVE.n);
  }
  class SchnorrSignature {
    constructor(r2, s2) {
      this.r = r2;
      this.s = s2;
      this.assertValidity();
    }
    static fromHex(hex) {
      const bytes2 = ensureBytes(hex);
      if (bytes2.length !== 64)
        throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes2.length}`);
      const r2 = bytesToNumber2(bytes2.subarray(0, 32));
      const s2 = bytesToNumber2(bytes2.subarray(32, 64));
      return new SchnorrSignature(r2, s2);
    }
    assertValidity() {
      const { r: r2, s: s2 } = this;
      if (!isValidFieldElement(r2) || !isWithinCurveOrder(s2))
        throw new Error("Invalid signature");
    }
    toHex() {
      return numTo32bStr(this.r) + numTo32bStr(this.s);
    }
    toRawBytes() {
      return hexToBytes(this.toHex());
    }
  }
  function schnorrGetPublicKey(privateKey) {
    return Point.fromPrivateKey(privateKey).toRawX();
  }
  class InternalSchnorrSignature {
    constructor(message, privateKey, auxRand = exports2.utils.randomBytes()) {
      if (message == null)
        throw new TypeError(`sign: Expected valid message, not "${message}"`);
      this.m = ensureBytes(message);
      const { x: x2, scalar } = this.getScalar(normalizePrivateKey2(privateKey));
      this.px = x2;
      this.d = scalar;
      this.rand = ensureBytes(auxRand);
      if (this.rand.length !== 32)
        throw new TypeError("sign: Expected 32 bytes of aux randomness");
    }
    getScalar(priv) {
      const point = Point.fromPrivateKey(priv);
      const scalar = point.hasEvenY() ? priv : CURVE.n - priv;
      return { point, scalar, x: point.toRawX() };
    }
    initNonce(d2, t0h) {
      return numTo32b(d2 ^ bytesToNumber2(t0h));
    }
    finalizeNonce(k0h) {
      const k0 = mod(bytesToNumber2(k0h), CURVE.n);
      if (k0 === _0n)
        throw new Error("sign: Creation of signature failed. k is zero");
      const { point: R2, x: rx, scalar: k2 } = this.getScalar(k0);
      return { R: R2, rx, k: k2 };
    }
    finalizeSig(R2, k2, e2, d2) {
      return new SchnorrSignature(R2.x, mod(k2 + e2 * d2, CURVE.n)).toRawBytes();
    }
    error() {
      throw new Error("sign: Invalid signature produced");
    }
    async calc() {
      const { m: m2, d: d2, px, rand } = this;
      const tag = exports2.utils.taggedHash;
      const t2 = this.initNonce(d2, await tag(TAGS.aux, rand));
      const { R: R2, rx, k: k2 } = this.finalizeNonce(await tag(TAGS.nonce, t2, px, m2));
      const e2 = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m2));
      const sig = this.finalizeSig(R2, k2, e2, d2);
      if (!await schnorrVerify(sig, m2, px))
        this.error();
      return sig;
    }
    calcSync() {
      const { m: m2, d: d2, px, rand } = this;
      const tag = exports2.utils.taggedHashSync;
      const t2 = this.initNonce(d2, tag(TAGS.aux, rand));
      const { R: R2, rx, k: k2 } = this.finalizeNonce(tag(TAGS.nonce, t2, px, m2));
      const e2 = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m2));
      const sig = this.finalizeSig(R2, k2, e2, d2);
      if (!schnorrVerifySync(sig, m2, px))
        this.error();
      return sig;
    }
  }
  async function schnorrSign(msg, privKey, auxRand) {
    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();
  }
  function schnorrSignSync(msg, privKey, auxRand) {
    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();
  }
  function initSchnorrVerify(signature2, message, publicKey) {
    const raw = signature2 instanceof SchnorrSignature;
    const sig = raw ? signature2 : SchnorrSignature.fromHex(signature2);
    if (raw)
      sig.assertValidity();
    return {
      ...sig,
      m: ensureBytes(message),
      P: normalizePublicKey(publicKey)
    };
  }
  function finalizeSchnorrVerify(r2, P2, s2, e2) {
    const R2 = Point.BASE.multiplyAndAddUnsafe(P2, normalizePrivateKey2(s2), mod(-e2, CURVE.n));
    if (!R2 || !R2.hasEvenY() || R2.x !== r2)
      return false;
    return true;
  }
  async function schnorrVerify(signature2, message, publicKey) {
    try {
      const { r: r2, s: s2, m: m2, P: P2 } = initSchnorrVerify(signature2, message, publicKey);
      const e2 = schnorrChallengeFinalize(await exports2.utils.taggedHash(TAGS.challenge, numTo32b(r2), P2.toRawX(), m2));
      return finalizeSchnorrVerify(r2, P2, s2, e2);
    } catch (error) {
      return false;
    }
  }
  function schnorrVerifySync(signature2, message, publicKey) {
    try {
      const { r: r2, s: s2, m: m2, P: P2 } = initSchnorrVerify(signature2, message, publicKey);
      const e2 = schnorrChallengeFinalize(exports2.utils.taggedHashSync(TAGS.challenge, numTo32b(r2), P2.toRawX(), m2));
      return finalizeSchnorrVerify(r2, P2, s2, e2);
    } catch (error) {
      if (error instanceof ShaError)
        throw error;
      return false;
    }
  }
  exports2.schnorr = {
    Signature: SchnorrSignature,
    getPublicKey: schnorrGetPublicKey,
    sign: schnorrSign,
    verify: schnorrVerify,
    signSync: schnorrSignSync,
    verifySync: schnorrVerifySync
  };
  Point.BASE._setWindowSize(8);
  const crypto2 = {
    node: nodeCrypto,
    web: typeof self === "object" && "crypto" in self ? self.crypto : void 0
  };
  const TAGS = {
    challenge: "BIP0340/challenge",
    aux: "BIP0340/aux",
    nonce: "BIP0340/nonce"
  };
  const TAGGED_HASH_PREFIXES = {};
  exports2.utils = {
    bytesToHex,
    hexToBytes,
    concatBytes,
    mod,
    invert: invert2,
    isValidPrivateKey(privateKey) {
      try {
        normalizePrivateKey2(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    _bigintTo32Bytes: numTo32b,
    _normalizePrivateKey: normalizePrivateKey2,
    hashToPrivateKey: (hash2) => {
      hash2 = ensureBytes(hash2);
      const minLen = groupLen + 8;
      if (hash2.length < minLen || hash2.length > 1024) {
        throw new Error(`Expected valid bytes of private key as per FIPS 186`);
      }
      const num = mod(bytesToNumber2(hash2), CURVE.n - _1n) + _1n;
      return numTo32b(num);
    },
    randomBytes: (bytesLength = 32) => {
      if (crypto2.web) {
        return crypto2.web.getRandomValues(new Uint8Array(bytesLength));
      } else if (crypto2.node) {
        const { randomBytes: randomBytes2 } = crypto2.node;
        return Uint8Array.from(randomBytes2(bytesLength));
      } else {
        throw new Error("The environment doesn't have randomBytes function");
      }
    },
    randomPrivateKey: () => exports2.utils.hashToPrivateKey(exports2.utils.randomBytes(groupLen + 8)),
    precompute(windowSize = 8, point = Point.BASE) {
      const cached = point === Point.BASE ? point : new Point(point.x, point.y);
      cached._setWindowSize(windowSize);
      cached.multiply(_3n);
      return cached;
    },
    sha256: async (...messages) => {
      if (crypto2.web) {
        const buffer2 = await crypto2.web.subtle.digest("SHA-256", concatBytes(...messages));
        return new Uint8Array(buffer2);
      } else if (crypto2.node) {
        const { createHash: createHash2 } = crypto2.node;
        const hash2 = createHash2("sha256");
        messages.forEach((m2) => hash2.update(m2));
        return Uint8Array.from(hash2.digest());
      } else {
        throw new Error("The environment doesn't have sha256 function");
      }
    },
    hmacSha256: async (key2, ...messages) => {
      if (crypto2.web) {
        const ckey = await crypto2.web.subtle.importKey("raw", key2, { name: "HMAC", hash: { name: "SHA-256" } }, false, ["sign"]);
        const message = concatBytes(...messages);
        const buffer2 = await crypto2.web.subtle.sign("HMAC", ckey, message);
        return new Uint8Array(buffer2);
      } else if (crypto2.node) {
        const { createHmac } = crypto2.node;
        const hash2 = createHmac("sha256", key2);
        messages.forEach((m2) => hash2.update(m2));
        return Uint8Array.from(hash2.digest());
      } else {
        throw new Error("The environment doesn't have hmac-sha256 function");
      }
    },
    sha256Sync: void 0,
    hmacSha256Sync: void 0,
    taggedHash: async (tag, ...messages) => {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = await exports2.utils.sha256(Uint8Array.from(tag, (c2) => c2.charCodeAt(0)));
        tagP = concatBytes(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return exports2.utils.sha256(tagP, ...messages);
    },
    taggedHashSync: (tag, ...messages) => {
      if (typeof _sha256Sync !== "function")
        throw new ShaError("sha256Sync is undefined, you need to set it");
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = _sha256Sync(Uint8Array.from(tag, (c2) => c2.charCodeAt(0)));
        tagP = concatBytes(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return _sha256Sync(tagP, ...messages);
    },
    _JacobianPoint: JacobianPoint
  };
  Object.defineProperties(exports2.utils, {
    sha256Sync: {
      configurable: false,
      get() {
        return _sha256Sync;
      },
      set(val) {
        if (!_sha256Sync)
          _sha256Sync = val;
      }
    },
    hmacSha256Sync: {
      configurable: false,
      get() {
        return _hmacSha256Sync;
      },
      set(val) {
        if (!_hmacSha256Sync)
          _hmacSha256Sync = val;
      }
    }
  });
})(lib$1);
var necc = lib$1;
var hmac = hmac$2;
var sha256$1 = sha256$5;
function _interopNamespaceDefault(e2) {
  var n2 = /* @__PURE__ */ Object.create(null);
  if (e2) {
    Object.keys(e2).forEach(function(k2) {
      if (k2 !== "default") {
        var d2 = Object.getOwnPropertyDescriptor(e2, k2);
        Object.defineProperty(n2, k2, d2.get ? d2 : {
          enumerable: true,
          get: function() {
            return e2[k2];
          }
        });
      }
    });
  }
  n2.default = e2;
  return Object.freeze(n2);
}
var necc__namespace = /* @__PURE__ */ _interopNamespaceDefault(necc);
const THROW_BAD_PRIVATE = "Expected Private";
const THROW_BAD_POINT = "Expected Point";
const THROW_BAD_TWEAK = "Expected Tweak";
const THROW_BAD_HASH = "Expected Hash";
const THROW_BAD_SIGNATURE = "Expected Signature";
const THROW_BAD_EXTRA_DATA = "Expected Extra Data (32 bytes)";
const THROW_BAD_SCALAR = "Expected Scalar";
const THROW_BAD_RECOVERY_ID = "Bad Recovery Id";
necc__namespace.utils.hmacSha256Sync = (key2, ...msgs) => hmac.hmac(sha256$1.sha256, key2, necc__namespace.utils.concatBytes(...msgs));
necc__namespace.utils.sha256Sync = (...msgs) => sha256$1.sha256(necc__namespace.utils.concatBytes(...msgs));
const normalizePrivateKey = necc__namespace.utils._normalizePrivateKey;
const HASH_SIZE = 32;
const TWEAK_SIZE = 32;
const BN32_N = new Uint8Array([
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  255,
  254,
  186,
  174,
  220,
  230,
  175,
  72,
  160,
  59,
  191,
  210,
  94,
  140,
  208,
  54,
  65,
  65
]);
const EXTRA_DATA_SIZE = 32;
const BN32_ZERO = new Uint8Array(32);
const BN32_P_MINUS_N = new Uint8Array([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  69,
  81,
  35,
  25,
  80,
  183,
  95,
  196,
  64,
  45,
  161,
  114,
  47,
  201,
  186,
  238
]);
function isUint8Array(value3) {
  return value3 instanceof Uint8Array;
}
function cmpBN32(data1, data2) {
  for (let i2 = 0; i2 < 32; ++i2) {
    if (data1[i2] !== data2[i2]) {
      return data1[i2] < data2[i2] ? -1 : 1;
    }
  }
  return 0;
}
function isZero(x2) {
  return cmpBN32(x2, BN32_ZERO) === 0;
}
function isTweak(tweak) {
  if (!(tweak instanceof Uint8Array) || tweak.length !== TWEAK_SIZE || cmpBN32(tweak, BN32_N) >= 0) {
    return false;
  }
  return true;
}
function isSignature(signature2) {
  return signature2 instanceof Uint8Array && signature2.length === 64 && cmpBN32(signature2.subarray(0, 32), BN32_N) < 0 && cmpBN32(signature2.subarray(32, 64), BN32_N) < 0;
}
function isSigrLessThanPMinusN(signature2) {
  return isUint8Array(signature2) && signature2.length === 64 && cmpBN32(signature2.subarray(0, 32), BN32_P_MINUS_N) < 0;
}
function isSignatureNonzeroRS(signature2) {
  return !(isZero(signature2.subarray(0, 32)) || isZero(signature2.subarray(32, 64)));
}
function isHash(h2) {
  return h2 instanceof Uint8Array && h2.length === HASH_SIZE;
}
function isExtraData(e2) {
  return e2 === void 0 || e2 instanceof Uint8Array && e2.length === EXTRA_DATA_SIZE;
}
function hexToNumber(hex) {
  if (typeof hex !== "string") {
    throw new TypeError("hexToNumber: expected string, got " + typeof hex);
  }
  return BigInt(`0x${hex}`);
}
function bytesToNumber(bytes2) {
  return hexToNumber(necc__namespace.utils.bytesToHex(bytes2));
}
function normalizeScalar(scalar) {
  let num;
  if (typeof scalar === "bigint") {
    num = scalar;
  } else if (typeof scalar === "number" && Number.isSafeInteger(scalar) && scalar >= 0) {
    num = BigInt(scalar);
  } else if (typeof scalar === "string") {
    if (scalar.length !== 64)
      throw new Error("Expected 32 bytes of private scalar");
    num = hexToNumber(scalar);
  } else if (scalar instanceof Uint8Array) {
    if (scalar.length !== 32)
      throw new Error("Expected 32 bytes of private scalar");
    num = bytesToNumber(scalar);
  } else {
    throw new TypeError("Expected valid private scalar");
  }
  if (num < 0) throw new Error("Expected private scalar >= 0");
  return num;
}
const _privateAdd = (privateKey, tweak) => {
  const p2 = normalizePrivateKey(privateKey);
  const t2 = normalizeScalar(tweak);
  const add2 = necc__namespace.utils._bigintTo32Bytes(necc__namespace.utils.mod(p2 + t2, necc__namespace.CURVE.n));
  if (necc__namespace.utils.isValidPrivateKey(add2)) return add2;
  else return null;
};
const _privateSub = (privateKey, tweak) => {
  const p2 = normalizePrivateKey(privateKey);
  const t2 = normalizeScalar(tweak);
  const sub = necc__namespace.utils._bigintTo32Bytes(necc__namespace.utils.mod(p2 - t2, necc__namespace.CURVE.n));
  if (necc__namespace.utils.isValidPrivateKey(sub)) return sub;
  else return null;
};
const _privateNegate = (privateKey) => {
  const p2 = normalizePrivateKey(privateKey);
  const not = necc__namespace.utils._bigintTo32Bytes(necc__namespace.CURVE.n - p2);
  if (necc__namespace.utils.isValidPrivateKey(not)) return not;
  else return null;
};
const _pointAddScalar = (p2, tweak, isCompressed) => {
  const P2 = necc__namespace.Point.fromHex(p2);
  const t2 = normalizeScalar(tweak);
  const Q2 = necc__namespace.Point.BASE.multiplyAndAddUnsafe(P2, t2, BigInt(1));
  if (!Q2) throw new Error("Tweaked point at infinity");
  return Q2.toRawBytes(isCompressed);
};
const _pointMultiply = (p2, tweak, isCompressed) => {
  const P2 = necc__namespace.Point.fromHex(p2);
  const h2 = typeof tweak === "string" ? tweak : necc__namespace.utils.bytesToHex(tweak);
  const t2 = BigInt(`0x${h2}`);
  return P2.multiply(t2).toRawBytes(isCompressed);
};
function assumeCompression(compressed, p2) {
  if (compressed === void 0) {
    return p2 !== void 0 ? isPointCompressed(p2) : true;
  }
  return compressed ? true : false;
}
function throwToNull(fn) {
  try {
    return fn();
  } catch (e2) {
    return null;
  }
}
function _isPoint(p2, xOnly) {
  if (p2.length === 32 !== xOnly) return false;
  try {
    return !!necc__namespace.Point.fromHex(p2);
  } catch (e2) {
    return false;
  }
}
function isPoint(p2) {
  return _isPoint(p2, false);
}
function isPointCompressed(p2) {
  const PUBLIC_KEY_COMPRESSED_SIZE = 33;
  return _isPoint(p2, false) && p2.length === PUBLIC_KEY_COMPRESSED_SIZE;
}
function isPrivate(d2) {
  return necc__namespace.utils.isValidPrivateKey(d2);
}
function isXOnlyPoint(p2) {
  return _isPoint(p2, true);
}
function xOnlyPointAddTweak(p2, tweak) {
  if (!isXOnlyPoint(p2)) {
    throw new Error(THROW_BAD_POINT);
  }
  if (!isTweak(tweak)) {
    throw new Error(THROW_BAD_TWEAK);
  }
  return throwToNull(() => {
    const P2 = _pointAddScalar(p2, tweak, true);
    const parity = P2[0] % 2 === 1 ? 1 : 0;
    return { parity, xOnlyPubkey: P2.slice(1) };
  });
}
function xOnlyPointFromPoint(p2) {
  if (!isPoint(p2)) {
    throw new Error(THROW_BAD_POINT);
  }
  return p2.slice(1, 33);
}
function pointFromScalar(sk, compressed) {
  if (!isPrivate(sk)) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  return throwToNull(
    () => necc__namespace.getPublicKey(sk, assumeCompression(compressed))
  );
}
function xOnlyPointFromScalar(d2) {
  if (!isPrivate(d2)) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  return xOnlyPointFromPoint(pointFromScalar(d2));
}
function pointCompress(p2, compressed) {
  if (!isPoint(p2)) {
    throw new Error(THROW_BAD_POINT);
  }
  return necc__namespace.Point.fromHex(p2).toRawBytes(assumeCompression(compressed, p2));
}
function pointMultiply(a2, tweak, compressed) {
  if (!isPoint(a2)) {
    throw new Error(THROW_BAD_POINT);
  }
  if (!isTweak(tweak)) {
    throw new Error(THROW_BAD_TWEAK);
  }
  return throwToNull(
    () => _pointMultiply(a2, tweak, assumeCompression(compressed, a2))
  );
}
function pointAdd(a2, b2, compressed) {
  if (!isPoint(a2) || !isPoint(b2)) {
    throw new Error(THROW_BAD_POINT);
  }
  return throwToNull(() => {
    const A2 = necc__namespace.Point.fromHex(a2);
    const B = necc__namespace.Point.fromHex(b2);
    if (A2.equals(B.negate())) {
      return null;
    } else {
      return A2.add(B).toRawBytes(assumeCompression(compressed, a2));
    }
  });
}
function pointAddScalar(p2, tweak, compressed) {
  if (!isPoint(p2)) {
    throw new Error(THROW_BAD_POINT);
  }
  if (!isTweak(tweak)) {
    throw new Error(THROW_BAD_TWEAK);
  }
  return throwToNull(
    () => _pointAddScalar(p2, tweak, assumeCompression(compressed, p2))
  );
}
function privateAdd(d2, tweak) {
  if (isPrivate(d2) === false) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  if (isTweak(tweak) === false) {
    throw new Error(THROW_BAD_TWEAK);
  }
  return throwToNull(() => _privateAdd(d2, tweak));
}
function privateSub(d2, tweak) {
  if (isPrivate(d2) === false) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  if (isTweak(tweak) === false) {
    throw new Error(THROW_BAD_TWEAK);
  }
  return throwToNull(() => _privateSub(d2, tweak));
}
function privateNegate(d2) {
  if (isPrivate(d2) === false) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  return _privateNegate(d2);
}
function sign(h2, d2, e2) {
  if (!isPrivate(d2)) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  if (!isHash(h2)) {
    throw new Error(THROW_BAD_SCALAR);
  }
  if (!isExtraData(e2)) {
    throw new Error(THROW_BAD_EXTRA_DATA);
  }
  return necc__namespace.signSync(h2, d2, { der: false, extraEntropy: e2 });
}
function signRecoverable(h2, d2, e2) {
  if (!isPrivate(d2)) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  if (!isHash(h2)) {
    throw new Error(THROW_BAD_SCALAR);
  }
  if (!isExtraData(e2)) {
    throw new Error(THROW_BAD_EXTRA_DATA);
  }
  const [signature2, recoveryId] = necc__namespace.signSync(h2, d2, { der: false, extraEntropy: e2, recovered: true });
  return { signature: signature2, recoveryId };
}
function signSchnorr(h2, d2, e2 = Buffer$3.alloc(32, 0)) {
  if (!isPrivate(d2)) {
    throw new Error(THROW_BAD_PRIVATE);
  }
  if (!isHash(h2)) {
    throw new Error(THROW_BAD_SCALAR);
  }
  if (!isExtraData(e2)) {
    throw new Error(THROW_BAD_EXTRA_DATA);
  }
  return necc__namespace.schnorr.signSync(h2, d2, e2);
}
function recover(h2, signature2, recoveryId, compressed) {
  if (!isHash(h2)) {
    throw new Error(THROW_BAD_HASH);
  }
  if (!isSignature(signature2) || !isSignatureNonzeroRS(signature2)) {
    throw new Error(THROW_BAD_SIGNATURE);
  }
  if (recoveryId & 2) {
    if (!isSigrLessThanPMinusN(signature2)) throw new Error(THROW_BAD_RECOVERY_ID);
  }
  if (!isXOnlyPoint(signature2.subarray(0, 32))) {
    throw new Error(THROW_BAD_SIGNATURE);
  }
  return necc__namespace.recoverPublicKey(h2, signature2, recoveryId, assumeCompression(compressed));
}
function verify(h2, Q2, signature2, strict) {
  if (!isPoint(Q2)) {
    throw new Error(THROW_BAD_POINT);
  }
  if (!isSignature(signature2)) {
    throw new Error(THROW_BAD_SIGNATURE);
  }
  if (!isHash(h2)) {
    throw new Error(THROW_BAD_SCALAR);
  }
  return necc__namespace.verify(signature2, h2, Q2, { strict });
}
function verifySchnorr(h2, Q2, signature2) {
  if (!isXOnlyPoint(Q2)) {
    throw new Error(THROW_BAD_POINT);
  }
  if (!isSignature(signature2)) {
    throw new Error(THROW_BAD_SIGNATURE);
  }
  if (!isHash(h2)) {
    throw new Error(THROW_BAD_SCALAR);
  }
  return necc__namespace.schnorr.verifySync(signature2, h2, Q2);
}
var isPoint_1 = dist.isPoint = isPoint;
var isPointCompressed_1 = dist.isPointCompressed = isPointCompressed;
var isPrivate_1 = dist.isPrivate = isPrivate;
var isXOnlyPoint_1 = dist.isXOnlyPoint = isXOnlyPoint;
var pointAdd_1 = dist.pointAdd = pointAdd;
var pointAddScalar_1 = dist.pointAddScalar = pointAddScalar;
var pointCompress_1 = dist.pointCompress = pointCompress;
var pointFromScalar_1 = dist.pointFromScalar = pointFromScalar;
var pointMultiply_1 = dist.pointMultiply = pointMultiply;
var privateAdd_1 = dist.privateAdd = privateAdd;
var privateNegate_1 = dist.privateNegate = privateNegate;
var privateSub_1 = dist.privateSub = privateSub;
var recover_1 = dist.recover = recover;
var sign_1 = dist.sign = sign;
var signRecoverable_1 = dist.signRecoverable = signRecoverable;
var signSchnorr_1 = dist.signSchnorr = signSchnorr;
var verify_1 = dist.verify = verify;
var verifySchnorr_1 = dist.verifySchnorr = verifySchnorr;
var xOnlyPointAddTweak_1 = dist.xOnlyPointAddTweak = xOnlyPointAddTweak;
var xOnlyPointFromPoint_1 = dist.xOnlyPointFromPoint = xOnlyPointFromPoint;
var xOnlyPointFromScalar_1 = dist.xOnlyPointFromScalar = xOnlyPointFromScalar;
const ecc = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: dist,
  isPoint: isPoint_1,
  isPointCompressed: isPointCompressed_1,
  isPrivate: isPrivate_1,
  isXOnlyPoint: isXOnlyPoint_1,
  pointAdd: pointAdd_1,
  pointAddScalar: pointAddScalar_1,
  pointCompress: pointCompress_1,
  pointFromScalar: pointFromScalar_1,
  pointMultiply: pointMultiply_1,
  privateAdd: privateAdd_1,
  privateNegate: privateNegate_1,
  privateSub: privateSub_1,
  recover: recover_1,
  sign: sign_1,
  signRecoverable: signRecoverable_1,
  signSchnorr: signSchnorr_1,
  verify: verify_1,
  verifySchnorr: verifySchnorr_1,
  xOnlyPointAddTweak: xOnlyPointAddTweak_1,
  xOnlyPointFromPoint: xOnlyPointFromPoint_1,
  xOnlyPointFromScalar: xOnlyPointFromScalar_1
}, [dist]);
const MINIMUM_AMOUNT_IN_SATS = 600;
const MAXIMUM_FEE = 5e6;
const INSTANT_BUY_SELLER_INPUT_INDEX = 2;
const BIP32 = src$2.BIP32Factory(ecc);
const CHAIN_CODE = Buffer$3.alloc(32, 1);
class BrowserWalletExtractTxFromNonFinalizedPsbtError extends Error {
  constructor(message = "Cannot extract transaction from non-finalized psbt.") {
    super(message);
    this.name = "BrowserWalletExtractTxFromNonFinalizedPsbtError";
  }
}
class BrowserWalletNetworkMismatchError extends Error {
  constructor(message) {
    super(message);
    this.name = "BrowserWalletNetworkMismatchError";
  }
}
class BrowserWalletNotInstalledError extends Error {
  constructor(message) {
    super(message);
    this.name = "BrowserWalletNotInstalledError";
  }
}
class BrowserWalletRequestCancelledByUserError extends Error {
  constructor(message = "Request canceled by user.") {
    super(message);
    this.name = "BrowserWalletRequestCancelledByUserError";
  }
}
class BrowserWalletSigningError extends Error {
  constructor(message) {
    super(message);
    this.name = "BrowserWalletSigningError";
  }
}
class OrditSDKError extends Error {
  constructor(message) {
    super(message);
    this.name = "OrditSDKError";
  }
}
var src = {};
var ecpair = {};
var networks$1 = {};
Object.defineProperty(networks$1, "__esModule", { value: true });
networks$1.testnet = networks$1.bitcoin = void 0;
networks$1.bitcoin = {
  messagePrefix: "Bitcoin Signed Message:\n",
  bech32: "bc",
  bip32: {
    public: 76067358,
    private: 76066276
  },
  pubKeyHash: 0,
  scriptHash: 5,
  wif: 128
};
networks$1.testnet = {
  messagePrefix: "Bitcoin Signed Message:\n",
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
var types$1 = {};
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.maybe = exports2.Boolean = exports2.Array = exports2.Buffer256bit = exports2.Network = exports2.typeforce = void 0;
  exports2.typeforce = typeforce_1;
  exports2.Network = exports2.typeforce.compile({
    messagePrefix: exports2.typeforce.oneOf(
      exports2.typeforce.Buffer,
      exports2.typeforce.String
    ),
    bip32: {
      public: exports2.typeforce.UInt32,
      private: exports2.typeforce.UInt32
    },
    pubKeyHash: exports2.typeforce.UInt8,
    scriptHash: exports2.typeforce.UInt8,
    wif: exports2.typeforce.UInt8
  });
  exports2.Buffer256bit = exports2.typeforce.BufferN(32);
  exports2.Array = exports2.typeforce.Array;
  exports2.Boolean = exports2.typeforce.Boolean;
  exports2.maybe = exports2.typeforce.maybe;
})(types$1);
var testecc = {};
Object.defineProperty(testecc, "__esModule", { value: true });
testecc.testEcc = void 0;
const h = (hex) => Buffer$3.from(hex, "hex");
function testEcc(ecc2) {
  assert(
    ecc2.isPoint(
      h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  );
  assert(
    !ecc2.isPoint(
      h("030000000000000000000000000000000000000000000000000000000000000005")
    )
  );
  assert(
    ecc2.isPrivate(
      h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  );
  assert(
    ecc2.isPrivate(
      h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
    )
  );
  assert(
    !ecc2.isPrivate(
      h("0000000000000000000000000000000000000000000000000000000000000000")
    )
  );
  assert(
    !ecc2.isPrivate(
      h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")
    )
  );
  assert(
    !ecc2.isPrivate(
      h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.privateAdd(
        h("0000000000000000000000000000000000000000000000000000000000000001"),
        h("0000000000000000000000000000000000000000000000000000000000000000")
      )
    ).equals(
      h("0000000000000000000000000000000000000000000000000000000000000001")
    )
  );
  assert(
    ecc2.privateAdd(
      h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"),
      h("0000000000000000000000000000000000000000000000000000000000000003")
    ) === null
  );
  assert(
    Buffer$3.from(
      ecc2.privateAdd(
        h("e211078564db65c3ce7704f08262b1f38f1ef412ad15b5ac2d76657a63b2c500"),
        h("b51fbb69051255d1becbd683de5848242a89c229348dd72896a87ada94ae8665")
      )
    ).equals(
      h("9730c2ee69edbb958d42db7460bafa18fef9d955325aec99044c81c8282b0a24")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.privateNegate(
        h("0000000000000000000000000000000000000000000000000000000000000001")
      )
    ).equals(
      h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.privateNegate(
        h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e")
      )
    ).equals(
      h("0000000000000000000000000000000000000000000000000000000000000003")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.privateNegate(
        h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")
      )
    ).equals(
      h("4eede1bf775995d70a494f0a7bb6bc11e0b8cccd41cce8009ab1132c8b0a3792")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.pointCompress(
        h(
          "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
        ),
        true
      )
    ).equals(
      h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.pointCompress(
        h(
          "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
        ),
        false
      )
    ).equals(
      h(
        "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
      )
    )
  );
  assert(
    Buffer$3.from(
      ecc2.pointCompress(
        h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
        true
      )
    ).equals(
      h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  );
  assert(
    Buffer$3.from(
      ecc2.pointCompress(
        h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
        false
      )
    ).equals(
      h(
        "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
      )
    )
  );
  assert(
    Buffer$3.from(
      ecc2.pointFromScalar(
        h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")
      )
    ).equals(
      h("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")
    )
  );
  assert(
    ecc2.xOnlyPointAddTweak(
      h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
      h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
    ) === null
  );
  let xOnlyRes = ecc2.xOnlyPointAddTweak(
    h("1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b"),
    h("a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac")
  );
  assert(
    Buffer$3.from(xOnlyRes.xOnlyPubkey).equals(
      h("e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf")
    ) && xOnlyRes.parity === 1
  );
  xOnlyRes = ecc2.xOnlyPointAddTweak(
    h("2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991"),
    h("823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47")
  );
  assert(
    Buffer$3.from(xOnlyRes.xOnlyPubkey).equals(
      h("9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c")
    ) && xOnlyRes.parity === 0
  );
  assert(
    Buffer$3.from(
      ecc2.sign(
        h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
        h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
      )
    ).equals(
      h(
        "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
      )
    )
  );
  assert(
    ecc2.verify(
      h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
      h("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
      h(
        "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
      )
    )
  );
  if (ecc2.signSchnorr) {
    assert(
      Buffer$3.from(
        ecc2.signSchnorr(
          h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
          h("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"),
          h("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")
        )
      ).equals(
        h(
          "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
        )
      )
    );
  }
  if (ecc2.verifySchnorr) {
    assert(
      ecc2.verifySchnorr(
        h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
        h("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"),
        h(
          "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
        )
      )
    );
  }
}
testecc.testEcc = testEcc;
function assert(bool2) {
  if (!bool2) throw new Error("ecc library invalid");
}
Object.defineProperty(ecpair, "__esModule", { value: true });
ecpair.ECPairFactory = ecpair.networks = void 0;
const networks = networks$1;
ecpair.networks = networks;
const types = types$1;
const randomBytes = browserExports;
const wif = wif$2;
const testecc_1 = testecc;
const isOptions = types.typeforce.maybe(
  types.typeforce.compile({
    compressed: types.maybe(types.Boolean),
    network: types.maybe(types.Network)
  })
);
const toXOnly$1 = (pubKey) => pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);
function ECPairFactory(ecc2) {
  (0, testecc_1.testEcc)(ecc2);
  function isPoint2(maybePoint) {
    return ecc2.isPoint(maybePoint);
  }
  function fromPrivateKey(buffer2, options) {
    types.typeforce(types.Buffer256bit, buffer2);
    if (!ecc2.isPrivate(buffer2))
      throw new TypeError("Private key not in range [1, n)");
    types.typeforce(isOptions, options);
    return new ECPair(buffer2, void 0, options);
  }
  function fromPublicKey(buffer2, options) {
    types.typeforce(ecc2.isPoint, buffer2);
    types.typeforce(isOptions, options);
    return new ECPair(void 0, buffer2, options);
  }
  function fromWIF(wifString, network) {
    const decoded = wif.decode(wifString);
    const version2 = decoded.version;
    if (types.Array(network)) {
      network = network.filter((x2) => {
        return version2 === x2.wif;
      }).pop();
      if (!network) throw new Error("Unknown network version");
    } else {
      network = network || networks.bitcoin;
      if (version2 !== network.wif) throw new Error("Invalid network version");
    }
    return fromPrivateKey(decoded.privateKey, {
      compressed: decoded.compressed,
      network
    });
  }
  function makeRandom(options) {
    types.typeforce(isOptions, options);
    if (options === void 0) options = {};
    const rng = options.rng || randomBytes;
    let d2;
    do {
      d2 = rng(32);
      types.typeforce(types.Buffer256bit, d2);
    } while (!ecc2.isPrivate(d2));
    return fromPrivateKey(d2, options);
  }
  class ECPair {
    constructor(__D, __Q, options) {
      __publicField(this, "__D");
      __publicField(this, "__Q");
      __publicField(this, "compressed");
      __publicField(this, "network");
      __publicField(this, "lowR");
      this.__D = __D;
      this.__Q = __Q;
      this.lowR = false;
      if (options === void 0) options = {};
      this.compressed = options.compressed === void 0 ? true : options.compressed;
      this.network = options.network || networks.bitcoin;
      if (__Q !== void 0)
        this.__Q = Buffer$3.from(ecc2.pointCompress(__Q, this.compressed));
    }
    get privateKey() {
      return this.__D;
    }
    get publicKey() {
      if (!this.__Q) {
        const p2 = ecc2.pointFromScalar(this.__D, this.compressed);
        this.__Q = Buffer$3.from(p2);
      }
      return this.__Q;
    }
    toWIF() {
      if (!this.__D) throw new Error("Missing private key");
      return wif.encode(this.network.wif, this.__D, this.compressed);
    }
    tweak(t2) {
      if (this.privateKey) return this.tweakFromPrivateKey(t2);
      return this.tweakFromPublicKey(t2);
    }
    sign(hash2, lowR) {
      if (!this.__D) throw new Error("Missing private key");
      if (lowR === void 0) lowR = this.lowR;
      if (lowR === false) {
        return Buffer$3.from(ecc2.sign(hash2, this.__D));
      } else {
        let sig = ecc2.sign(hash2, this.__D);
        const extraData = Buffer$3.alloc(32, 0);
        let counter = 0;
        while (sig[0] > 127) {
          counter++;
          extraData.writeUIntLE(counter, 0, 6);
          sig = ecc2.sign(hash2, this.__D, extraData);
        }
        return Buffer$3.from(sig);
      }
    }
    signSchnorr(hash2) {
      if (!this.privateKey) throw new Error("Missing private key");
      if (!ecc2.signSchnorr)
        throw new Error("signSchnorr not supported by ecc library");
      return Buffer$3.from(ecc2.signSchnorr(hash2, this.privateKey));
    }
    verify(hash2, signature2) {
      return ecc2.verify(hash2, this.publicKey, signature2);
    }
    verifySchnorr(hash2, signature2) {
      if (!ecc2.verifySchnorr)
        throw new Error("verifySchnorr not supported by ecc library");
      return ecc2.verifySchnorr(hash2, this.publicKey.subarray(1, 33), signature2);
    }
    tweakFromPublicKey(t2) {
      const xOnlyPubKey = toXOnly$1(this.publicKey);
      const tweakedPublicKey = ecc2.xOnlyPointAddTweak(xOnlyPubKey, t2);
      if (!tweakedPublicKey || tweakedPublicKey.xOnlyPubkey === null)
        throw new Error("Cannot tweak public key!");
      const parityByte = Buffer$3.from([
        tweakedPublicKey.parity === 0 ? 2 : 3
      ]);
      return fromPublicKey(
        Buffer$3.concat([parityByte, tweakedPublicKey.xOnlyPubkey]),
        { network: this.network, compressed: this.compressed }
      );
    }
    tweakFromPrivateKey(t2) {
      const hasOddY = this.publicKey[0] === 3 || this.publicKey[0] === 4 && (this.publicKey[64] & 1) === 1;
      const privateKey = hasOddY ? ecc2.privateNegate(this.privateKey) : this.privateKey;
      const tweakedPrivateKey = ecc2.privateAdd(privateKey, t2);
      if (!tweakedPrivateKey) throw new Error("Invalid tweaked private key!");
      return fromPrivateKey(Buffer$3.from(tweakedPrivateKey), {
        network: this.network,
        compressed: this.compressed
      });
    }
  }
  return {
    isPoint: isPoint2,
    fromPrivateKey,
    fromPublicKey,
    fromWIF,
    makeRandom
  };
}
ecpair.ECPairFactory = ECPairFactory;
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.networks = exports2.ECPairFactory = exports2.default = void 0;
  var ecpair_1 = ecpair;
  Object.defineProperty(exports2, "default", {
    enumerable: true,
    get: function() {
      return ecpair_1.ECPairFactory;
    }
  });
  Object.defineProperty(exports2, "ECPairFactory", {
    enumerable: true,
    get: function() {
      return ecpair_1.ECPairFactory;
    }
  });
  Object.defineProperty(exports2, "networks", {
    enumerable: true,
    get: function() {
      return ecpair_1.networks;
    }
  });
})(src);
function invert(data) {
  return Object.fromEntries(
    Object.entries(data).map(([key2, value3]) => [value3, key2])
  );
}
const ADDRESS_TYPE_TO_FORMAT = {
  p2pkh: "legacy",
  p2sh: "p2sh-p2wpkh",
  p2wsh: "p2wsh",
  p2wpkh: "segwit",
  p2tr: "taproot"
};
const ADDRESS_FORMAT_TO_TYPE = invert(ADDRESS_TYPE_TO_FORMAT);
function getNetwork(value3) {
  if (value3 === "mainnet") {
    return src$4.networks.bitcoin;
  }
  if (value3 === "signet") {
    return src$4.networks.testnet;
  }
  return src$4.networks[value3];
}
function createPayment(key2, type2, network, paymentOptions) {
  src$4.initEccLib(ecc);
  const networkObj = typeof network === "string" ? getNetwork(network) : network;
  if (type2 === "p2tr") {
    return src$4.payments.p2tr({
      internalPubkey: key2,
      network: networkObj,
      ...paymentOptions
    });
  }
  if (type2 === "p2sh") {
    return src$4.payments.p2sh({
      redeem: src$4.payments.p2wpkh({ pubkey: key2, network: networkObj }),
      network: networkObj
    });
  }
  return src$4.payments[type2]({ pubkey: key2, network: networkObj });
}
function toXOnly(pubkey) {
  return pubkey.subarray(1, 33);
}
const isObject$1 = (o3) => (o3 == null ? void 0 : o3.constructor) === Object;
const isString$1 = (s2) => s2 instanceof String || typeof s2 === "string";
function encodeDecodeObject(obj, { encode: encode2, depth = 0 }) {
  const maxDepth = 5;
  if (depth > maxDepth) {
    throw new OrditSDKError("Object too deep");
  }
  for (const key2 in obj) {
    if (!obj.hasOwnProperty(key2)) {
      continue;
    }
    const value3 = obj[key2];
    if (isObject$1(value3)) {
      obj[key2] = encodeDecodeObject(value3, {
        encode: encode2,
        depth: depth + 1
      });
    } else if (isString$1(value3)) {
      obj[key2] = encode2 ? encodeURIComponent(value3) : decodeURIComponent(value3);
    }
  }
  return obj;
}
function UNSTABLE_decodeObject(obj) {
  return encodeDecodeObject(obj, { encode: false });
}
function convertSatoshisToBTC(satoshis) {
  return satoshis / 10 ** 8;
}
function generateTxUniqueIdentifier(txId, index) {
  return `${txId}:${index}`;
}
function outpointToIdFormat(outpoint) {
  if (outpoint.includes(":")) {
    return outpoint.replace(":", "i");
  }
  return outpoint.includes("i") ? outpoint : `${outpoint}i0`;
}
function isPaymentFactory(payment, network) {
  return (script2) => {
    try {
      return payment({ output: script2, network: getNetwork(network) });
    } catch (error) {
      return false;
    }
  };
}
const isP2PKH = (script2, network) => {
  const p2pkh2 = isPaymentFactory(src$4.payments.p2pkh, network)(script2);
  return {
    type: "p2pkh",
    payload: p2pkh2
  };
};
const isP2WPKH = (script2, network) => {
  const p2wpkh2 = isPaymentFactory(src$4.payments.p2wpkh, network)(script2);
  return {
    type: "p2wpkh",
    payload: p2wpkh2
  };
};
const isP2SHScript = (script2, network) => {
  const p2sh2 = isPaymentFactory(src$4.payments.p2sh, network)(script2);
  return {
    type: "p2sh",
    payload: p2sh2
  };
};
const isP2TR = (script2, network) => {
  const p2tr2 = isPaymentFactory(src$4.payments.p2tr, network)(script2);
  return {
    type: "p2tr",
    payload: p2tr2
  };
};
function getScriptType(script2, network) {
  const p2pkh2 = isP2PKH(script2, network);
  if (p2pkh2.payload) {
    return {
      format: ADDRESS_TYPE_TO_FORMAT.p2pkh,
      ...p2pkh2
    };
  }
  const p2wpkh2 = isP2WPKH(script2, network);
  if (p2wpkh2.payload) {
    return {
      format: ADDRESS_TYPE_TO_FORMAT.p2wpkh,
      ...p2wpkh2
    };
  }
  const p2sh2 = isP2SHScript(script2, network);
  if (p2sh2.payload) {
    return {
      format: ADDRESS_TYPE_TO_FORMAT.p2sh,
      ...p2sh2
    };
  }
  const p2tr2 = isP2TR(script2, network);
  if (p2tr2.payload) {
    return {
      format: ADDRESS_TYPE_TO_FORMAT.p2tr,
      ...p2tr2
    };
  }
  throw new OrditSDKError("Unsupported input");
}
function getAddressFormatForRegTest(address2) {
  try {
    const { type: type2, network: validatedNetwork, bech32 } = z(address2);
    if (!bech32 && validatedNetwork !== "testnet" || bech32 && validatedNetwork !== "regtest") {
      throw new Error("Invalid address");
    }
    return ADDRESS_TYPE_TO_FORMAT[type2];
  } catch (_2) {
    throw new OrditSDKError("Invalid address");
  }
}
function getAddressFormat(address2, network) {
  if (network === "regtest") {
    return getAddressFormatForRegTest(address2);
  }
  if (!O(
    address2,
    network === "signet" ? "testnet" : network
  )) {
    throw new OrditSDKError("Invalid address");
  }
  const { type: type2 } = z(address2);
  return ADDRESS_TYPE_TO_FORMAT[type2];
}
function getTaprootAddressFromBip32PublicKey(bip32PublicKey, network) {
  const childNodeXOnlyPubkey = bip32PublicKey.subarray(1, 33);
  const { address: address2 } = createPayment(childNodeXOnlyPubkey, "p2tr", network);
  return {
    address: address2,
    // address will never be undefined
    format: ADDRESS_TYPE_TO_FORMAT.p2tr,
    publicKey: bip32PublicKey.toString("hex"),
    xKey: childNodeXOnlyPubkey.toString("hex")
  };
}
function getAddressFromBip32PublicKey(bip32PublicKey, network, type2) {
  if (type2 === "p2tr") {
    return getTaprootAddressFromBip32PublicKey(bip32PublicKey, network);
  }
  const { address: address2 } = createPayment(bip32PublicKey, type2, network);
  return {
    address: address2,
    // address will never be undefined
    format: ADDRESS_TYPE_TO_FORMAT[type2],
    publicKey: bip32PublicKey.toString("hex")
  };
}
function getAddressesFromPublicKey(publicKey, network = "mainnet", type2 = "all") {
  const publicKeyBuffer = Buffer$3.isBuffer(publicKey) ? publicKey : Buffer$3.from(publicKey, "hex");
  const { publicKey: bip32PublicKey } = BIP32.fromPublicKey(
    publicKeyBuffer,
    CHAIN_CODE,
    getNetwork(network)
  );
  if (type2 === "all") {
    const addressTypes = Object.keys(ADDRESS_TYPE_TO_FORMAT).filter((addressType) => addressType !== "p2wsh");
    return addressTypes.map(
      (addressType) => getAddressFromBip32PublicKey(bip32PublicKey, network, addressType)
    );
  }
  return [getAddressFromBip32PublicKey(bip32PublicKey, network, type2)];
}
function getNetworkByAddress(address2) {
  try {
    const { network: validatedNetwork } = z(address2);
    return validatedNetwork;
  } catch {
    throw new OrditSDKError("Invalid address");
  }
}
var LeatherAddressType = /* @__PURE__ */ ((LeatherAddressType2) => {
  LeatherAddressType2["P2WPKH"] = "p2wpkh";
  LeatherAddressType2["P2TR"] = "p2tr";
  return LeatherAddressType2;
})(LeatherAddressType || {});
async function leatherRequest$1(arg, params) {
  try {
    const res = await window.LeatherProvider.request(
      arg,
      params
    );
    return res.result;
  } catch (err) {
    const leatherError = err;
    const { message } = leatherError.error;
    if (leatherError.error.code === 4001) {
      throw new BrowserWalletRequestCancelledByUserError(message);
    }
    throw new OrditSDKError(`Leather error: ${message}`);
  }
}
function isInstalled$4() {
  if (typeof window === "undefined") {
    throw new OrditSDKError("Cannot call this function outside a browser");
  }
  return typeof window.LeatherProvider !== "undefined";
}
async function getAddresses$3(network = "mainnet") {
  if (!isInstalled$4()) {
    throw new BrowserWalletNotInstalledError("Leather not installed");
  }
  const res = await leatherRequest$1("getAddresses", {
    network
  });
  const addresses = res.addresses.filter(
    (address2) => address2.type === LeatherAddressType.P2TR || address2.type === LeatherAddressType.P2WPKH
  );
  const derivedNetwork = getNetworkByAddress(addresses[0].address);
  if (network !== "signet" && derivedNetwork !== network || network === "signet" && derivedNetwork !== "testnet") {
    throw new BrowserWalletNetworkMismatchError(
      "Leather network mismatch, please switch it manually"
    );
  }
  return addresses.map((v2) => ({
    publicKey: v2.publicKey,
    address: v2.address,
    format: ADDRESS_TYPE_TO_FORMAT[v2.type]
  }));
}
async function signMessage$6(message, { network = "mainnet", paymentType }) {
  if (!isInstalled$4()) {
    throw new BrowserWalletNotInstalledError("Leather not installed");
  }
  const { signature: signature2 } = await leatherRequest$1(
    "signMessage",
    {
      message,
      paymentType,
      network
    }
  );
  return {
    base64: signature2,
    hex: Buffer$3.from(signature2, "base64").toString("hex")
  };
}
async function signPsbt$5(psbt2, {
  finalize = true,
  extractTx = true,
  allowedSighash,
  accountNumber,
  network = "mainnet",
  signAtIndexes = []
} = {}) {
  if (!isInstalled$4()) {
    throw new BrowserWalletNotInstalledError("Leather not installed");
  }
  if (extractTx && !finalize) {
    throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
  }
  const psbtHex = psbt2.toHex();
  const res = await leatherRequest$1("signPsbt", {
    hex: psbtHex,
    allowedSighash,
    account: accountNumber,
    network,
    signAtIndex: signAtIndexes,
    broadcast: false
  });
  const signedPsbt = src$4.Psbt.fromHex(res.hex);
  if (finalize) {
    signAtIndexes.forEach((index) => {
      try {
        signedPsbt.finalizeInput(index);
      } catch (error) {
        console.error("Sign psbt error", error);
        throw new OrditSDKError("Failed to finalize input");
      }
    });
  }
  if (extractTx) {
    try {
      return {
        base64: null,
        hex: signedPsbt.extractTransaction().toHex()
      };
    } catch (error) {
      if (error instanceof Error && error.message === "Not finalized") {
        throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
      } else {
        throw new OrditSDKError("Failed to extract transaction from PSBT");
      }
    }
  }
  return {
    base64: signedPsbt.toBase64(),
    hex: signedPsbt.toHex()
  };
}
var __classPrivateFieldGet = function(receiver, state2, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state2.get(receiver);
};
var __classPrivateFieldSet = function(receiver, state2, value3, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state2 === "function" ? receiver !== state2 || !f2 : !state2.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value3) : f2 ? f2.value = value3 : state2.set(receiver, value3), value3;
};
var _AppReadyEvent_detail;
let wallets = void 0;
const registeredWalletsSet = /* @__PURE__ */ new Set();
function addRegisteredWallet(wallet) {
  cachedWalletsArray = void 0;
  registeredWalletsSet.add(wallet);
}
function removeRegisteredWallet(wallet) {
  cachedWalletsArray = void 0;
  registeredWalletsSet.delete(wallet);
}
const listeners = {};
function getWallets() {
  if (wallets)
    return wallets;
  wallets = Object.freeze({ register, get, on });
  if (typeof window === "undefined")
    return wallets;
  const api2 = Object.freeze({ register });
  try {
    window.addEventListener("wallet-standard:register-wallet", ({ detail: callback }) => callback(api2));
  } catch (error) {
    console.error("wallet-standard:register-wallet event listener could not be added\n", error);
  }
  try {
    window.dispatchEvent(new AppReadyEvent(api2));
  } catch (error) {
    console.error("wallet-standard:app-ready event could not be dispatched\n", error);
  }
  return wallets;
}
function register(...wallets2) {
  var _a;
  wallets2 = wallets2.filter((wallet) => !registeredWalletsSet.has(wallet));
  if (!wallets2.length)
    return () => {
    };
  wallets2.forEach((wallet) => addRegisteredWallet(wallet));
  (_a = listeners["register"]) == null ? void 0 : _a.forEach((listener) => guard(() => listener(...wallets2)));
  return function unregister() {
    var _a2;
    wallets2.forEach((wallet) => removeRegisteredWallet(wallet));
    (_a2 = listeners["unregister"]) == null ? void 0 : _a2.forEach((listener) => guard(() => listener(...wallets2)));
  };
}
let cachedWalletsArray;
function get() {
  if (!cachedWalletsArray) {
    cachedWalletsArray = [...registeredWalletsSet];
  }
  return cachedWalletsArray;
}
function on(event, listener) {
  var _a;
  ((_a = listeners[event]) == null ? void 0 : _a.push(listener)) || (listeners[event] = [listener]);
  return function off() {
    var _a2;
    listeners[event] = (_a2 = listeners[event]) == null ? void 0 : _a2.filter((existingListener) => listener !== existingListener);
  };
}
function guard(callback) {
  try {
    callback();
  } catch (error) {
    console.error(error);
  }
}
class AppReadyEvent extends Event {
  get detail() {
    return __classPrivateFieldGet(this, _AppReadyEvent_detail, "f");
  }
  get type() {
    return "wallet-standard:app-ready";
  }
  constructor(api2) {
    super("wallet-standard:app-ready", {
      bubbles: false,
      cancelable: false,
      composed: false
    });
    _AppReadyEvent_detail.set(this, void 0);
    __classPrivateFieldSet(this, _AppReadyEvent_detail, api2, "f");
  }
  /** @deprecated */
  preventDefault() {
    throw new Error("preventDefault cannot be called");
  }
  /** @deprecated */
  stopImmediatePropagation() {
    throw new Error("stopImmediatePropagation cannot be called");
  }
  /** @deprecated */
  stopPropagation() {
    throw new Error("stopPropagation cannot be called");
  }
}
_AppReadyEvent_detail = /* @__PURE__ */ new WeakMap();
var funcTag = "[object Function]", genTag = "[object GeneratorFunction]";
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
function getValue(object3, key2) {
  return object3 == null ? void 0 : object3[key2];
}
function isHostObject(value3) {
  var result = false;
  if (value3 != null && typeof value3.toString != "function") {
    try {
      result = !!(value3 + "");
    } catch (e2) {
    }
  }
  return result;
}
var funcProto = Function.prototype, objectProto = Object.prototype;
var coreJsData = root["__core-js_shared__"];
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
var funcToString = funcProto.toString;
var hasOwnProperty = objectProto.hasOwnProperty;
var objectToString = objectProto.toString;
var reIsNative = RegExp(
  "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
var Symbol$1 = root.Symbol;
Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
getNative(root, "Map");
getNative(Object, "create");
function baseIsNative(value3) {
  if (!isObject(value3) || isMasked(value3)) {
    return false;
  }
  var pattern = isFunction(value3) || isHostObject(value3) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value3));
}
function getNative(object3, key2) {
  var value3 = getValue(object3, key2);
  return baseIsNative(value3) ? value3 : void 0;
}
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e2) {
    }
    try {
      return func + "";
    } catch (e2) {
    }
  }
  return "";
}
function isFunction(value3) {
  var tag = isObject(value3) ? objectToString.call(value3) : "";
  return tag == funcTag || tag == genTag;
}
function isObject(value3) {
  var type2 = typeof value3;
  return !!value3 && (type2 == "object" || type2 == "function");
}
var store2;
function getGlobalMessage(lang) {
  return store2 == null ? void 0 : store2.get(lang);
}
var store3;
function getSchemaMessage(lang) {
  return store3 == null ? void 0 : store3.get(lang);
}
var store4;
function getSpecificMessage(reference, lang) {
  var _a;
  return (_a = store4 == null ? void 0 : store4.get(reference)) == null ? void 0 : _a.get(lang);
}
function _stringify(input) {
  var _a, _b;
  let type2 = typeof input;
  if (type2 === "object") {
    type2 = (input && ((_b = (_a = Object.getPrototypeOf(input)) == null ? void 0 : _a.constructor) == null ? void 0 : _b.name)) ?? "null";
  }
  return type2 === "string" ? `"${input}"` : type2 === "number" || type2 === "bigint" || type2 === "boolean" ? `${input}` : type2;
}
function _addIssue(context, label, dataset, config2, other) {
  const input = other && "input" in other ? other.input : dataset.value;
  const expected = (other == null ? void 0 : other.expected) ?? context.expects ?? null;
  const received = (other == null ? void 0 : other.received) ?? _stringify(input);
  const issue = {
    kind: context.kind,
    type: context.type,
    input,
    expected,
    received,
    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : "R"}eceived ${received}`,
    // @ts-expect-error
    requirement: context.requirement,
    path: other == null ? void 0 : other.path,
    issues: other == null ? void 0 : other.issues,
    lang: config2.lang,
    abortEarly: config2.abortEarly,
    abortPipeEarly: config2.abortPipeEarly
  };
  const isSchema = context.kind === "schema";
  const message = (other == null ? void 0 : other.message) ?? // @ts-expect-error
  context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);
  if (message) {
    issue.message = typeof message === "function" ? message(issue) : message;
  }
  if (isSchema) {
    dataset.typed = false;
  }
  if (dataset.issues) {
    dataset.issues.push(issue);
  } else {
    dataset.issues = [issue];
  }
}
function _isValidObjectKey(object22, key2) {
  return Object.hasOwn(object22, key2) && key2 !== "__proto__" && key2 !== "prototype" && key2 !== "constructor";
}
function getDefault(schema, dataset, config2) {
  return typeof schema.default === "function" ? (
    // @ts-expect-error
    schema.default(dataset, config2)
  ) : (
    // @ts-expect-error
    schema.default
  );
}
function array(item, message) {
  return {
    kind: "schema",
    type: "array",
    reference: array,
    expects: "Array",
    async: false,
    item,
    message,
    _run(dataset, config2) {
      var _a;
      const input = dataset.value;
      if (Array.isArray(input)) {
        dataset.typed = true;
        dataset.value = [];
        for (let key2 = 0; key2 < input.length; key2++) {
          const value22 = input[key2];
          const itemDataset = this.item._run({ typed: false, value: value22 }, config2);
          if (itemDataset.issues) {
            const pathItem = {
              type: "array",
              origin: "value",
              input,
              key: key2,
              value: value22
            };
            for (const issue of itemDataset.issues) {
              if (issue.path) {
                issue.path.unshift(pathItem);
              } else {
                issue.path = [pathItem];
              }
              (_a = dataset.issues) == null ? void 0 : _a.push(issue);
            }
            if (!dataset.issues) {
              dataset.issues = itemDataset.issues;
            }
            if (config2.abortEarly) {
              dataset.typed = false;
              break;
            }
          }
          if (!itemDataset.typed) {
            dataset.typed = false;
          }
          dataset.value.push(itemDataset.value);
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function boolean(message) {
  return {
    kind: "schema",
    type: "boolean",
    reference: boolean,
    expects: "boolean",
    async: false,
    message,
    _run(dataset, config2) {
      if (typeof dataset.value === "boolean") {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function enum_(enum__, message) {
  const options = Object.entries(enum__).filter(([key2]) => isNaN(+key2)).map(([, value22]) => value22);
  return {
    kind: "schema",
    type: "enum",
    reference: enum_,
    expects: options.map(_stringify).join(" | ") || "never",
    async: false,
    enum: enum__,
    options,
    message,
    _run(dataset, config2) {
      if (this.options.includes(dataset.value)) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function literal(literal_, message) {
  return {
    kind: "schema",
    type: "literal",
    reference: literal,
    expects: _stringify(literal_),
    async: false,
    literal: literal_,
    message,
    _run(dataset, config2) {
      if (dataset.value === this.literal) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function looseObject(entries, message) {
  return {
    kind: "schema",
    type: "loose_object",
    reference: looseObject,
    expects: "Object",
    async: false,
    entries,
    message,
    _run(dataset, config2) {
      var _a;
      const input = dataset.value;
      if (input && typeof input === "object") {
        dataset.typed = true;
        dataset.value = {};
        for (const key2 in this.entries) {
          const value22 = input[key2];
          const valueDataset = this.entries[key2]._run(
            { typed: false, value: value22 },
            config2
          );
          if (valueDataset.issues) {
            const pathItem = {
              type: "object",
              origin: "value",
              input,
              key: key2,
              value: value22
            };
            for (const issue of valueDataset.issues) {
              if (issue.path) {
                issue.path.unshift(pathItem);
              } else {
                issue.path = [pathItem];
              }
              (_a = dataset.issues) == null ? void 0 : _a.push(issue);
            }
            if (!dataset.issues) {
              dataset.issues = valueDataset.issues;
            }
            if (config2.abortEarly) {
              dataset.typed = false;
              break;
            }
          }
          if (!valueDataset.typed) {
            dataset.typed = false;
          }
          if (valueDataset.value !== void 0 || key2 in input) {
            dataset.value[key2] = valueDataset.value;
          }
        }
        if (!dataset.issues || !config2.abortEarly) {
          for (const key2 in input) {
            if (_isValidObjectKey(input, key2) && !(key2 in this.entries)) {
              dataset.value[key2] = input[key2];
            }
          }
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function nonOptional(wrapped, message) {
  return {
    kind: "schema",
    type: "non_optional",
    reference: nonOptional,
    expects: "!undefined",
    async: false,
    wrapped,
    message,
    _run(dataset, config2) {
      if (dataset.value === void 0) {
        _addIssue(this, "type", dataset, config2);
        return dataset;
      }
      return this.wrapped._run(dataset, config2);
    }
  };
}
function null_(message) {
  return {
    kind: "schema",
    type: "null",
    reference: null_,
    expects: "null",
    async: false,
    message,
    _run(dataset, config2) {
      if (dataset.value === null) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function nullish(wrapped, ...args) {
  const schema = {
    kind: "schema",
    type: "nullish",
    reference: nullish,
    expects: `${wrapped.expects} | null | undefined`,
    async: false,
    wrapped,
    _run(dataset, config2) {
      if (dataset.value === null || dataset.value === void 0) {
        if ("default" in this) {
          dataset.value = getDefault(
            this,
            dataset,
            config2
          );
        }
        if (dataset.value === null || dataset.value === void 0) {
          dataset.typed = true;
          return dataset;
        }
      }
      return this.wrapped._run(dataset, config2);
    }
  };
  if (0 in args) {
    schema.default = args[0];
  }
  return schema;
}
function number(message) {
  return {
    kind: "schema",
    type: "number",
    reference: number,
    expects: "number",
    async: false,
    message,
    _run(dataset, config2) {
      if (typeof dataset.value === "number" && !isNaN(dataset.value)) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function object(entries, message) {
  return {
    kind: "schema",
    type: "object",
    reference: object,
    expects: "Object",
    async: false,
    entries,
    message,
    _run(dataset, config2) {
      var _a;
      const input = dataset.value;
      if (input && typeof input === "object") {
        dataset.typed = true;
        dataset.value = {};
        for (const key2 in this.entries) {
          const value22 = input[key2];
          const valueDataset = this.entries[key2]._run(
            { typed: false, value: value22 },
            config2
          );
          if (valueDataset.issues) {
            const pathItem = {
              type: "object",
              origin: "value",
              input,
              key: key2,
              value: value22
            };
            for (const issue of valueDataset.issues) {
              if (issue.path) {
                issue.path.unshift(pathItem);
              } else {
                issue.path = [pathItem];
              }
              (_a = dataset.issues) == null ? void 0 : _a.push(issue);
            }
            if (!dataset.issues) {
              dataset.issues = valueDataset.issues;
            }
            if (config2.abortEarly) {
              dataset.typed = false;
              break;
            }
          }
          if (!valueDataset.typed) {
            dataset.typed = false;
          }
          if (valueDataset.value !== void 0 || key2 in input) {
            dataset.value[key2] = valueDataset.value;
          }
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function optional(wrapped, ...args) {
  const schema = {
    kind: "schema",
    type: "optional",
    reference: optional,
    expects: `${wrapped.expects} | undefined`,
    async: false,
    wrapped,
    _run(dataset, config2) {
      if (dataset.value === void 0) {
        if ("default" in this) {
          dataset.value = getDefault(
            this,
            dataset,
            config2
          );
        }
        if (dataset.value === void 0) {
          dataset.typed = true;
          return dataset;
        }
      }
      return this.wrapped._run(dataset, config2);
    }
  };
  if (0 in args) {
    schema.default = args[0];
  }
  return schema;
}
function picklist(options, message) {
  return {
    kind: "schema",
    type: "picklist",
    reference: picklist,
    expects: options.map(_stringify).join(" | ") || "never",
    async: false,
    options,
    message,
    _run(dataset, config2) {
      if (this.options.includes(dataset.value)) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function string(message) {
  return {
    kind: "schema",
    type: "string",
    reference: string,
    expects: "string",
    async: false,
    message,
    _run(dataset, config2) {
      if (typeof dataset.value === "string") {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function undefined_(message) {
  return {
    kind: "schema",
    type: "undefined",
    reference: undefined_,
    expects: "undefined",
    async: false,
    message,
    _run(dataset, config2) {
      if (dataset.value === void 0) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function _subIssues(datasets) {
  let issues;
  if (datasets) {
    for (const dataset of datasets) {
      if (issues) {
        issues.push(...dataset.issues);
      } else {
        issues = dataset.issues;
      }
    }
  }
  return issues;
}
function union(options, message) {
  return {
    kind: "schema",
    type: "union",
    reference: union,
    expects: [...new Set(options.map((option) => option.expects))].join(" | ") || "never",
    async: false,
    options,
    message,
    _run(dataset, config2) {
      let validDataset;
      let typedDatasets;
      let untypedDatasets;
      for (const schema of this.options) {
        const optionDataset = schema._run(
          { typed: false, value: dataset.value },
          config2
        );
        if (optionDataset.typed) {
          if (optionDataset.issues) {
            if (typedDatasets) {
              typedDatasets.push(optionDataset);
            } else {
              typedDatasets = [optionDataset];
            }
          } else {
            validDataset = optionDataset;
            break;
          }
        } else {
          if (untypedDatasets) {
            untypedDatasets.push(optionDataset);
          } else {
            untypedDatasets = [optionDataset];
          }
        }
      }
      if (validDataset) {
        return validDataset;
      }
      if (typedDatasets) {
        if (typedDatasets.length === 1) {
          return typedDatasets[0];
        }
        _addIssue(this, "type", dataset, config2, {
          issues: _subIssues(typedDatasets)
        });
        dataset.typed = true;
      } else if ((untypedDatasets == null ? void 0 : untypedDatasets.length) === 1) {
        return untypedDatasets[0];
      } else {
        _addIssue(this, "type", dataset, config2, {
          issues: _subIssues(untypedDatasets)
        });
      }
      return dataset;
    }
  };
}
function unknown() {
  return {
    kind: "schema",
    type: "unknown",
    reference: unknown,
    expects: "unknown",
    async: false,
    _run(dataset) {
      dataset.typed = true;
      return dataset;
    }
  };
}
var lib = {};
var signer = {};
var base64Url = {};
var base64Js = {};
base64Js.byteLength = byteLength;
base64Js.toByteArray = toByteArray;
base64Js.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
  var len2 = b64.length;
  if (len2 % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  var validLen = b64.indexOf("=");
  if (validLen === -1) validLen = len2;
  var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
}
function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0;
  var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i2;
  for (i2 = 0; i2 < len2; i2 += 4) {
    tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
    arr[curByte++] = tmp >> 16 & 255;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
    arr[curByte++] = tmp & 255;
  }
  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 255;
    arr[curByte++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output2 = [];
  for (var i2 = start; i2 < end; i2 += 3) {
    tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
    output2.push(tripletToBase64(tmp));
  }
  return output2.join("");
}
function fromByteArray(uint8) {
  var tmp;
  var len2 = uint8.length;
  var extraBytes = len2 % 3;
  var parts = [];
  var maxChunkLength = 16383;
  for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
    parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len2 - 1];
    parts.push(
      lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
    );
  } else if (extraBytes === 2) {
    tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
    parts.push(
      lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
    );
  }
  return parts.join("");
}
Object.defineProperty(base64Url, "__esModule", { value: true });
base64Url.decode = base64Url.encode = base64Url.unescape = base64Url.escape = base64Url.pad = void 0;
const base64_js_1$1 = base64Js;
function pad(base64) {
  return `${base64}${"=".repeat(4 - (base64.length % 4 || 4))}`;
}
base64Url.pad = pad;
function escape(base64) {
  return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
base64Url.escape = escape;
function unescape(base64Url2) {
  return pad(base64Url2).replace(/-/g, "+").replace(/_/g, "/");
}
base64Url.unescape = unescape;
function encode(base64) {
  return escape((0, base64_js_1$1.fromByteArray)(new TextEncoder().encode(base64)));
}
base64Url.encode = encode;
function decode$1(base64Url2) {
  return new TextDecoder().decode((0, base64_js_1$1.toByteArray)(pad(unescape(base64Url2))));
}
base64Url.decode = decode$1;
var cryptoClients = {};
var secp256k1 = {};
var ecdsaSigFormatter = {};
Object.defineProperty(ecdsaSigFormatter, "__esModule", { value: true });
ecdsaSigFormatter.joseToDer = ecdsaSigFormatter.derToJose = void 0;
const base64_js_1 = base64Js;
const base64Url_1 = base64Url;
function getParamSize(keySize) {
  return (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
}
const paramBytesForAlg = {
  ES256: getParamSize(256),
  ES384: getParamSize(384),
  ES512: getParamSize(521)
};
function getParamBytesForAlg(alg) {
  const paramBytes = paramBytesForAlg[alg];
  if (paramBytes) {
    return paramBytes;
  }
  throw new Error(`Unknown algorithm "${alg}"`);
}
const MAX_OCTET = 128;
const CLASS_UNIVERSAL = 0;
const PRIMITIVE_BIT = 32;
const TAG_SEQ = 16;
const TAG_INT = 2;
const ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
const ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
function signatureAsBytes(signature2) {
  if (signature2 instanceof Uint8Array) {
    return signature2;
  } else if ("string" === typeof signature2) {
    return (0, base64_js_1.toByteArray)((0, base64Url_1.pad)(signature2));
  }
  throw new TypeError("ECDSA signature must be a Base64 string or a Uint8Array");
}
function derToJose(signature2, alg) {
  const signatureBytes = signatureAsBytes(signature2);
  const paramBytes = getParamBytesForAlg(alg);
  const maxEncodedParamLength = paramBytes + 1;
  const inputLength = signatureBytes.length;
  let offset = 0;
  if (signatureBytes[offset++] !== ENCODED_TAG_SEQ) {
    throw new Error('Could not find expected "seq"');
  }
  let seqLength = signatureBytes[offset++];
  if (seqLength === (MAX_OCTET | 1)) {
    seqLength = signatureBytes[offset++];
  }
  if (inputLength - offset < seqLength) {
    throw new Error(`"seq" specified length of "${seqLength}", only "${inputLength - offset}" remaining`);
  }
  if (signatureBytes[offset++] !== ENCODED_TAG_INT) {
    throw new Error('Could not find expected "int" for "r"');
  }
  const rLength = signatureBytes[offset++];
  if (inputLength - offset - 2 < rLength) {
    throw new Error(`"r" specified length of "${rLength}", only "${inputLength - offset - 2}" available`);
  }
  if (maxEncodedParamLength < rLength) {
    throw new Error(`"r" specified length of "${rLength}", max of "${maxEncodedParamLength}" is acceptable`);
  }
  const rOffset = offset;
  offset += rLength;
  if (signatureBytes[offset++] !== ENCODED_TAG_INT) {
    throw new Error('Could not find expected "int" for "s"');
  }
  const sLength = signatureBytes[offset++];
  if (inputLength - offset !== sLength) {
    throw new Error(`"s" specified length of "${sLength}", expected "${inputLength - offset}"`);
  }
  if (maxEncodedParamLength < sLength) {
    throw new Error(`"s" specified length of "${sLength}", max of "${maxEncodedParamLength}" is acceptable`);
  }
  const sOffset = offset;
  offset += sLength;
  if (offset !== inputLength) {
    throw new Error(`Expected to consume entire array, but "${inputLength - offset}" bytes remain`);
  }
  const rPadding = paramBytes - rLength;
  const sPadding = paramBytes - sLength;
  const dst = new Uint8Array(rPadding + rLength + sPadding + sLength);
  for (offset = 0; offset < rPadding; ++offset) {
    dst[offset] = 0;
  }
  dst.set(signatureBytes.subarray(rOffset + Math.max(-rPadding, 0), rOffset + rLength), offset);
  offset = paramBytes;
  for (const o3 = offset; offset < o3 + sPadding; ++offset) {
    dst[offset] = 0;
  }
  dst.set(signatureBytes.subarray(sOffset + Math.max(-sPadding, 0), sOffset + sLength), offset);
  return (0, base64Url_1.escape)((0, base64_js_1.fromByteArray)(dst));
}
ecdsaSigFormatter.derToJose = derToJose;
function countPadding(buf, start, stop) {
  let padding = 0;
  while (start + padding < stop && buf[start + padding] === 0) {
    ++padding;
  }
  const needsSign = buf[start + padding] >= MAX_OCTET;
  if (needsSign) {
    --padding;
  }
  return padding;
}
function joseToDer(signature2, alg) {
  signature2 = signatureAsBytes(signature2);
  const paramBytes = getParamBytesForAlg(alg);
  const signatureBytes = signature2.length;
  if (signatureBytes !== paramBytes * 2) {
    throw new TypeError(`"${alg}" signatures must be "${paramBytes * 2}" bytes, saw "${signatureBytes}"`);
  }
  const rPadding = countPadding(signature2, 0, paramBytes);
  const sPadding = countPadding(signature2, paramBytes, signature2.length);
  const rLength = paramBytes - rPadding;
  const sLength = paramBytes - sPadding;
  const rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
  const shortLength = rsBytes < MAX_OCTET;
  const dst = new Uint8Array((shortLength ? 2 : 3) + rsBytes);
  let offset = 0;
  dst[offset++] = ENCODED_TAG_SEQ;
  if (shortLength) {
    dst[offset++] = rsBytes;
  } else {
    dst[offset++] = MAX_OCTET | 1;
    dst[offset++] = rsBytes & 255;
  }
  dst[offset++] = ENCODED_TAG_INT;
  dst[offset++] = rLength;
  if (rPadding < 0) {
    dst[offset++] = 0;
    dst.set(signature2.subarray(0, paramBytes), offset);
    offset += paramBytes;
  } else {
    dst.set(signature2.subarray(rPadding, paramBytes), offset);
    offset += paramBytes - rPadding;
  }
  dst[offset++] = ENCODED_TAG_INT;
  dst[offset++] = sLength;
  if (sPadding < 0) {
    dst[offset++] = 0;
    dst.set(signature2.subarray(paramBytes), offset);
  } else {
    dst.set(signature2.subarray(paramBytes + sPadding), offset);
  }
  return dst;
}
ecdsaSigFormatter.joseToDer = joseToDer;
var errors = {};
Object.defineProperty(errors, "__esModule", { value: true });
errors.InvalidTokenError = errors.MissingParametersError = void 0;
class MissingParametersError extends Error {
  constructor(message) {
    super();
    this.name = "MissingParametersError";
    this.message = message || "";
  }
}
errors.MissingParametersError = MissingParametersError;
class InvalidTokenError extends Error {
  constructor(message) {
    super();
    this.name = "InvalidTokenError";
    this.message = message || "";
  }
}
errors.InvalidTokenError = InvalidTokenError;
Object.defineProperty(secp256k1, "__esModule", { value: true });
secp256k1.SECP256K1Client = void 0;
const hmac_1 = hmac$2;
const sha256_1$3 = sha256$5;
const secp = lib$1;
const ecdsaSigFormatter_1 = ecdsaSigFormatter;
const errors_1$2 = errors;
const utils_1 = utils$5;
secp.utils.hmacSha256Sync = (key2, ...msgs) => {
  const h2 = hmac_1.hmac.create(sha256_1$3.sha256, key2);
  msgs.forEach((msg) => h2.update(msg));
  return h2.digest();
};
class SECP256K1Client {
  static derivePublicKey(privateKey, compressed = true) {
    if (privateKey.length === 66) {
      privateKey = privateKey.slice(0, 64);
    }
    if (privateKey.length < 64) {
      privateKey = privateKey.padStart(64, "0");
    }
    return (0, utils_1.bytesToHex)(secp.getPublicKey(privateKey, compressed));
  }
  static signHash(signingInputHash, privateKey, format = "jose") {
    if (!signingInputHash || !privateKey) {
      throw new errors_1$2.MissingParametersError("a signing input hash and private key are all required");
    }
    const derSignature = secp.signSync(signingInputHash, privateKey.slice(0, 64), {
      der: true,
      canonical: false
    });
    if (format === "der")
      return (0, utils_1.bytesToHex)(derSignature);
    if (format === "jose")
      return (0, ecdsaSigFormatter_1.derToJose)(derSignature, "ES256");
    throw Error("Invalid signature format");
  }
  static loadSignature(joseSignature) {
    return (0, ecdsaSigFormatter_1.joseToDer)(joseSignature, "ES256");
  }
  static verifyHash(signingInputHash, derSignatureBytes, publicKey) {
    if (!signingInputHash || !derSignatureBytes || !publicKey) {
      throw new errors_1$2.MissingParametersError("a signing input hash, der signature, and public key are all required");
    }
    return secp.verify(derSignatureBytes, signingInputHash, publicKey, { strict: false });
  }
}
secp256k1.SECP256K1Client = SECP256K1Client;
SECP256K1Client.algorithmName = "ES256K";
(function(exports2) {
  Object.defineProperty(exports2, "__esModule", { value: true });
  exports2.cryptoClients = exports2.SECP256K1Client = void 0;
  const secp256k1_1 = secp256k1;
  Object.defineProperty(exports2, "SECP256K1Client", { enumerable: true, get: function() {
    return secp256k1_1.SECP256K1Client;
  } });
  const cryptoClients2 = {
    ES256K: secp256k1_1.SECP256K1Client
  };
  exports2.cryptoClients = cryptoClients2;
})(cryptoClients);
var sha256 = {};
var __awaiter$1 = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P2, generator) {
  function adopt(value3) {
    return value3 instanceof P2 ? value3 : new P2(function(resolve) {
      resolve(value3);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value3) {
      try {
        step(generator.next(value3));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value3) {
      try {
        step(generator["throw"](value3));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(sha256, "__esModule", { value: true });
sha256.hashSha256Async = sha256.hashSha256 = void 0;
const sha256_1$2 = sha256$5;
function hashSha256(input) {
  return (0, sha256_1$2.sha256)(input);
}
sha256.hashSha256 = hashSha256;
function hashSha256Async(input) {
  return __awaiter$1(this, void 0, void 0, function* () {
    try {
      const isSubtleCryptoAvailable = typeof crypto !== "undefined" && typeof crypto.subtle !== "undefined";
      if (isSubtleCryptoAvailable) {
        const bytes2 = typeof input === "string" ? new TextEncoder().encode(input) : input;
        const hash2 = yield crypto.subtle.digest("SHA-256", bytes2);
        return new Uint8Array(hash2);
      } else {
        const nodeCrypto = requireCryptoBrowserify();
        if (!nodeCrypto.createHash) {
          throw new Error("`crypto` module does not contain `createHash`");
        }
        return Promise.resolve(nodeCrypto.createHash("sha256").update(input).digest());
      }
    } catch (error) {
      console.log(error);
      console.log('Crypto lib not found. Neither the global `crypto.subtle` Web Crypto API, nor the or the Node.js `require("crypto").createHash` module is available. Falling back to JS implementation.');
      return Promise.resolve(hashSha256(input));
    }
  });
}
sha256.hashSha256Async = hashSha256Async;
var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function(thisArg, _arguments, P2, generator) {
  function adopt(value3) {
    return value3 instanceof P2 ? value3 : new P2(function(resolve) {
      resolve(value3);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value3) {
      try {
        step(generator.next(value3));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value3) {
      try {
        step(generator["throw"](value3));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(signer, "__esModule", { value: true });
signer.TokenSigner = signer.createUnsecuredToken = void 0;
const base64url$2 = base64Url;
const cryptoClients_1$1 = cryptoClients;
const errors_1$1 = errors;
const sha256_1$1 = sha256;
function createSigningInput(payload, header) {
  const tokenParts = [];
  const encodedHeader = base64url$2.encode(JSON.stringify(header));
  tokenParts.push(encodedHeader);
  const encodedPayload = base64url$2.encode(JSON.stringify(payload));
  tokenParts.push(encodedPayload);
  const signingInput = tokenParts.join(".");
  return signingInput;
}
function createUnsecuredToken(payload) {
  const header = { typ: "JWT", alg: "none" };
  return createSigningInput(payload, header) + ".";
}
signer.createUnsecuredToken = createUnsecuredToken;
class TokenSigner {
  constructor(signingAlgorithm, rawPrivateKey) {
    if (!(signingAlgorithm && rawPrivateKey)) {
      throw new errors_1$1.MissingParametersError("a signing algorithm and private key are required");
    }
    if (typeof signingAlgorithm !== "string") {
      throw new Error("signing algorithm parameter must be a string");
    }
    signingAlgorithm = signingAlgorithm.toUpperCase();
    if (!cryptoClients_1$1.cryptoClients.hasOwnProperty(signingAlgorithm)) {
      throw new Error("invalid signing algorithm");
    }
    this.tokenType = "JWT";
    this.cryptoClient = cryptoClients_1$1.cryptoClients[signingAlgorithm];
    this.rawPrivateKey = rawPrivateKey;
  }
  header(header = {}) {
    const defaultHeader = { typ: this.tokenType, alg: this.cryptoClient.algorithmName };
    return Object.assign({}, defaultHeader, header);
  }
  sign(payload, expanded = false, customHeader = {}) {
    const header = this.header(customHeader);
    const signingInput = createSigningInput(payload, header);
    const signingInputHash = (0, sha256_1$1.hashSha256)(signingInput);
    return this.createWithSignedHash(payload, expanded, header, signingInput, signingInputHash);
  }
  signAsync(payload, expanded = false, customHeader = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      const header = this.header(customHeader);
      const signingInput = createSigningInput(payload, header);
      const signingInputHash = yield (0, sha256_1$1.hashSha256Async)(signingInput);
      return this.createWithSignedHash(payload, expanded, header, signingInput, signingInputHash);
    });
  }
  createWithSignedHash(payload, expanded, header, signingInput, signingInputHash) {
    const signature2 = this.cryptoClient.signHash(signingInputHash, this.rawPrivateKey);
    if (expanded) {
      const signedToken = {
        header: [base64url$2.encode(JSON.stringify(header))],
        payload: JSON.stringify(payload),
        signature: [signature2]
      };
      return signedToken;
    } else {
      return [signingInput, signature2].join(".");
    }
  }
}
signer.TokenSigner = TokenSigner;
var verifier = {};
Object.defineProperty(verifier, "__esModule", { value: true });
verifier.TokenVerifier = void 0;
const base64url$1 = base64Url;
const cryptoClients_1 = cryptoClients;
const errors_1 = errors;
const sha256_1 = sha256;
class TokenVerifier {
  constructor(signingAlgorithm, rawPublicKey) {
    if (!(signingAlgorithm && rawPublicKey)) {
      throw new errors_1.MissingParametersError("a signing algorithm and public key are required");
    }
    if (typeof signingAlgorithm !== "string") {
      throw "signing algorithm parameter must be a string";
    }
    signingAlgorithm = signingAlgorithm.toUpperCase();
    if (!cryptoClients_1.cryptoClients.hasOwnProperty(signingAlgorithm)) {
      throw "invalid signing algorithm";
    }
    this.tokenType = "JWT";
    this.cryptoClient = cryptoClients_1.cryptoClients[signingAlgorithm];
    this.rawPublicKey = rawPublicKey;
  }
  verify(token) {
    if (typeof token === "string") {
      return this.verifyCompact(token, false);
    } else if (typeof token === "object") {
      return this.verifyExpanded(token, false);
    } else {
      return false;
    }
  }
  verifyAsync(token) {
    if (typeof token === "string") {
      return this.verifyCompact(token, true);
    } else if (typeof token === "object") {
      return this.verifyExpanded(token, true);
    } else {
      return Promise.resolve(false);
    }
  }
  verifyCompact(token, async2) {
    const tokenParts = token.split(".");
    const signingInput = tokenParts[0] + "." + tokenParts[1];
    const performVerify = (signingInputHash) => {
      const derSignatureBytes = this.cryptoClient.loadSignature(tokenParts[2]);
      return this.cryptoClient.verifyHash(signingInputHash, derSignatureBytes, this.rawPublicKey);
    };
    if (async2) {
      return (0, sha256_1.hashSha256Async)(signingInput).then((signingInputHash) => performVerify(signingInputHash));
    } else {
      const signingInputHash = (0, sha256_1.hashSha256)(signingInput);
      return performVerify(signingInputHash);
    }
  }
  verifyExpanded(token, async2) {
    const signingInput = [token["header"].join("."), base64url$1.encode(token["payload"])].join(".");
    let verified = true;
    const performVerify = (signingInputHash) => {
      token["signature"].map((signature2) => {
        const derSignatureBytes = this.cryptoClient.loadSignature(signature2);
        const signatureVerified = this.cryptoClient.verifyHash(signingInputHash, derSignatureBytes, this.rawPublicKey);
        if (!signatureVerified) {
          verified = false;
        }
      });
      return verified;
    };
    if (async2) {
      return (0, sha256_1.hashSha256Async)(signingInput).then((signingInputHash) => performVerify(signingInputHash));
    } else {
      const signingInputHash = (0, sha256_1.hashSha256)(signingInput);
      return performVerify(signingInputHash);
    }
  }
}
verifier.TokenVerifier = TokenVerifier;
var decode = {};
Object.defineProperty(decode, "__esModule", { value: true });
decode.decodeToken = void 0;
const base64url = base64Url;
function decodeToken(token) {
  if (typeof token === "string") {
    const tokenParts = token.split(".");
    const header = JSON.parse(base64url.decode(tokenParts[0]));
    const payload = JSON.parse(base64url.decode(tokenParts[1]));
    const signature2 = tokenParts[2];
    return {
      header,
      payload,
      signature: signature2
    };
  } else if (typeof token === "object") {
    if (typeof token.payload !== "string") {
      throw new Error("Expected token payload to be a base64 or json string");
    }
    let payload = token.payload;
    if (token.payload[0] !== "{") {
      payload = base64url.decode(payload);
    }
    const allHeaders = [];
    token.header.map((headerValue) => {
      const header = JSON.parse(base64url.decode(headerValue));
      allHeaders.push(header);
    });
    return {
      header: allHeaders,
      payload: JSON.parse(payload),
      signature: token.signature
    };
  }
}
decode.decodeToken = decodeToken;
(function(exports2) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o3, m2, k2, k22) {
    if (k22 === void 0) k22 = k2;
    var desc = Object.getOwnPropertyDescriptor(m2, k2);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k2];
      } };
    }
    Object.defineProperty(o3, k22, desc);
  } : function(o3, m2, k2, k22) {
    if (k22 === void 0) k22 = k2;
    o3[k22] = m2[k2];
  });
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports3) {
    for (var p2 in m2) if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p2)) __createBinding(exports3, m2, p2);
  };
  Object.defineProperty(exports2, "__esModule", { value: true });
  __exportStar(signer, exports2);
  __exportStar(verifier, exports2);
  __exportStar(decode, exports2);
  __exportStar(errors, exports2);
  __exportStar(cryptoClients, exports2);
})(lib);
var accountChangeEventName = "accountChange";
object({
  type: literal(accountChangeEventName)
});
var networkChangeEventName = "networkChange";
object({
  type: literal(networkChangeEventName)
});
async function getProviderOrThrow(getProvider) {
  var _a;
  const provider = await (getProvider == null ? void 0 : getProvider()) || ((_a = window.XverseProviders) == null ? void 0 : _a.BitcoinProvider) || window.BitcoinProvider;
  if (!provider) {
    throw new Error("No Bitcoin wallet installed");
  }
  return provider;
}
var BitcoinNetworkType = /* @__PURE__ */ ((BitcoinNetworkType3) => {
  BitcoinNetworkType3["Mainnet"] = "Mainnet";
  BitcoinNetworkType3["Testnet"] = "Testnet";
  BitcoinNetworkType3["Signet"] = "Signet";
  return BitcoinNetworkType3;
})(BitcoinNetworkType || {});
var RpcIdSchema = optional(union([string(), number(), null_()]));
var rpcRequestMessageSchema = object({
  jsonrpc: literal("2.0"),
  method: string(),
  params: optional(
    union([
      array(unknown()),
      looseObject({}),
      // Note: This is to support current incorrect usage of RPC 2.0. Params need
      // to be either an array or an object when provided. Changing this now would
      // be a breaking change, so accepting null values for now. Tracking in
      // https://linear.app/xverseapp/issue/ENG-4538.
      null_()
    ])
  ),
  id: RpcIdSchema
});
var rpcSuccessResponseMessageSchema = object({
  jsonrpc: literal("2.0"),
  result: nonOptional(unknown()),
  id: RpcIdSchema
});
var rpcErrorResponseMessageSchema = object({
  jsonrpc: literal("2.0"),
  error: nonOptional(unknown()),
  id: RpcIdSchema
});
union([
  rpcSuccessResponseMessageSchema,
  rpcErrorResponseMessageSchema
]);
var AddressPurpose = /* @__PURE__ */ ((AddressPurpose2) => {
  AddressPurpose2["Ordinals"] = "ordinals";
  AddressPurpose2["Payment"] = "payment";
  AddressPurpose2["Stacks"] = "stacks";
  return AddressPurpose2;
})(AddressPurpose || {});
var AddressType = /* @__PURE__ */ ((AddressType3) => {
  AddressType3["p2pkh"] = "p2pkh";
  AddressType3["p2sh"] = "p2sh";
  AddressType3["p2wpkh"] = "p2wpkh";
  AddressType3["p2wsh"] = "p2wsh";
  AddressType3["p2tr"] = "p2tr";
  AddressType3["stacks"] = "stacks";
  return AddressType3;
})(AddressType || {});
var addressSchema = object({
  address: string(),
  publicKey: string(),
  purpose: enum_(AddressPurpose),
  addressType: enum_(AddressType)
});
var getAddress = async (options) => {
  var _a, _b;
  const provider = await getProviderOrThrow(options.getProvider);
  const { purposes } = options.payload;
  if (!purposes) {
    throw new Error("Address purposes are required");
  }
  try {
    const request2 = lib.createUnsecuredToken(options.payload);
    const response = await provider.connect(request2);
    (_a = options.onFinish) == null ? void 0 : _a.call(options, response);
  } catch (error) {
    console.error("[Connect] Error during address request", error);
    (_b = options.onCancel) == null ? void 0 : _b.call(options);
  }
};
var stxGetAddressesMethodName = "stx_getAddresses";
var stxGetAddressesParamsSchema = nullish(
  object({
    /**
     * A message to be displayed to the user in the request prompt.
     */
    message: optional(string())
  })
);
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(stxGetAddressesMethodName),
    params: stxGetAddressesParamsSchema,
    id: string()
  }).entries
});
var stxSignTransactionMethodName = "stx_signTransaction";
var stxSignTransactionParamsSchema = object({
  /**
   * The transaction to sign as a hex-encoded string.
   */
  transaction: string(),
  /**
   * The public key to sign the transaction with. The wallet may use any key
   * when not provided.
   */
  pubkey: optional(string()),
  /**
   * Whether to broadcast the transaction after signing. Defaults to `true`.
   */
  broadcast: optional(boolean())
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(stxSignTransactionMethodName),
    params: stxSignTransactionParamsSchema,
    id: string()
  }).entries
});
var walletTypes = ["software", "ledger"];
var walletTypeSchema = picklist(walletTypes);
var getInfoMethodName = "getInfo";
var getInfoParamsSchema = nullish(null_());
object({
  /**
   * Version of the wallet.
   */
  version: string(),
  /**
   * [WBIP](https://wbips.netlify.app/wbips/WBIP002) methods supported by the wallet.
   */
  methods: optional(array(string())),
  /**
   * List of WBIP standards supported by the wallet. Not currently used.
   */
  supports: array(string())
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getInfoMethodName),
    params: getInfoParamsSchema,
    id: string()
  }).entries
});
var getAddressesMethodName = "getAddresses";
var getAddressesParamsSchema = object({
  /**
   * The purposes for which to generate addresses. See
   * {@linkcode AddressPurpose} for available purposes.
   */
  purposes: array(enum_(AddressPurpose)),
  /**
   * A message to be displayed to the user in the request prompt.
   */
  message: optional(string())
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getAddressesMethodName),
    params: getAddressesParamsSchema,
    id: string()
  }).entries
});
var signMessageMethodName = "signMessage";
var MessageSigningProtocols = /* @__PURE__ */ ((MessageSigningProtocols2) => {
  MessageSigningProtocols2["ECDSA"] = "ECDSA";
  MessageSigningProtocols2["BIP322"] = "BIP322";
  return MessageSigningProtocols2;
})(MessageSigningProtocols || {});
var signMessageParamsSchema = object({
  /**
   * The address used for signing.
   **/
  address: string(),
  /**
   * The message to sign.
   **/
  message: string(),
  /**
   * The protocol to use for signing the message.
   */
  protocol: optional(enum_(MessageSigningProtocols))
});
object({
  /**
   * The signature of the message.
   */
  signature: string(),
  /**
   * hash of the message.
   */
  messageHash: string(),
  /**
   * The address used for signing.
   */
  address: string(),
  /**
   * The protocol to use for signing the message.
   */
  protocol: enum_(MessageSigningProtocols)
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(signMessageMethodName),
    params: signMessageParamsSchema,
    id: string()
  }).entries
});
var getAccountsMethodName = "getAccounts";
var getAccountsParamsSchema = object({
  /**
   * The purposes for which to generate addresses. See
   * {@linkcode AddressPurpose} for available purposes.
   */
  purposes: array(enum_(AddressPurpose)),
  /**
   * A message to be displayed to the user in the request prompt.
   */
  message: optional(string())
});
array(
  object({
    ...addressSchema.entries,
    ...object({
      walletType: walletTypeSchema
    }).entries
  })
);
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getAccountsMethodName),
    params: getAccountsParamsSchema,
    id: string()
  }).entries
});
var getBalanceMethodName = "getBalance";
nullish(null_());
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getBalanceMethodName),
    id: string()
  }).entries
});
var requestPermissionsMethodName = "wallet_requestPermissions";
var requestPermissionsParamsSchema = undefined_();
literal(true);
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(requestPermissionsMethodName),
    params: requestPermissionsParamsSchema,
    id: string()
  }).entries
});
var renouncePermissionsMethodName = "wallet_renouncePermissions";
var renouncePermissionsParamsSchema = undefined_();
literal(true);
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(renouncePermissionsMethodName),
    params: renouncePermissionsParamsSchema,
    id: string()
  }).entries
});
var getWalletTypeMethodName = "wallet_getWalletType";
nullish(null_());
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getWalletTypeMethodName),
    id: string()
  }).entries
});
var getRunesBalanceMethodName = "runes_getBalance";
var getRunesBalanceParamsSchema = nullish(null_());
object({
  balances: array(
    object({
      runeName: string(),
      amount: string(),
      divisibility: number(),
      symbol: string(),
      inscriptionId: nullish(string())
    })
  )
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getRunesBalanceMethodName),
    params: getRunesBalanceParamsSchema,
    id: string()
  }).entries
});
var transferRunesMethodName = "runes_transfer";
var transferRunesParamsSchema = object({
  recipients: array(
    object({
      runeName: string(),
      amount: string(),
      address: string()
    })
  )
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(transferRunesMethodName),
    params: transferRunesParamsSchema,
    id: string()
  }).entries
});
var getInscriptionsMethodName = "ord_getInscriptions";
var getInscriptionsParamsSchema = object({
  offset: number(),
  limit: number()
});
object({
  total: number(),
  limit: number(),
  offset: number(),
  inscriptions: array(
    object({
      inscriptionId: string(),
      inscriptionNumber: string(),
      address: string(),
      collectionName: optional(string()),
      postage: string(),
      contentLength: string(),
      contentType: string(),
      timestamp: number(),
      offset: number(),
      genesisTransaction: string(),
      output: string()
    })
  )
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(getInscriptionsMethodName),
    params: getInscriptionsParamsSchema,
    id: string()
  }).entries
});
var sendInscriptionsMethodName = "ord_sendInscriptions";
var sendInscriptionsParamsSchema = object({
  transfers: array(
    object({
      address: string(),
      inscriptionId: string()
    })
  )
});
object({
  ...rpcRequestMessageSchema.entries,
  ...object({
    method: literal(sendInscriptionsMethodName),
    params: sendInscriptionsParamsSchema,
    id: string()
  }).entries
});
var signMessage$5 = async (options) => {
  var _a, _b;
  const provider = await getProviderOrThrow(options.getProvider);
  const { address: address2, message } = options.payload;
  if (!address2) {
    throw new Error("An address is required to sign a message");
  }
  if (!message) {
    throw new Error("A message to be signed is required");
  }
  try {
    const request2 = lib.createUnsecuredToken(options.payload);
    const response = await provider.signMessage(request2);
    (_a = options.onFinish) == null ? void 0 : _a.call(options, response);
  } catch (error) {
    console.error("[Connect] Error during sign message request", error);
    (_b = options.onCancel) == null ? void 0 : _b.call(options);
  }
};
var serializer = (recipient) => {
  return recipient.map((value3) => {
    const { address: address2, amountSats } = value3;
    return {
      address: address2,
      amountSats: amountSats.toString()
    };
  });
};
var sendBtcTransaction = async (options) => {
  var _a, _b;
  const provider = await getProviderOrThrow(options.getProvider);
  const { recipients, senderAddress, network, message } = options.payload;
  if (!recipients || recipients.length === 0) {
    throw new Error("At least one recipient is required");
  }
  if (recipients.some(
    (item) => typeof item.address !== "string" || typeof item.amountSats !== "bigint"
  )) {
    throw new Error("Incorrect recipient format");
  }
  if (!senderAddress) {
    throw new Error("The sender address is required");
  }
  try {
    const serializedRecipients = serializer(recipients);
    const serializedPayload = {
      network,
      senderAddress,
      message,
      recipients: serializedRecipients
    };
    const request2 = lib.createUnsecuredToken(serializedPayload);
    const response = await provider.sendBtcTransaction(request2);
    (_a = options.onFinish) == null ? void 0 : _a.call(options, response);
  } catch (error) {
    console.error("[Connect] Error during send BTC transaction request", error);
    (_b = options.onCancel) == null ? void 0 : _b.call(options);
  }
};
var signTransaction = async (options) => {
  var _a, _b;
  const provider = await getProviderOrThrow(options.getProvider);
  const { psbtBase64, inputsToSign } = options.payload;
  if (!psbtBase64) {
    throw new Error("A value for psbtBase64 representing the tx hash is required");
  }
  if (!inputsToSign) {
    throw new Error("An array specifying the inputs to be signed by the wallet is required");
  }
  try {
    const request2 = lib.createUnsecuredToken(options.payload);
    const response = await provider.signTransaction(request2);
    (_a = options.onFinish) == null ? void 0 : _a.call(options, response);
  } catch (error) {
    console.error("[Connect] Error during sign transaction request", error);
    (_b = options.onCancel) == null ? void 0 : _b.call(options);
  }
};
const NETWORK_TO_BITCOIN_NETWORK_TYPE = {
  mainnet: BitcoinNetworkType.Mainnet,
  testnet: BitcoinNetworkType.Testnet
};
function fromXOnlyToFullPubkey(xOnly) {
  const xOnlyBuffer = Buffer$3.from(xOnly, "hex");
  if (xOnlyBuffer.length === 33) {
    return xOnly;
  }
  return `02${xOnly}`;
}
src$4.initEccLib(ecc);
async function satsConnectWalletGetAddresses(getProvider, network = "mainnet") {
  if (network === "signet") {
    throw new OrditSDKError("signet network is not supported");
  }
  const result = [];
  const handleOnFinish = (response) => {
    if (!response || !response.addresses || response.addresses.length !== 2) {
      throw new BrowserWalletSigningError(
        "Failed to retrieve addresses using selected wallet"
      );
    }
    response.addresses.forEach((addressObj) => {
      const format = getAddressFormat(addressObj.address, network);
      let fullPubKey = addressObj.publicKey;
      if (format === "taproot") {
        fullPubKey = fromXOnlyToFullPubkey(addressObj.publicKey);
      }
      result.push({
        publicKey: fullPubKey,
        address: addressObj.address,
        format
      });
    });
  };
  const handleOnCancel = () => {
    throw new BrowserWalletRequestCancelledByUserError();
  };
  const options = {
    payload: {
      purposes: ["ordinals", "payment"],
      message: "Provide access to Payment address and Ordinals address",
      network: {
        type: NETWORK_TO_BITCOIN_NETWORK_TYPE[network]
      }
    },
    getProvider,
    onFinish: (response) => handleOnFinish(response),
    onCancel: handleOnCancel
  };
  await getAddress(options);
  return result;
}
async function satsConnectWalletSignPsbt(getProvider, psbt2, {
  finalize = true,
  extractTx = true,
  network,
  inputsToSign
} = { network: "mainnet", inputsToSign: [] }) {
  if (network === "signet") {
    throw new OrditSDKError("signet network is not supported");
  }
  if (!finalize && extractTx) {
    throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
  }
  if (!psbt2 || !network || !inputsToSign.length) {
    throw new OrditSDKError("Invalid options provided");
  }
  let hex;
  let base64 = null;
  const handleOnFinish = (response) => {
    const { psbtBase64 } = response;
    if (!psbtBase64) {
      throw new BrowserWalletSigningError(
        "Failed to sign psbt using selected wallet"
      );
    }
    const signedPsbt = src$4.Psbt.fromBase64(psbtBase64);
    if (finalize) {
      inputsToSign.forEach((input) => {
        input.signingIndexes.forEach((index) => {
          try {
            signedPsbt.finalizeInput(index);
          } catch (error) {
            console.error("Sign psbt error", error);
            throw new OrditSDKError("Failed to finalize input");
          }
        });
      });
    }
    if (extractTx) {
      try {
        hex = signedPsbt.extractTransaction().toHex();
      } catch (error) {
        if (error instanceof Error && error.message === "Not finalized") {
          throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
        } else {
          throw new OrditSDKError("Failed to extract transaction from PSBT");
        }
      }
      base64 = null;
    } else {
      hex = signedPsbt.toHex();
      base64 = signedPsbt.toBase64();
    }
  };
  const handleOnCancel = () => {
    throw new BrowserWalletRequestCancelledByUserError();
  };
  const options = {
    payload: {
      network: {
        type: NETWORK_TO_BITCOIN_NETWORK_TYPE[network]
      },
      message: "Sign PSBT",
      psbtBase64: psbt2.toBase64(),
      broadcast: false,
      inputsToSign
    },
    onFinish: handleOnFinish,
    onCancel: handleOnCancel,
    getProvider
  };
  await signTransaction(options);
  return { hex, base64 };
}
async function satsConnectWalletSignMessage(getProvider, message, address2, network = "mainnet") {
  if (network === "signet") {
    throw new OrditSDKError("signet network is not supported");
  }
  if (!message || !network || !address2) {
    throw new OrditSDKError("Invalid options provided");
  }
  let hex;
  let base64 = null;
  const handleOnFinish = (response) => {
    if (!response) {
      throw new BrowserWalletSigningError(
        "Failed to sign message using selected wallet"
      );
    }
    hex = Buffer$3.from(response, "base64").toString("hex");
    base64 = response;
  };
  const handleOnCancel = () => {
    throw new BrowserWalletRequestCancelledByUserError();
  };
  const options = {
    payload: {
      network: {
        type: NETWORK_TO_BITCOIN_NETWORK_TYPE[network]
      },
      message,
      address: address2
    },
    getProvider,
    onFinish: handleOnFinish,
    onCancel: handleOnCancel
  };
  await signMessage$5(options);
  return { hex, base64 };
}
async function getMagicEdenWalletProvider() {
  const { get: get2 } = getWallets();
  const wallets2 = get2();
  const meWallet = wallets2.find(
    (wallet) => {
      var _a, _b;
      return wallet.name === "Magic Eden" && ((_b = (_a = wallet.features["sats-connect:"]) == null ? void 0 : _a.provider) == null ? void 0 : _b.isMagicEden) === true;
    }
  );
  if (!meWallet) {
    throw new BrowserWalletNotInstalledError(
      "Magic Eden Wallet not installed."
    );
  }
  return meWallet.features["sats-connect:"].provider;
}
async function isInstalled$3() {
  if (typeof window === "undefined") {
    throw new OrditSDKError("Cannot call this function outside a browser");
  }
  try {
    const meProvider = await getMagicEdenWalletProvider();
    return meProvider.isMagicEden !== void 0 && meProvider.isMagicEden === true;
  } catch (e2) {
    if (e2 instanceof BrowserWalletNotInstalledError) {
      return false;
    }
    throw e2;
  }
}
async function getAddresses$2(network = "mainnet") {
  if (!isInstalled$3()) {
    throw new BrowserWalletNotInstalledError(
      "Magic Eden Wallet not installed."
    );
  }
  if (network !== "mainnet") {
    throw new BrowserWalletNetworkMismatchError(
      "Magic Eden Wallet only supports mainnet"
    );
  }
  return satsConnectWalletGetAddresses(getMagicEdenWalletProvider, network);
}
async function signPsbt$4(psbt2, {
  finalize = true,
  extractTx = true,
  network,
  inputsToSign
} = { network: "mainnet", inputsToSign: [] }) {
  if (!isInstalled$3()) {
    throw new BrowserWalletNotInstalledError(
      "Magic Eden Wallet not installed."
    );
  }
  if (network !== "mainnet") {
    throw new BrowserWalletNetworkMismatchError(
      "Magic Eden Wallet only supports mainnet"
    );
  }
  return satsConnectWalletSignPsbt(getMagicEdenWalletProvider, psbt2, {
    finalize,
    extractTx,
    network,
    inputsToSign
  });
}
async function signMessage$4(message, address2, network = "mainnet") {
  if (!isInstalled$3()) {
    throw new BrowserWalletNotInstalledError(
      "Magic Eden Wallet not installed."
    );
  }
  if (network !== "mainnet") {
    throw new BrowserWalletNetworkMismatchError(
      "Magic Eden Wallet only supports mainnet"
    );
  }
  return satsConnectWalletSignMessage(
    getMagicEdenWalletProvider,
    message,
    address2,
    network
  );
}
const NETWORK_TO_UNISAT_NETWORK = {
  mainnet: "livenet",
  testnet: "testnet"
};
function isInstalled$2() {
  if (typeof window === "undefined") {
    throw new OrditSDKError("Cannot call this function outside a browser");
  }
  return typeof window.unisat !== "undefined";
}
async function getAddresses$1(network = "mainnet", readOnly) {
  if (network === "signet") {
    throw new OrditSDKError("signet network is not supported");
  }
  if (!isInstalled$2()) {
    throw new BrowserWalletNotInstalledError("Unisat not installed");
  }
  try {
    const connectedNetwork = await window.unisat.getNetwork();
    const targetNetwork = NETWORK_TO_UNISAT_NETWORK[network];
    if (connectedNetwork !== targetNetwork) {
      await window.unisat.switchNetwork(targetNetwork);
    }
    const accounts = readOnly ? await window.unisat.getAccounts() : await window.unisat.requestAccounts();
    const publicKey = await window.unisat.getPublicKey();
    const address2 = accounts[0];
    if (!address2) {
      return [];
    }
    const format = getAddressFormat(address2, network);
    return [
      {
        publicKey,
        address: address2,
        format
      }
    ];
  } catch (err) {
    if (err instanceof OrditSDKError) {
      throw err;
    }
    const unisatError = err;
    if ((unisatError == null ? void 0 : unisatError.code) === 4001) {
      throw new BrowserWalletRequestCancelledByUserError();
    }
    throw new OrditSDKError(unisatError.message);
  }
}
async function signPsbt$3(psbt2, { finalize = true, extractTx = true } = {}) {
  if (!isInstalled$2()) {
    throw new BrowserWalletNotInstalledError("Unisat not installed");
  }
  if (extractTx && !finalize) {
    throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
  }
  const psbtHex = psbt2.toHex();
  let signedPsbtHex = "";
  try {
    signedPsbtHex = await window.unisat.signPsbt(psbtHex, {
      autoFinalized: finalize
    });
  } catch (err) {
    const unisatError = err;
    if ((unisatError == null ? void 0 : unisatError.code) === 4001) {
      throw new BrowserWalletRequestCancelledByUserError();
    }
  }
  if (!signedPsbtHex) {
    throw new BrowserWalletSigningError("Failed to sign psbt hex using Unisat");
  }
  const signedPsbt = src$4.Psbt.fromHex(signedPsbtHex);
  if (extractTx) {
    try {
      return {
        base64: null,
        hex: signedPsbt.extractTransaction().toHex()
      };
    } catch (error) {
      if (error instanceof Error && error.message === "Not finalized") {
        throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
      } else {
        throw new OrditSDKError("Failed to extract transaction from PSBT");
      }
    }
  } else {
    return {
      base64: signedPsbt.toBase64(),
      hex: signedPsbt.toHex()
    };
  }
}
async function signMessage$3(message, type2 = "ecdsa") {
  if (!isInstalled$2()) {
    throw new BrowserWalletNotInstalledError("Unisat not installed");
  }
  let signature2 = "";
  try {
    signature2 = await window.unisat.signMessage(message, type2);
  } catch (err) {
    const unisatError = err;
    if ((unisatError == null ? void 0 : unisatError.code) === 4001) {
      throw new BrowserWalletRequestCancelledByUserError();
    }
  }
  if (!signature2) {
    throw new BrowserWalletSigningError("Failed to sign message using Unisat");
  }
  return {
    base64: signature2,
    hex: Buffer$3.from(signature2, "base64").toString("hex")
  };
}
function isInstalled$1() {
  var _a;
  if (typeof window === "undefined") {
    throw new OrditSDKError("Cannot call this function outside a browser");
  }
  return typeof ((_a = window.XverseProviders) == null ? void 0 : _a.BitcoinProvider) !== "undefined";
}
async function getXverseWalletProvider() {
  if (!isInstalled$1()) {
    throw new BrowserWalletNotInstalledError("Selected wallet not installed");
  }
  return window.XverseProviders.BitcoinProvider;
}
async function getAddresses(network = "mainnet") {
  if (!isInstalled$1()) {
    throw new BrowserWalletNotInstalledError("Selected wallet not installed");
  }
  return satsConnectWalletGetAddresses(getXverseWalletProvider, network);
}
async function signPsbt$2(psbt2, {
  finalize = true,
  extractTx = true,
  network,
  inputsToSign
} = { network: "mainnet", inputsToSign: [] }) {
  if (!isInstalled$1()) {
    throw new BrowserWalletNotInstalledError("Selected wallet not installed");
  }
  return satsConnectWalletSignPsbt(getXverseWalletProvider, psbt2, {
    finalize,
    extractTx,
    network,
    inputsToSign
  });
}
async function signMessage$2(message, address2, network = "mainnet") {
  if (!isInstalled$1()) {
    throw new BrowserWalletNotInstalledError("Selected wallet not installed");
  }
  return satsConnectWalletSignMessage(
    getXverseWalletProvider,
    message,
    address2,
    network
  );
}
function isMobileUserAgent() {
  if (typeof window === "undefined") {
    return false;
  }
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    window.navigator.userAgent
  );
}
async function waitForUnisatExtensionReady() {
  let attempts = 0;
  const MAX_ATTEMPTS = 20;
  while (attempts < MAX_ATTEMPTS) {
    if (typeof window !== "undefined" && window.unisat) {
      try {
        const accounts = await window.unisat.getAccounts();
        if (accounts && accounts.length > 0) {
          return true;
        }
      } catch (_2) {
        break;
      }
    }
    attempts += 1;
    await new Promise((resolve) => {
      setTimeout(resolve, 100);
    });
  }
  return false;
}
const LoadingIcon = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20200%20200'%3e%3cradialGradient%20id='a12'%20cx='.66'%20fx='.66'%20cy='.3125'%20fy='.3125'%20gradientTransform='scale(1.5)'%3e%3cstop%20offset='0'%20stop-color='%23D9D5D2'%3e%3c/stop%3e%3cstop%20offset='.3'%20stop-color='%23D9D5D2'%20stop-opacity='.9'%3e%3c/stop%3e%3cstop%20offset='.6'%20stop-color='%23D9D5D2'%20stop-opacity='.6'%3e%3c/stop%3e%3cstop%20offset='.8'%20stop-color='%23D9D5D2'%20stop-opacity='.3'%3e%3c/stop%3e%3cstop%20offset='1'%20stop-color='%23D9D5D2'%20stop-opacity='0'%3e%3c/stop%3e%3c/radialGradient%3e%3ccircle%20transform-origin='center'%20fill='none'%20stroke='url(%23a12)'%20stroke-width='15'%20stroke-linecap='round'%20stroke-dasharray='200%201000'%20stroke-dashoffset='0'%20cx='100'%20cy='100'%20r='70'%3e%3canimateTransform%20type='rotate'%20attributeName='transform'%20calcMode='spline'%20dur='2'%20values='360;0'%20keyTimes='0;1'%20keySplines='0%200%201%201'%20repeatCount='indefinite'%3e%3c/animateTransform%3e%3c/circle%3e%3ccircle%20transform-origin='center'%20fill='none'%20opacity='.2'%20stroke='%23D9D5D2'%20stroke-width='15'%20stroke-linecap='round'%20cx='100'%20cy='100'%20r='70'%3e%3c/circle%3e%3c/svg%3e";
const WALLET_TO_NAME = {
  [Wallet.MAGICEDEN]: "Magic Eden",
  [Wallet.UNISAT]: "UniSat",
  [Wallet.XVERSE]: "Xverse",
  [Wallet.LEATHER]: "Leather",
  [Wallet.OKX]: "OKX"
};
function WalletButton({
  wallet,
  subtitle,
  onConnect,
  icon,
  setErrorMessage,
  isDisabled,
  isMobileDevice
}) {
  const { wallet: _connectedWallet, address: _connectedAddress } = useWallie();
  const [{ connectedWallet, connectedAddress }] = useState({
    connectedWallet: _connectedWallet,
    connectedAddress: _connectedAddress
  });
  const [loading, setLoading] = useState(false);
  const walletName = WALLET_TO_NAME[wallet];
  const handleWalletConnectClick = useCallback(async () => {
    setLoading(true);
    const result = await Promise.race([
      onConnect().then(() => setLoading(false)).catch(() => setLoading(false)),
      new Promise((resolve) => {
        setTimeout(() => resolve("timeout"), 5e3);
      })
    ]);
    if (result === "timeout") {
      setErrorMessage(
        "No wallet pop-up? The extension is not responding. Try reloading your browser."
      );
    } else {
      setLoading(false);
    }
  }, [onConnect, setErrorMessage]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    "button",
    {
      type: "button",
      className: "wallie-w-full wallie-flex wallie-flex-row wallie-justify-between wallie-items-center wallie-text-ord-light-gray wallie-bg-ord-light-blue wallie-hover:bg-ord-light-blue-250 wallie-p-2 wallie-rounded-lg md:wallie-text-xl wallie-space-x-4 md:space-x-6 wallie-ease-in wallie-transition-all wallie-duration-100 wallie-ease-in-outscale-120",
      onClick: handleWalletConnectClick,
      disabled: isDisabled,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "wallie-flex wallie-flex-row wallie-space-x-2", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("img", { className: "wallie-w-5 md:wallie-w-8", src: icon, alt: "" }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "wallie-text-lg wallie-block wallie-font-medium", children: walletName }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "span",
            {
              className: "wallie-text-sm wallie-font-medium",
              style: { display: isMobileDevice ? "block" : "none" },
              children: subtitle
            }
          )
        ] }),
        connectedWallet === wallet && connectedAddress.ordinals ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "wallie-flex wallie-flex-row wallie-ml-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "wallie-text-sm wallie-font-medium wallie-pr-3", children: truncateMiddle(connectedAddress.ordinals) }) }) : null,
        loading && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "img",
          {
            src: LoadingIcon,
            width: 24,
            alt: `${walletName} extension is loading`
          }
        )
      ]
    }
  );
}
const WALLET_CHROME_EXTENSION_URL = {
  [Wallet.OKX]: "https://www.okx.com/web3",
  [Wallet.XVERSE]: "https://www.xverse.app/download",
  [Wallet.LEATHER]: "https://leather.io/install-extension",
  [Wallet.MAGICEDEN]: "https://wallet.magiceden.io/",
  [Wallet.UNISAT]: "https://unisat.io/download"
  // their www subdomain doesn't work
};
function SelectWalletModal({
  isOpen,
  closeModal
}) {
  const {
    updateAddress,
    network,
    updateWallet,
    updatePublicKey,
    updateFormat,
    wallet,
    format,
    address: address2,
    publicKey,
    disconnectWallet
  } = useWallie();
  const [errorMessage, setErrorMessage] = useState("");
  const isMobile = isMobileUserAgent();
  const onError = useCallback(
    (walletProvider2, err) => {
      if (err instanceof BrowserWalletNotInstalledError) {
        window.open(
          WALLET_CHROME_EXTENSION_URL[walletProvider2],
          "_blank",
          "noopener,noreferrer"
        );
      }
      setErrorMessage(err.message ?? err.toString());
      disconnectWallet();
    },
    [disconnectWallet]
  );
  const onConnectMagicEdenWallet = useCallback(async () => {
    if (network === "testnet") {
      const unsupportedNetworkError = new Error(
        "Magic Eden wallet is not supported on testnet"
      );
      onError(Wallet.MAGICEDEN, unsupportedNetworkError);
      return false;
    }
    try {
      setErrorMessage("");
      const magicEdenAddresses = await getAddresses$2(network);
      if (!magicEdenAddresses || magicEdenAddresses.length < 1) {
        disconnectWallet();
        throw new Error("Magic Eden via Ordit returned no addresses.");
      }
      const paymentAddress = magicEdenAddresses.find(
        (walletAddress) => walletAddress.format === "segwit" || walletAddress.format === "p2sh-p2wpkh"
      );
      if (!paymentAddress) {
        throw new Error(
          "Magic Eden via Ordit did not return a P2SH or Segwit address."
        );
      }
      const ordinalsAddress = magicEdenAddresses.find(
        (walletAddress) => walletAddress.format === "taproot"
      );
      if (!ordinalsAddress) {
        throw new Error(
          "Magic Eden via Ordit did not return a Taproot address."
        );
      }
      updateAddress({
        ordinals: ordinalsAddress.address,
        payments: paymentAddress.address
      });
      updatePublicKey({
        ordinals: ordinalsAddress.publicKey,
        payments: paymentAddress.publicKey
      });
      updateWallet(Wallet.MAGICEDEN);
      updateFormat({
        ordinals: ordinalsAddress.format,
        payments: paymentAddress.format
      });
      closeModal();
      return true;
    } catch (err) {
      onError(Wallet.MAGICEDEN, err);
      return false;
    }
  }, [
    closeModal,
    disconnectWallet,
    network,
    onError,
    updateAddress,
    updateFormat,
    updatePublicKey,
    updateWallet
  ]);
  const onConnectUnisatWallet = useCallback(
    async ({ readOnly } = {}) => {
      try {
        setErrorMessage("");
        const unisat = await getAddresses$1(network, readOnly);
        if (!unisat || unisat.length < 1) {
          disconnectWallet();
          throw new Error("Unisat via Ordit returned no addresses.");
        }
        const unisatWallet = unisat[0];
        updateAddress({
          ordinals: unisatWallet.address,
          payments: unisatWallet.address
        });
        updatePublicKey({
          ordinals: unisatWallet.publicKey,
          payments: unisatWallet.publicKey
        });
        updateWallet(Wallet.UNISAT);
        updateFormat({
          ordinals: unisatWallet.format,
          payments: unisatWallet.format
        });
        closeModal();
        return true;
      } catch (err) {
        onError(Wallet.UNISAT, err);
        return false;
      }
    },
    [
      closeModal,
      disconnectWallet,
      network,
      onError,
      updateAddress,
      updateFormat,
      updatePublicKey,
      updateWallet
    ]
  );
  const onConnectXverseWallet = useCallback(async () => {
    try {
      setErrorMessage("");
      const xverse = await getAddresses(network);
      if (!xverse || xverse.length < 1) {
        disconnectWallet();
        throw new Error("Xverse via Ordit returned no addresses.");
      }
      const paymentAddress = xverse.find(
        (walletAddress) => walletAddress.format === "p2sh-p2wpkh" || walletAddress.format === "segwit"
      );
      if (!paymentAddress) {
        throw new Error(
          "Xverse via Ordit did not return a P2SH or Segwit address."
        );
      }
      const ordinalsAddress = xverse.find(
        (walletAddress) => walletAddress.format === "taproot"
      );
      if (!ordinalsAddress) {
        throw new Error("Xverse via Ordit did not return a Taproot address.");
      }
      updateAddress({
        ordinals: ordinalsAddress.address,
        payments: paymentAddress.address
      });
      updatePublicKey({
        ordinals: ordinalsAddress.publicKey,
        payments: paymentAddress.publicKey
      });
      updateWallet(Wallet.XVERSE);
      updateFormat({
        ordinals: ordinalsAddress.format,
        payments: paymentAddress.format
      });
      closeModal();
      return true;
    } catch (err) {
      onError(Wallet.XVERSE, err);
      return false;
    }
  }, [
    closeModal,
    disconnectWallet,
    network,
    onError,
    updateAddress,
    updateFormat,
    updatePublicKey,
    updateWallet
  ]);
  const onConnectLeatherWallet = useCallback(async () => {
    try {
      setErrorMessage("");
      const leather = await getAddresses$3(network);
      if (!leather || leather.length < 1) {
        disconnectWallet();
        throw new Error("Leather via Ordit returned no addresses.");
      }
      const paymentAddress = leather.find(
        (walletAddress) => walletAddress.format === "segwit"
      );
      if (!paymentAddress) {
        throw new Error("Leather via Ordit did not return a Segwit address.");
      }
      const ordinalAddress = leather.find(
        (walletAddress) => walletAddress.format === "taproot"
      );
      if (!ordinalAddress) {
        throw new Error("Leather via Ordit did not return a Taproot address.");
      }
      updateAddress({
        ordinals: ordinalAddress.address,
        payments: paymentAddress.address
      });
      updatePublicKey({
        ordinals: ordinalAddress.publicKey,
        payments: paymentAddress.publicKey
      });
      updateWallet(Wallet.LEATHER);
      updateFormat({
        ordinals: ordinalAddress.format,
        payments: paymentAddress.format
      });
      closeModal();
      return true;
    } catch (err) {
      onError(Wallet.LEATHER, err);
      return false;
    }
  }, [
    closeModal,
    disconnectWallet,
    network,
    onError,
    updateAddress,
    updateFormat,
    updatePublicKey,
    updateWallet
  ]);
  useEffect(() => {
    if (wallet !== Wallet.UNISAT) {
      return void 0;
    }
    let isMounted = true;
    let isConnectSuccessful = false;
    const listener = () => onConnectUnisatWallet();
    if (address2 && publicKey && format) {
      const connectToUnisatWalletOnReady = async () => {
        const isUnisatExtensionReady = await waitForUnisatExtensionReady();
        if (!isMounted) {
          return;
        }
        if (!isUnisatExtensionReady) {
          disconnectWallet();
          return;
        }
        isConnectSuccessful = await onConnectUnisatWallet({ readOnly: true });
        if (!isMounted) {
          return;
        }
        if (isConnectSuccessful) {
          window.unisat.addListener("accountsChanged", listener);
        }
      };
      connectToUnisatWalletOnReady();
    }
    return () => {
      isMounted = false;
      if (isConnectSuccessful) {
        window.unisat.removeListener("accountsChanged", listener);
      }
    };
  }, [
    wallet,
    onConnectUnisatWallet,
    disconnectWallet,
    address2,
    publicKey,
    format
  ]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(qe, { appear: true, show: isOpen, as: Fragment, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    _t,
    {
      as: "div",
      className: "wallie-z-50 wallie-fixed wallie-inset-0 wallie-overflow-y-auto",
      onClose: closeModal,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          qe.Child,
          {
            as: Fragment,
            enter: "wallie-ease-out wallie-duration-300",
            enterFrom: "wallie-opacity-0",
            enterTo: "wallie-opacity-100",
            leave: "wallie-ease-in wallie-duration-200",
            leaveFrom: "wallie-opacity-100",
            leaveTo: "wallie-opacity-0",
            children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "wallie-fixed wallie-inset-0 wallie-bg-black wallie-bg-opacity-90 md:wallie-bg-opacity-75 wallie-transition-opacity" })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: "wallie-fixed wallie-inset-0 wallie-z-10 wallie-overflow-y-auto", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "wallie-flex wallie-min-h-full wallie-w-full md:wallie-w-96 wallie-mx-auto wallie-items-end wallie-justify-center wallie-p-4 wallie-text-left sm:wallie-items-center sm:wallie-p-0", children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          qe.Child,
          {
            as: Fragment,
            enter: "wallie-ease-out wallie-duration-300",
            enterFrom: "wallie-opacity-0 wallie-scale-95",
            enterTo: "wallie-opacity-100 wallie-scale-100",
            leave: "wallie-ease-in wallie-duration-200",
            leaveFrom: "wallie-opacity-100 wallie-scale-100",
            leaveTo: "wallie-opacity-0 wallie-scale-95",
            children: /* @__PURE__ */ jsxRuntimeExports.jsxs(_t.Panel, { className: "wallie-relative wallie-bg-ord-blue-600 wallie-transform wallie-overflow-hidden wallie-rounded-lg wallie-p-8 wallie-transition-all wallie-w-full", children: [
              /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { className: "wallie-flex wallie-flex-row", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  _t.Title,
                  {
                    as: "h3",
                    className: "wallie-text-[21px] wallie-font-medium wallie-leading-8 wallie--mt-1  wallie-text-ord-gray",
                    children: "Connect a wallet to continue"
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  "button",
                  {
                    type: "button",
                    onClick: closeModal,
                    className: "wallie-ml-auto",
                    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
                      "img",
                      {
                        src: CloseModalIcon,
                        alt: "close modal",
                        className: "wallie-w-[19px] wallie-h-[19px]"
                      }
                    )
                  }
                )
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "wallie-text-ord-light-blue-400 wallie-font-medium wallie-py-3", children: "Choose a wallet below to connect and continue" }),
              errorMessage && /* @__PURE__ */ jsxRuntimeExports.jsx("p", { className: "wallie-text-ord-alert wallie-pb-4", children: errorMessage }),
              /* @__PURE__ */ jsxRuntimeExports.jsx("section", { className: "wallie-w-full", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("section", { className: "wallie-w-full wallie-space-y-4", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  WalletButton,
                  {
                    wallet: Wallet.LEATHER,
                    subtitle: "Coming soon on mobile browsing",
                    onConnect: onConnectLeatherWallet,
                    icon: LeatherWalletIcon,
                    setErrorMessage,
                    isDisabled: isMobile,
                    isMobileDevice: isMobile
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  WalletButton,
                  {
                    wallet: Wallet.XVERSE,
                    subtitle: "",
                    onConnect: onConnectXverseWallet,
                    icon: XverseWalletIcon,
                    setErrorMessage,
                    isMobileDevice: isMobile
                  }
                ),
                !isMobile && // TODO: remove this once unisat supported on mobile devices
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  WalletButton,
                  {
                    wallet: Wallet.UNISAT,
                    subtitle: "Coming soon on mobile browsing",
                    onConnect: onConnectUnisatWallet,
                    icon: UnisatWalletIcon,
                    setErrorMessage,
                    isDisabled: isMobile,
                    isMobileDevice: isMobile
                  }
                ),
                /* @__PURE__ */ jsxRuntimeExports.jsx(
                  WalletButton,
                  {
                    wallet: Wallet.MAGICEDEN,
                    subtitle: "",
                    onConnect: onConnectMagicEdenWallet,
                    icon: MagicEdenWalletIcon,
                    setErrorMessage,
                    isMobileDevice: isMobile
                  }
                )
              ] }) })
            ] })
          }
        ) }) })
      ]
    }
  ) });
}
function OrdConnectKit({
  connectButton,
  connectButtonComponent,
  hideConnectButton,
  onViewProfile,
  onChangeWalletClick,
  onDisconnectWalletClick
}) {
  const {
    address: address2,
    disconnectWallet,
    network,
    isModalOpen,
    openModal,
    closeModal
  } = useWallie();
  const hasMounted = useHasMounted();
  const renderConnectButton = () => {
    if (hideConnectButton) {
      return null;
    }
    return (address2 == null ? void 0 : address2.ordinals) ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      PostConnectButton,
      {
        address: address2.ordinals,
        network,
        onViewProfile,
        onChangeWallet: () => {
          openModal();
          onChangeWalletClick == null ? void 0 : onChangeWalletClick();
        },
        onDisconnectWallet: () => {
          disconnectWallet();
          onDisconnectWalletClick == null ? void 0 : onDisconnectWalletClick();
        }
      }
    ) : /* @__PURE__ */ jsxRuntimeExports.jsx(
      PreConnectButton,
      {
        disabled: !hasMounted,
        connectButton,
        connectButtonComponent,
        openModal
      }
    );
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    renderConnectButton(),
    hasMounted ? /* @__PURE__ */ jsxRuntimeExports.jsx(SelectWalletModal, { isOpen: isModalOpen, closeModal }) : null
  ] });
}
var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
function clone(configObject) {
  var div, convertBase, parseNumeric, P2 = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE2 = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT2 = {
    prefix: "",
    groupSize: 3,
    secondaryGroupSize: 0,
    groupSeparator: ",",
    decimalSeparator: ".",
    fractionGroupSize: 0,
    fractionGroupSeparator: " ",
    // non-breaking space
    suffix: ""
  }, ALPHABET2 = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
  function BigNumber2(v2, b2) {
    var alphabet, c2, caseChanged, e2, i2, isNum, len2, str, x2 = this;
    if (!(x2 instanceof BigNumber2)) return new BigNumber2(v2, b2);
    if (b2 == null) {
      if (v2 && v2._isBigNumber === true) {
        x2.s = v2.s;
        if (!v2.c || v2.e > MAX_EXP) {
          x2.c = x2.e = null;
        } else if (v2.e < MIN_EXP) {
          x2.c = [x2.e = 0];
        } else {
          x2.e = v2.e;
          x2.c = v2.c.slice();
        }
        return;
      }
      if ((isNum = typeof v2 == "number") && v2 * 0 == 0) {
        x2.s = 1 / v2 < 0 ? (v2 = -v2, -1) : 1;
        if (v2 === ~~v2) {
          for (e2 = 0, i2 = v2; i2 >= 10; i2 /= 10, e2++) ;
          if (e2 > MAX_EXP) {
            x2.c = x2.e = null;
          } else {
            x2.e = e2;
            x2.c = [v2];
          }
          return;
        }
        str = String(v2);
      } else {
        if (!isNumeric.test(str = String(v2))) return parseNumeric(x2, str, isNum);
        x2.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }
      if ((e2 = str.indexOf(".")) > -1) str = str.replace(".", "");
      if ((i2 = str.search(/e/i)) > 0) {
        if (e2 < 0) e2 = i2;
        e2 += +str.slice(i2 + 1);
        str = str.substring(0, i2);
      } else if (e2 < 0) {
        e2 = str.length;
      }
    } else {
      intCheck(b2, 2, ALPHABET2.length, "Base");
      if (b2 == 10 && alphabetHasNormalDecimalDigits) {
        x2 = new BigNumber2(v2);
        return round(x2, DECIMAL_PLACES + x2.e + 1, ROUNDING_MODE);
      }
      str = String(v2);
      if (isNum = typeof v2 == "number") {
        if (v2 * 0 != 0) return parseNumeric(x2, str, isNum, b2);
        x2.s = 1 / v2 < 0 ? (str = str.slice(1), -1) : 1;
        if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
          throw Error(tooManyDigits + v2);
        }
      } else {
        x2.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }
      alphabet = ALPHABET2.slice(0, b2);
      e2 = i2 = 0;
      for (len2 = str.length; i2 < len2; i2++) {
        if (alphabet.indexOf(c2 = str.charAt(i2)) < 0) {
          if (c2 == ".") {
            if (i2 > e2) {
              e2 = len2;
              continue;
            }
          } else if (!caseChanged) {
            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i2 = -1;
              e2 = 0;
              continue;
            }
          }
          return parseNumeric(x2, String(v2), isNum, b2);
        }
      }
      isNum = false;
      str = convertBase(str, b2, 10, x2.s);
      if ((e2 = str.indexOf(".")) > -1) str = str.replace(".", "");
      else e2 = str.length;
    }
    for (i2 = 0; str.charCodeAt(i2) === 48; i2++) ;
    for (len2 = str.length; str.charCodeAt(--len2) === 48; ) ;
    if (str = str.slice(i2, ++len2)) {
      len2 -= i2;
      if (isNum && BigNumber2.DEBUG && len2 > 15 && (v2 > MAX_SAFE_INTEGER || v2 !== mathfloor(v2))) {
        throw Error(tooManyDigits + x2.s * v2);
      }
      if ((e2 = e2 - i2 - 1) > MAX_EXP) {
        x2.c = x2.e = null;
      } else if (e2 < MIN_EXP) {
        x2.c = [x2.e = 0];
      } else {
        x2.e = e2;
        x2.c = [];
        i2 = (e2 + 1) % LOG_BASE;
        if (e2 < 0) i2 += LOG_BASE;
        if (i2 < len2) {
          if (i2) x2.c.push(+str.slice(0, i2));
          for (len2 -= LOG_BASE; i2 < len2; ) {
            x2.c.push(+str.slice(i2, i2 += LOG_BASE));
          }
          i2 = LOG_BASE - (str = str.slice(i2)).length;
        } else {
          i2 -= len2;
        }
        for (; i2--; str += "0") ;
        x2.c.push(+str);
      }
    } else {
      x2.c = [x2.e = 0];
    }
  }
  BigNumber2.clone = clone;
  BigNumber2.ROUND_UP = 0;
  BigNumber2.ROUND_DOWN = 1;
  BigNumber2.ROUND_CEIL = 2;
  BigNumber2.ROUND_FLOOR = 3;
  BigNumber2.ROUND_HALF_UP = 4;
  BigNumber2.ROUND_HALF_DOWN = 5;
  BigNumber2.ROUND_HALF_EVEN = 6;
  BigNumber2.ROUND_HALF_CEIL = 7;
  BigNumber2.ROUND_HALF_FLOOR = 8;
  BigNumber2.EUCLID = 9;
  BigNumber2.config = BigNumber2.set = function(obj) {
    var p2, v2;
    if (obj != null) {
      if (typeof obj == "object") {
        if (obj.hasOwnProperty(p2 = "DECIMAL_PLACES")) {
          v2 = obj[p2];
          intCheck(v2, 0, MAX, p2);
          DECIMAL_PLACES = v2;
        }
        if (obj.hasOwnProperty(p2 = "ROUNDING_MODE")) {
          v2 = obj[p2];
          intCheck(v2, 0, 8, p2);
          ROUNDING_MODE = v2;
        }
        if (obj.hasOwnProperty(p2 = "EXPONENTIAL_AT")) {
          v2 = obj[p2];
          if (v2 && v2.pop) {
            intCheck(v2[0], -MAX, 0, p2);
            intCheck(v2[1], 0, MAX, p2);
            TO_EXP_NEG = v2[0];
            TO_EXP_POS = v2[1];
          } else {
            intCheck(v2, -MAX, MAX, p2);
            TO_EXP_NEG = -(TO_EXP_POS = v2 < 0 ? -v2 : v2);
          }
        }
        if (obj.hasOwnProperty(p2 = "RANGE")) {
          v2 = obj[p2];
          if (v2 && v2.pop) {
            intCheck(v2[0], -MAX, -1, p2);
            intCheck(v2[1], 1, MAX, p2);
            MIN_EXP = v2[0];
            MAX_EXP = v2[1];
          } else {
            intCheck(v2, -MAX, MAX, p2);
            if (v2) {
              MIN_EXP = -(MAX_EXP = v2 < 0 ? -v2 : v2);
            } else {
              throw Error(bignumberError + p2 + " cannot be zero: " + v2);
            }
          }
        }
        if (obj.hasOwnProperty(p2 = "CRYPTO")) {
          v2 = obj[p2];
          if (v2 === !!v2) {
            if (v2) {
              if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v2;
              } else {
                CRYPTO = !v2;
                throw Error(bignumberError + "crypto unavailable");
              }
            } else {
              CRYPTO = v2;
            }
          } else {
            throw Error(bignumberError + p2 + " not true or false: " + v2);
          }
        }
        if (obj.hasOwnProperty(p2 = "MODULO_MODE")) {
          v2 = obj[p2];
          intCheck(v2, 0, 9, p2);
          MODULO_MODE = v2;
        }
        if (obj.hasOwnProperty(p2 = "POW_PRECISION")) {
          v2 = obj[p2];
          intCheck(v2, 0, MAX, p2);
          POW_PRECISION = v2;
        }
        if (obj.hasOwnProperty(p2 = "FORMAT")) {
          v2 = obj[p2];
          if (typeof v2 == "object") FORMAT2 = v2;
          else throw Error(bignumberError + p2 + " not an object: " + v2);
        }
        if (obj.hasOwnProperty(p2 = "ALPHABET")) {
          v2 = obj[p2];
          if (typeof v2 == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v2)) {
            alphabetHasNormalDecimalDigits = v2.slice(0, 10) == "0123456789";
            ALPHABET2 = v2;
          } else {
            throw Error(bignumberError + p2 + " invalid: " + v2);
          }
        }
      } else {
        throw Error(bignumberError + "Object expected: " + obj);
      }
    }
    return {
      DECIMAL_PLACES,
      ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO,
      MODULO_MODE,
      POW_PRECISION,
      FORMAT: FORMAT2,
      ALPHABET: ALPHABET2
    };
  };
  BigNumber2.isBigNumber = function(v2) {
    if (!v2 || v2._isBigNumber !== true) return false;
    if (!BigNumber2.DEBUG) return true;
    var i2, n2, c2 = v2.c, e2 = v2.e, s2 = v2.s;
    out: if ({}.toString.call(c2) == "[object Array]") {
      if ((s2 === 1 || s2 === -1) && e2 >= -MAX && e2 <= MAX && e2 === mathfloor(e2)) {
        if (c2[0] === 0) {
          if (e2 === 0 && c2.length === 1) return true;
          break out;
        }
        i2 = (e2 + 1) % LOG_BASE;
        if (i2 < 1) i2 += LOG_BASE;
        if (String(c2[0]).length == i2) {
          for (i2 = 0; i2 < c2.length; i2++) {
            n2 = c2[i2];
            if (n2 < 0 || n2 >= BASE || n2 !== mathfloor(n2)) break out;
          }
          if (n2 !== 0) return true;
        }
      }
    } else if (c2 === null && e2 === null && (s2 === null || s2 === 1 || s2 === -1)) {
      return true;
    }
    throw Error(bignumberError + "Invalid BigNumber: " + v2);
  };
  BigNumber2.maximum = BigNumber2.max = function() {
    return maxOrMin(arguments, -1);
  };
  BigNumber2.minimum = BigNumber2.min = function() {
    return maxOrMin(arguments, 1);
  };
  BigNumber2.random = function() {
    var pow2_53 = 9007199254740992;
    var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
      return mathfloor(Math.random() * pow2_53);
    } : function() {
      return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
    };
    return function(dp) {
      var a2, b2, e2, k2, v2, i2 = 0, c2 = [], rand = new BigNumber2(ONE2);
      if (dp == null) dp = DECIMAL_PLACES;
      else intCheck(dp, 0, MAX);
      k2 = mathceil(dp / LOG_BASE);
      if (CRYPTO) {
        if (crypto.getRandomValues) {
          a2 = crypto.getRandomValues(new Uint32Array(k2 *= 2));
          for (; i2 < k2; ) {
            v2 = a2[i2] * 131072 + (a2[i2 + 1] >>> 11);
            if (v2 >= 9e15) {
              b2 = crypto.getRandomValues(new Uint32Array(2));
              a2[i2] = b2[0];
              a2[i2 + 1] = b2[1];
            } else {
              c2.push(v2 % 1e14);
              i2 += 2;
            }
          }
          i2 = k2 / 2;
        } else if (crypto.randomBytes) {
          a2 = crypto.randomBytes(k2 *= 7);
          for (; i2 < k2; ) {
            v2 = (a2[i2] & 31) * 281474976710656 + a2[i2 + 1] * 1099511627776 + a2[i2 + 2] * 4294967296 + a2[i2 + 3] * 16777216 + (a2[i2 + 4] << 16) + (a2[i2 + 5] << 8) + a2[i2 + 6];
            if (v2 >= 9e15) {
              crypto.randomBytes(7).copy(a2, i2);
            } else {
              c2.push(v2 % 1e14);
              i2 += 7;
            }
          }
          i2 = k2 / 7;
        } else {
          CRYPTO = false;
          throw Error(bignumberError + "crypto unavailable");
        }
      }
      if (!CRYPTO) {
        for (; i2 < k2; ) {
          v2 = random53bitInt();
          if (v2 < 9e15) c2[i2++] = v2 % 1e14;
        }
      }
      k2 = c2[--i2];
      dp %= LOG_BASE;
      if (k2 && dp) {
        v2 = POWS_TEN[LOG_BASE - dp];
        c2[i2] = mathfloor(k2 / v2) * v2;
      }
      for (; c2[i2] === 0; c2.pop(), i2--) ;
      if (i2 < 0) {
        c2 = [e2 = 0];
      } else {
        for (e2 = -1; c2[0] === 0; c2.splice(0, 1), e2 -= LOG_BASE) ;
        for (i2 = 1, v2 = c2[0]; v2 >= 10; v2 /= 10, i2++) ;
        if (i2 < LOG_BASE) e2 -= LOG_BASE - i2;
      }
      rand.e = e2;
      rand.c = c2;
      return rand;
    };
  }();
  BigNumber2.sum = function() {
    var i2 = 1, args = arguments, sum = new BigNumber2(args[0]);
    for (; i2 < args.length; ) sum = sum.plus(args[i2++]);
    return sum;
  };
  convertBase = /* @__PURE__ */ function() {
    var decimal = "0123456789";
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j2, arr = [0], arrL, i2 = 0, len2 = str.length;
      for (; i2 < len2; ) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
        arr[0] += alphabet.indexOf(str.charAt(i2++));
        for (j2 = 0; j2 < arr.length; j2++) {
          if (arr[j2] > baseOut - 1) {
            if (arr[j2 + 1] == null) arr[j2 + 1] = 0;
            arr[j2 + 1] += arr[j2] / baseOut | 0;
            arr[j2] %= baseOut;
          }
        }
      }
      return arr.reverse();
    }
    return function(str, baseIn, baseOut, sign2, callerIsToString) {
      var alphabet, d2, e2, k2, r2, x2, xc, y2, i2 = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
      if (i2 >= 0) {
        k2 = POW_PRECISION;
        POW_PRECISION = 0;
        str = str.replace(".", "");
        y2 = new BigNumber2(baseIn);
        x2 = y2.pow(str.length - i2);
        POW_PRECISION = k2;
        y2.c = toBaseOut(
          toFixedPoint(coeffToString(x2.c), x2.e, "0"),
          10,
          baseOut,
          decimal
        );
        y2.e = y2.c.length;
      }
      xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET2, decimal) : (alphabet = decimal, ALPHABET2));
      e2 = k2 = xc.length;
      for (; xc[--k2] == 0; xc.pop()) ;
      if (!xc[0]) return alphabet.charAt(0);
      if (i2 < 0) {
        --e2;
      } else {
        x2.c = xc;
        x2.e = e2;
        x2.s = sign2;
        x2 = div(x2, y2, dp, rm, baseOut);
        xc = x2.c;
        r2 = x2.r;
        e2 = x2.e;
      }
      d2 = e2 + dp + 1;
      i2 = xc[d2];
      k2 = baseOut / 2;
      r2 = r2 || d2 < 0 || xc[d2 + 1] != null;
      r2 = rm < 4 ? (i2 != null || r2) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : i2 > k2 || i2 == k2 && (rm == 4 || r2 || rm == 6 && xc[d2 - 1] & 1 || rm == (x2.s < 0 ? 8 : 7));
      if (d2 < 1 || !xc[0]) {
        str = r2 ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
      } else {
        xc.length = d2;
        if (r2) {
          for (--baseOut; ++xc[--d2] > baseOut; ) {
            xc[d2] = 0;
            if (!d2) {
              ++e2;
              xc = [1].concat(xc);
            }
          }
        }
        for (k2 = xc.length; !xc[--k2]; ) ;
        for (i2 = 0, str = ""; i2 <= k2; str += alphabet.charAt(xc[i2++])) ;
        str = toFixedPoint(str, e2, alphabet.charAt(0));
      }
      return str;
    };
  }();
  div = /* @__PURE__ */ function() {
    function multiply(x2, k2, base2) {
      var m2, temp, xlo, xhi, carry = 0, i2 = x2.length, klo = k2 % SQRT_BASE, khi = k2 / SQRT_BASE | 0;
      for (x2 = x2.slice(); i2--; ) {
        xlo = x2[i2] % SQRT_BASE;
        xhi = x2[i2] / SQRT_BASE | 0;
        m2 = khi * xlo + xhi * klo;
        temp = klo * xlo + m2 % SQRT_BASE * SQRT_BASE + carry;
        carry = (temp / base2 | 0) + (m2 / SQRT_BASE | 0) + khi * xhi;
        x2[i2] = temp % base2;
      }
      if (carry) x2 = [carry].concat(x2);
      return x2;
    }
    function compare2(a2, b2, aL, bL) {
      var i2, cmp;
      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {
        for (i2 = cmp = 0; i2 < aL; i2++) {
          if (a2[i2] != b2[i2]) {
            cmp = a2[i2] > b2[i2] ? 1 : -1;
            break;
          }
        }
      }
      return cmp;
    }
    function subtract(a2, b2, aL, base2) {
      var i2 = 0;
      for (; aL--; ) {
        a2[aL] -= i2;
        i2 = a2[aL] < b2[aL] ? 1 : 0;
        a2[aL] = i2 * base2 + a2[aL] - b2[aL];
      }
      for (; !a2[0] && a2.length > 1; a2.splice(0, 1)) ;
    }
    return function(x2, y2, dp, rm, base2) {
      var cmp, e2, i2, more, n2, prod, prodL, q2, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s2 = x2.s == y2.s ? 1 : -1, xc = x2.c, yc = y2.c;
      if (!xc || !xc[0] || !yc || !yc[0]) {
        return new BigNumber2(
          // Return NaN if either NaN, or both Infinity or 0.
          !x2.s || !y2.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s2 * 0 : s2 / 0
          )
        );
      }
      q2 = new BigNumber2(s2);
      qc = q2.c = [];
      e2 = x2.e - y2.e;
      s2 = dp + e2 + 1;
      if (!base2) {
        base2 = BASE;
        e2 = bitFloor(x2.e / LOG_BASE) - bitFloor(y2.e / LOG_BASE);
        s2 = s2 / LOG_BASE | 0;
      }
      for (i2 = 0; yc[i2] == (xc[i2] || 0); i2++) ;
      if (yc[i2] > (xc[i2] || 0)) e2--;
      if (s2 < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i2 = 0;
        s2 += 2;
        n2 = mathfloor(base2 / (yc[0] + 1));
        if (n2 > 1) {
          yc = multiply(yc, n2, base2);
          xc = multiply(xc, n2, base2);
          yL = yc.length;
          xL = xc.length;
        }
        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;
        for (; remL < yL; rem[remL++] = 0) ;
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base2 / 2) yc0++;
        do {
          n2 = 0;
          cmp = compare2(yc, rem, yL, remL);
          if (cmp < 0) {
            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base2 + (rem[1] || 0);
            n2 = mathfloor(rem0 / yc0);
            if (n2 > 1) {
              if (n2 >= base2) n2 = base2 - 1;
              prod = multiply(yc, n2, base2);
              prodL = prod.length;
              remL = rem.length;
              while (compare2(prod, rem, prodL, remL) == 1) {
                n2--;
                subtract(prod, yL < prodL ? yz : yc, prodL, base2);
                prodL = prod.length;
                cmp = 1;
              }
            } else {
              if (n2 == 0) {
                cmp = n2 = 1;
              }
              prod = yc.slice();
              prodL = prod.length;
            }
            if (prodL < remL) prod = [0].concat(prod);
            subtract(rem, prod, remL, base2);
            remL = rem.length;
            if (cmp == -1) {
              while (compare2(yc, rem, yL, remL) < 1) {
                n2++;
                subtract(rem, yL < remL ? yz : yc, remL, base2);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n2++;
            rem = [0];
          }
          qc[i2++] = n2;
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s2--);
        more = rem[0] != null;
        if (!qc[0]) qc.splice(0, 1);
      }
      if (base2 == BASE) {
        for (i2 = 1, s2 = qc[0]; s2 >= 10; s2 /= 10, i2++) ;
        round(q2, dp + (q2.e = i2 + e2 * LOG_BASE - 1) + 1, rm, more);
      } else {
        q2.e = e2;
        q2.r = +more;
      }
      return q2;
    };
  }();
  function format(n2, i2, rm, id) {
    var c0, e2, ne, len2, str;
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    if (!n2.c) return n2.toString();
    c0 = n2.c[0];
    ne = n2.e;
    if (i2 == null) {
      str = coeffToString(n2.c);
      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
    } else {
      n2 = round(new BigNumber2(n2), i2, rm);
      e2 = n2.e;
      str = coeffToString(n2.c);
      len2 = str.length;
      if (id == 1 || id == 2 && (i2 <= e2 || e2 <= TO_EXP_NEG)) {
        for (; len2 < i2; str += "0", len2++) ;
        str = toExponential(str, e2);
      } else {
        i2 -= ne;
        str = toFixedPoint(str, e2, "0");
        if (e2 + 1 > len2) {
          if (--i2 > 0) for (str += "."; i2--; str += "0") ;
        } else {
          i2 += e2 - len2;
          if (i2 > 0) {
            if (e2 + 1 == len2) str += ".";
            for (; i2--; str += "0") ;
          }
        }
      }
    }
    return n2.s < 0 && c0 ? "-" + str : str;
  }
  function maxOrMin(args, n2) {
    var k2, y2, i2 = 1, x2 = new BigNumber2(args[0]);
    for (; i2 < args.length; i2++) {
      y2 = new BigNumber2(args[i2]);
      if (!y2.s || (k2 = compare(x2, y2)) === n2 || k2 === 0 && x2.s === n2) {
        x2 = y2;
      }
    }
    return x2;
  }
  function normalise(n2, c2, e2) {
    var i2 = 1, j2 = c2.length;
    for (; !c2[--j2]; c2.pop()) ;
    for (j2 = c2[0]; j2 >= 10; j2 /= 10, i2++) ;
    if ((e2 = i2 + e2 * LOG_BASE - 1) > MAX_EXP) {
      n2.c = n2.e = null;
    } else if (e2 < MIN_EXP) {
      n2.c = [n2.e = 0];
    } else {
      n2.e = e2;
      n2.c = c2;
    }
    return n2;
  }
  parseNumeric = /* @__PURE__ */ function() {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    return function(x2, str, isNum, b2) {
      var base2, s2 = isNum ? str : str.replace(whitespaceOrPlus, "");
      if (isInfinityOrNaN.test(s2)) {
        x2.s = isNaN(s2) ? null : s2 < 0 ? -1 : 1;
      } else {
        if (!isNum) {
          s2 = s2.replace(basePrefix, function(m2, p1, p2) {
            base2 = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
            return !b2 || b2 == base2 ? p1 : m2;
          });
          if (b2) {
            base2 = b2;
            s2 = s2.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
          }
          if (str != s2) return new BigNumber2(s2, base2);
        }
        if (BigNumber2.DEBUG) {
          throw Error(bignumberError + "Not a" + (b2 ? " base " + b2 : "") + " number: " + str);
        }
        x2.s = null;
      }
      x2.c = x2.e = null;
    };
  }();
  function round(x2, sd, rm, r2) {
    var d2, i2, j2, k2, n2, ni, rd, xc = x2.c, pows10 = POWS_TEN;
    if (xc) {
      out: {
        for (d2 = 1, k2 = xc[0]; k2 >= 10; k2 /= 10, d2++) ;
        i2 = sd - d2;
        if (i2 < 0) {
          i2 += LOG_BASE;
          j2 = sd;
          n2 = xc[ni = 0];
          rd = mathfloor(n2 / pows10[d2 - j2 - 1] % 10);
        } else {
          ni = mathceil((i2 + 1) / LOG_BASE);
          if (ni >= xc.length) {
            if (r2) {
              for (; xc.length <= ni; xc.push(0)) ;
              n2 = rd = 0;
              d2 = 1;
              i2 %= LOG_BASE;
              j2 = i2 - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n2 = k2 = xc[ni];
            for (d2 = 1; k2 >= 10; k2 /= 10, d2++) ;
            i2 %= LOG_BASE;
            j2 = i2 - LOG_BASE + d2;
            rd = j2 < 0 ? 0 : mathfloor(n2 / pows10[d2 - j2 - 1] % 10);
          }
        }
        r2 = r2 || sd < 0 || // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
        xc[ni + 1] != null || (j2 < 0 ? n2 : n2 % pows10[d2 - j2 - 1]);
        r2 = rm < 4 ? (rd || r2) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r2 || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i2 > 0 ? j2 > 0 ? n2 / pows10[d2 - j2] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x2.s < 0 ? 8 : 7));
        if (sd < 1 || !xc[0]) {
          xc.length = 0;
          if (r2) {
            sd -= x2.e + 1;
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x2.e = -sd || 0;
          } else {
            xc[0] = x2.e = 0;
          }
          return x2;
        }
        if (i2 == 0) {
          xc.length = ni;
          k2 = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k2 = pows10[LOG_BASE - i2];
          xc[ni] = j2 > 0 ? mathfloor(n2 / pows10[d2 - j2] % pows10[j2]) * k2 : 0;
        }
        if (r2) {
          for (; ; ) {
            if (ni == 0) {
              for (i2 = 1, j2 = xc[0]; j2 >= 10; j2 /= 10, i2++) ;
              j2 = xc[0] += k2;
              for (k2 = 1; j2 >= 10; j2 /= 10, k2++) ;
              if (i2 != k2) {
                x2.e++;
                if (xc[0] == BASE) xc[0] = 1;
              }
              break;
            } else {
              xc[ni] += k2;
              if (xc[ni] != BASE) break;
              xc[ni--] = 0;
              k2 = 1;
            }
          }
        }
        for (i2 = xc.length; xc[--i2] === 0; xc.pop()) ;
      }
      if (x2.e > MAX_EXP) {
        x2.c = x2.e = null;
      } else if (x2.e < MIN_EXP) {
        x2.c = [x2.e = 0];
      }
    }
    return x2;
  }
  function valueOf(n2) {
    var str, e2 = n2.e;
    if (e2 === null) return n2.toString();
    str = coeffToString(n2.c);
    str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(str, e2) : toFixedPoint(str, e2, "0");
    return n2.s < 0 ? "-" + str : str;
  }
  P2.absoluteValue = P2.abs = function() {
    var x2 = new BigNumber2(this);
    if (x2.s < 0) x2.s = 1;
    return x2;
  };
  P2.comparedTo = function(y2, b2) {
    return compare(this, new BigNumber2(y2, b2));
  };
  P2.decimalPlaces = P2.dp = function(dp, rm) {
    var c2, n2, v2, x2 = this;
    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(new BigNumber2(x2), dp + x2.e + 1, rm);
    }
    if (!(c2 = x2.c)) return null;
    n2 = ((v2 = c2.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
    if (v2 = c2[v2]) for (; v2 % 10 == 0; v2 /= 10, n2--) ;
    if (n2 < 0) n2 = 0;
    return n2;
  };
  P2.dividedBy = P2.div = function(y2, b2) {
    return div(this, new BigNumber2(y2, b2), DECIMAL_PLACES, ROUNDING_MODE);
  };
  P2.dividedToIntegerBy = P2.idiv = function(y2, b2) {
    return div(this, new BigNumber2(y2, b2), 0, 1);
  };
  P2.exponentiatedBy = P2.pow = function(n2, m2) {
    var half, isModExp, i2, k2, more, nIsBig, nIsNeg, nIsOdd, y2, x2 = this;
    n2 = new BigNumber2(n2);
    if (n2.c && !n2.isInteger()) {
      throw Error(bignumberError + "Exponent not an integer: " + valueOf(n2));
    }
    if (m2 != null) m2 = new BigNumber2(m2);
    nIsBig = n2.e > 14;
    if (!x2.c || !x2.c[0] || x2.c[0] == 1 && !x2.e && x2.c.length == 1 || !n2.c || !n2.c[0]) {
      y2 = new BigNumber2(Math.pow(+valueOf(x2), nIsBig ? n2.s * (2 - isOdd(n2)) : +valueOf(n2)));
      return m2 ? y2.mod(m2) : y2;
    }
    nIsNeg = n2.s < 0;
    if (m2) {
      if (m2.c ? !m2.c[0] : !m2.s) return new BigNumber2(NaN);
      isModExp = !nIsNeg && x2.isInteger() && m2.isInteger();
      if (isModExp) x2 = x2.mod(m2);
    } else if (n2.e > 9 && (x2.e > 0 || x2.e < -1 || (x2.e == 0 ? x2.c[0] > 1 || nIsBig && x2.c[1] >= 24e7 : x2.c[0] < 8e13 || nIsBig && x2.c[0] <= 9999975e7))) {
      k2 = x2.s < 0 && isOdd(n2) ? -0 : 0;
      if (x2.e > -1) k2 = 1 / k2;
      return new BigNumber2(nIsNeg ? 1 / k2 : k2);
    } else if (POW_PRECISION) {
      k2 = mathceil(POW_PRECISION / LOG_BASE + 2);
    }
    if (nIsBig) {
      half = new BigNumber2(0.5);
      if (nIsNeg) n2.s = 1;
      nIsOdd = isOdd(n2);
    } else {
      i2 = Math.abs(+valueOf(n2));
      nIsOdd = i2 % 2;
    }
    y2 = new BigNumber2(ONE2);
    for (; ; ) {
      if (nIsOdd) {
        y2 = y2.times(x2);
        if (!y2.c) break;
        if (k2) {
          if (y2.c.length > k2) y2.c.length = k2;
        } else if (isModExp) {
          y2 = y2.mod(m2);
        }
      }
      if (i2) {
        i2 = mathfloor(i2 / 2);
        if (i2 === 0) break;
        nIsOdd = i2 % 2;
      } else {
        n2 = n2.times(half);
        round(n2, n2.e + 1, 1);
        if (n2.e > 14) {
          nIsOdd = isOdd(n2);
        } else {
          i2 = +valueOf(n2);
          if (i2 === 0) break;
          nIsOdd = i2 % 2;
        }
      }
      x2 = x2.times(x2);
      if (k2) {
        if (x2.c && x2.c.length > k2) x2.c.length = k2;
      } else if (isModExp) {
        x2 = x2.mod(m2);
      }
    }
    if (isModExp) return y2;
    if (nIsNeg) y2 = ONE2.div(y2);
    return m2 ? y2.mod(m2) : k2 ? round(y2, POW_PRECISION, ROUNDING_MODE, more) : y2;
  };
  P2.integerValue = function(rm) {
    var n2 = new BigNumber2(this);
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    return round(n2, n2.e + 1, rm);
  };
  P2.isEqualTo = P2.eq = function(y2, b2) {
    return compare(this, new BigNumber2(y2, b2)) === 0;
  };
  P2.isFinite = function() {
    return !!this.c;
  };
  P2.isGreaterThan = P2.gt = function(y2, b2) {
    return compare(this, new BigNumber2(y2, b2)) > 0;
  };
  P2.isGreaterThanOrEqualTo = P2.gte = function(y2, b2) {
    return (b2 = compare(this, new BigNumber2(y2, b2))) === 1 || b2 === 0;
  };
  P2.isInteger = function() {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };
  P2.isLessThan = P2.lt = function(y2, b2) {
    return compare(this, new BigNumber2(y2, b2)) < 0;
  };
  P2.isLessThanOrEqualTo = P2.lte = function(y2, b2) {
    return (b2 = compare(this, new BigNumber2(y2, b2))) === -1 || b2 === 0;
  };
  P2.isNaN = function() {
    return !this.s;
  };
  P2.isNegative = function() {
    return this.s < 0;
  };
  P2.isPositive = function() {
    return this.s > 0;
  };
  P2.isZero = function() {
    return !!this.c && this.c[0] == 0;
  };
  P2.minus = function(y2, b2) {
    var i2, j2, t2, xLTy, x2 = this, a2 = x2.s;
    y2 = new BigNumber2(y2, b2);
    b2 = y2.s;
    if (!a2 || !b2) return new BigNumber2(NaN);
    if (a2 != b2) {
      y2.s = -b2;
      return x2.plus(y2);
    }
    var xe2 = x2.e / LOG_BASE, ye2 = y2.e / LOG_BASE, xc = x2.c, yc = y2.c;
    if (!xe2 || !ye2) {
      if (!xc || !yc) return xc ? (y2.s = -b2, y2) : new BigNumber2(yc ? x2 : NaN);
      if (!xc[0] || !yc[0]) {
        return yc[0] ? (y2.s = -b2, y2) : new BigNumber2(xc[0] ? x2 : (
          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          ROUNDING_MODE == 3 ? -0 : 0
        ));
      }
    }
    xe2 = bitFloor(xe2);
    ye2 = bitFloor(ye2);
    xc = xc.slice();
    if (a2 = xe2 - ye2) {
      if (xLTy = a2 < 0) {
        a2 = -a2;
        t2 = xc;
      } else {
        ye2 = xe2;
        t2 = yc;
      }
      t2.reverse();
      for (b2 = a2; b2--; t2.push(0)) ;
      t2.reverse();
    } else {
      j2 = (xLTy = (a2 = xc.length) < (b2 = yc.length)) ? a2 : b2;
      for (a2 = b2 = 0; b2 < j2; b2++) {
        if (xc[b2] != yc[b2]) {
          xLTy = xc[b2] < yc[b2];
          break;
        }
      }
    }
    if (xLTy) {
      t2 = xc;
      xc = yc;
      yc = t2;
      y2.s = -y2.s;
    }
    b2 = (j2 = yc.length) - (i2 = xc.length);
    if (b2 > 0) for (; b2--; xc[i2++] = 0) ;
    b2 = BASE - 1;
    for (; j2 > a2; ) {
      if (xc[--j2] < yc[j2]) {
        for (i2 = j2; i2 && !xc[--i2]; xc[i2] = b2) ;
        --xc[i2];
        xc[j2] += BASE;
      }
      xc[j2] -= yc[j2];
    }
    for (; xc[0] == 0; xc.splice(0, 1), --ye2) ;
    if (!xc[0]) {
      y2.s = ROUNDING_MODE == 3 ? -1 : 1;
      y2.c = [y2.e = 0];
      return y2;
    }
    return normalise(y2, xc, ye2);
  };
  P2.modulo = P2.mod = function(y2, b2) {
    var q2, s2, x2 = this;
    y2 = new BigNumber2(y2, b2);
    if (!x2.c || !y2.s || y2.c && !y2.c[0]) {
      return new BigNumber2(NaN);
    } else if (!y2.c || x2.c && !x2.c[0]) {
      return new BigNumber2(x2);
    }
    if (MODULO_MODE == 9) {
      s2 = y2.s;
      y2.s = 1;
      q2 = div(x2, y2, 0, 3);
      y2.s = s2;
      q2.s *= s2;
    } else {
      q2 = div(x2, y2, 0, MODULO_MODE);
    }
    y2 = x2.minus(q2.times(y2));
    if (!y2.c[0] && MODULO_MODE == 1) y2.s = x2.s;
    return y2;
  };
  P2.multipliedBy = P2.times = function(y2, b2) {
    var c2, e2, i2, j2, k2, m2, xcL, xlo, xhi, ycL, ylo, yhi, zc, base2, sqrtBase, x2 = this, xc = x2.c, yc = (y2 = new BigNumber2(y2, b2)).c;
    if (!xc || !yc || !xc[0] || !yc[0]) {
      if (!x2.s || !y2.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y2.c = y2.e = y2.s = null;
      } else {
        y2.s *= x2.s;
        if (!xc || !yc) {
          y2.c = y2.e = null;
        } else {
          y2.c = [0];
          y2.e = 0;
        }
      }
      return y2;
    }
    e2 = bitFloor(x2.e / LOG_BASE) + bitFloor(y2.e / LOG_BASE);
    y2.s *= x2.s;
    xcL = xc.length;
    ycL = yc.length;
    if (xcL < ycL) {
      zc = xc;
      xc = yc;
      yc = zc;
      i2 = xcL;
      xcL = ycL;
      ycL = i2;
    }
    for (i2 = xcL + ycL, zc = []; i2--; zc.push(0)) ;
    base2 = BASE;
    sqrtBase = SQRT_BASE;
    for (i2 = ycL; --i2 >= 0; ) {
      c2 = 0;
      ylo = yc[i2] % sqrtBase;
      yhi = yc[i2] / sqrtBase | 0;
      for (k2 = xcL, j2 = i2 + k2; j2 > i2; ) {
        xlo = xc[--k2] % sqrtBase;
        xhi = xc[k2] / sqrtBase | 0;
        m2 = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + m2 % sqrtBase * sqrtBase + zc[j2] + c2;
        c2 = (xlo / base2 | 0) + (m2 / sqrtBase | 0) + yhi * xhi;
        zc[j2--] = xlo % base2;
      }
      zc[j2] = c2;
    }
    if (c2) {
      ++e2;
    } else {
      zc.splice(0, 1);
    }
    return normalise(y2, zc, e2);
  };
  P2.negated = function() {
    var x2 = new BigNumber2(this);
    x2.s = -x2.s || null;
    return x2;
  };
  P2.plus = function(y2, b2) {
    var t2, x2 = this, a2 = x2.s;
    y2 = new BigNumber2(y2, b2);
    b2 = y2.s;
    if (!a2 || !b2) return new BigNumber2(NaN);
    if (a2 != b2) {
      y2.s = -b2;
      return x2.minus(y2);
    }
    var xe2 = x2.e / LOG_BASE, ye2 = y2.e / LOG_BASE, xc = x2.c, yc = y2.c;
    if (!xe2 || !ye2) {
      if (!xc || !yc) return new BigNumber2(a2 / 0);
      if (!xc[0] || !yc[0]) return yc[0] ? y2 : new BigNumber2(xc[0] ? x2 : a2 * 0);
    }
    xe2 = bitFloor(xe2);
    ye2 = bitFloor(ye2);
    xc = xc.slice();
    if (a2 = xe2 - ye2) {
      if (a2 > 0) {
        ye2 = xe2;
        t2 = yc;
      } else {
        a2 = -a2;
        t2 = xc;
      }
      t2.reverse();
      for (; a2--; t2.push(0)) ;
      t2.reverse();
    }
    a2 = xc.length;
    b2 = yc.length;
    if (a2 - b2 < 0) {
      t2 = yc;
      yc = xc;
      xc = t2;
      b2 = a2;
    }
    for (a2 = 0; b2; ) {
      a2 = (xc[--b2] = xc[b2] + yc[b2] + a2) / BASE | 0;
      xc[b2] = BASE === xc[b2] ? 0 : xc[b2] % BASE;
    }
    if (a2) {
      xc = [a2].concat(xc);
      ++ye2;
    }
    return normalise(y2, xc, ye2);
  };
  P2.precision = P2.sd = function(sd, rm) {
    var c2, n2, v2, x2 = this;
    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(new BigNumber2(x2), sd, rm);
    }
    if (!(c2 = x2.c)) return null;
    v2 = c2.length - 1;
    n2 = v2 * LOG_BASE + 1;
    if (v2 = c2[v2]) {
      for (; v2 % 10 == 0; v2 /= 10, n2--) ;
      for (v2 = c2[0]; v2 >= 10; v2 /= 10, n2++) ;
    }
    if (sd && x2.e + 1 > n2) n2 = x2.e + 1;
    return n2;
  };
  P2.shiftedBy = function(k2) {
    intCheck(k2, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times("1e" + k2);
  };
  P2.squareRoot = P2.sqrt = function() {
    var m2, n2, r2, rep, t2, x2 = this, c2 = x2.c, s2 = x2.s, e2 = x2.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
    if (s2 !== 1 || !c2 || !c2[0]) {
      return new BigNumber2(!s2 || s2 < 0 && (!c2 || c2[0]) ? NaN : c2 ? x2 : 1 / 0);
    }
    s2 = Math.sqrt(+valueOf(x2));
    if (s2 == 0 || s2 == 1 / 0) {
      n2 = coeffToString(c2);
      if ((n2.length + e2) % 2 == 0) n2 += "0";
      s2 = Math.sqrt(+n2);
      e2 = bitFloor((e2 + 1) / 2) - (e2 < 0 || e2 % 2);
      if (s2 == 1 / 0) {
        n2 = "5e" + e2;
      } else {
        n2 = s2.toExponential();
        n2 = n2.slice(0, n2.indexOf("e") + 1) + e2;
      }
      r2 = new BigNumber2(n2);
    } else {
      r2 = new BigNumber2(s2 + "");
    }
    if (r2.c[0]) {
      e2 = r2.e;
      s2 = e2 + dp;
      if (s2 < 3) s2 = 0;
      for (; ; ) {
        t2 = r2;
        r2 = half.times(t2.plus(div(x2, t2, dp, 1)));
        if (coeffToString(t2.c).slice(0, s2) === (n2 = coeffToString(r2.c)).slice(0, s2)) {
          if (r2.e < e2) --s2;
          n2 = n2.slice(s2 - 3, s2 + 1);
          if (n2 == "9999" || !rep && n2 == "4999") {
            if (!rep) {
              round(t2, t2.e + DECIMAL_PLACES + 2, 0);
              if (t2.times(t2).eq(x2)) {
                r2 = t2;
                break;
              }
            }
            dp += 4;
            s2 += 4;
            rep = 1;
          } else {
            if (!+n2 || !+n2.slice(1) && n2.charAt(0) == "5") {
              round(r2, r2.e + DECIMAL_PLACES + 2, 1);
              m2 = !r2.times(r2).eq(x2);
            }
            break;
          }
        }
      }
    }
    return round(r2, r2.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m2);
  };
  P2.toExponential = function(dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };
  P2.toFixed = function(dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };
  P2.toFormat = function(dp, rm, format2) {
    var str, x2 = this;
    if (format2 == null) {
      if (dp != null && rm && typeof rm == "object") {
        format2 = rm;
        rm = null;
      } else if (dp && typeof dp == "object") {
        format2 = dp;
        dp = rm = null;
      } else {
        format2 = FORMAT2;
      }
    } else if (typeof format2 != "object") {
      throw Error(bignumberError + "Argument not an object: " + format2);
    }
    str = x2.toFixed(dp, rm);
    if (x2.c) {
      var i2, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x2.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len2 = intDigits.length;
      if (g2) {
        i2 = g1;
        g1 = g2;
        g2 = i2;
        len2 -= i2;
      }
      if (g1 > 0 && len2 > 0) {
        i2 = len2 % g1 || g1;
        intPart = intDigits.substr(0, i2);
        for (; i2 < len2; i2 += g1) intPart += groupSeparator + intDigits.substr(i2, g1);
        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i2);
        if (isNeg) intPart = "-" + intPart;
      }
      str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
        new RegExp("\\d{" + g2 + "}\\B", "g"),
        "$&" + (format2.fractionGroupSeparator || "")
      ) : fractionPart) : intPart;
    }
    return (format2.prefix || "") + str + (format2.suffix || "");
  };
  P2.toFraction = function(md) {
    var d2, d0, d1, d22, e2, exp, n2, n0, n1, q2, r2, s2, x2 = this, xc = x2.c;
    if (md != null) {
      n2 = new BigNumber2(md);
      if (!n2.isInteger() && (n2.c || n2.s !== 1) || n2.lt(ONE2)) {
        throw Error(bignumberError + "Argument " + (n2.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n2));
      }
    }
    if (!xc) return new BigNumber2(x2);
    d2 = new BigNumber2(ONE2);
    n1 = d0 = new BigNumber2(ONE2);
    d1 = n0 = new BigNumber2(ONE2);
    s2 = coeffToString(xc);
    e2 = d2.e = s2.length - x2.e - 1;
    d2.c[0] = POWS_TEN[(exp = e2 % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n2.comparedTo(d2) > 0 ? e2 > 0 ? d2 : n1 : n2;
    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n2 = new BigNumber2(s2);
    n0.c[0] = 0;
    for (; ; ) {
      q2 = div(n2, d2, 0, 1);
      d22 = d0.plus(q2.times(d1));
      if (d22.comparedTo(md) == 1) break;
      d0 = d1;
      d1 = d22;
      n1 = n0.plus(q2.times(d22 = n1));
      n0 = d22;
      d2 = n2.minus(q2.times(d22 = d2));
      n2 = d22;
    }
    d22 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d22.times(n1));
    d0 = d0.plus(d22.times(d1));
    n0.s = n1.s = x2.s;
    e2 = e2 * 2;
    r2 = div(n1, d1, e2, ROUNDING_MODE).minus(x2).abs().comparedTo(
      div(n0, d0, e2, ROUNDING_MODE).minus(x2).abs()
    ) < 1 ? [n1, d1] : [n0, d0];
    MAX_EXP = exp;
    return r2;
  };
  P2.toNumber = function() {
    return +valueOf(this);
  };
  P2.toPrecision = function(sd, rm) {
    if (sd != null) intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };
  P2.toString = function(b2) {
    var str, n2 = this, s2 = n2.s, e2 = n2.e;
    if (e2 === null) {
      if (s2) {
        str = "Infinity";
        if (s2 < 0) str = "-" + str;
      } else {
        str = "NaN";
      }
    } else {
      if (b2 == null) {
        str = e2 <= TO_EXP_NEG || e2 >= TO_EXP_POS ? toExponential(coeffToString(n2.c), e2) : toFixedPoint(coeffToString(n2.c), e2, "0");
      } else if (b2 === 10 && alphabetHasNormalDecimalDigits) {
        n2 = round(new BigNumber2(n2), DECIMAL_PLACES + e2 + 1, ROUNDING_MODE);
        str = toFixedPoint(coeffToString(n2.c), n2.e, "0");
      } else {
        intCheck(b2, 2, ALPHABET2.length, "Base");
        str = convertBase(toFixedPoint(coeffToString(n2.c), e2, "0"), 10, b2, s2, true);
      }
      if (s2 < 0 && n2.c[0]) str = "-" + str;
    }
    return str;
  };
  P2.valueOf = P2.toJSON = function() {
    return valueOf(this);
  };
  P2._isBigNumber = true;
  P2[Symbol.toStringTag] = "BigNumber";
  P2[Symbol.for("nodejs.util.inspect.custom")] = P2.valueOf;
  if (configObject != null) BigNumber2.set(configObject);
  return BigNumber2;
}
function bitFloor(n2) {
  var i2 = n2 | 0;
  return n2 > 0 || n2 === i2 ? i2 : i2 - 1;
}
function coeffToString(a2) {
  var s2, z2, i2 = 1, j2 = a2.length, r2 = a2[0] + "";
  for (; i2 < j2; ) {
    s2 = a2[i2++] + "";
    z2 = LOG_BASE - s2.length;
    for (; z2--; s2 = "0" + s2) ;
    r2 += s2;
  }
  for (j2 = r2.length; r2.charCodeAt(--j2) === 48; ) ;
  return r2.slice(0, j2 + 1 || 1);
}
function compare(x2, y2) {
  var a2, b2, xc = x2.c, yc = y2.c, i2 = x2.s, j2 = y2.s, k2 = x2.e, l2 = y2.e;
  if (!i2 || !j2) return null;
  a2 = xc && !xc[0];
  b2 = yc && !yc[0];
  if (a2 || b2) return a2 ? b2 ? 0 : -j2 : i2;
  if (i2 != j2) return i2;
  a2 = i2 < 0;
  b2 = k2 == l2;
  if (!xc || !yc) return b2 ? 0 : !xc ^ a2 ? 1 : -1;
  if (!b2) return k2 > l2 ^ a2 ? 1 : -1;
  j2 = (k2 = xc.length) < (l2 = yc.length) ? k2 : l2;
  for (i2 = 0; i2 < j2; i2++) if (xc[i2] != yc[i2]) return xc[i2] > yc[i2] ^ a2 ? 1 : -1;
  return k2 == l2 ? 0 : k2 > l2 ^ a2 ? 1 : -1;
}
function intCheck(n2, min, max, name2) {
  if (n2 < min || n2 > max || n2 !== mathfloor(n2)) {
    throw Error(bignumberError + (name2 || "Argument") + (typeof n2 == "number" ? n2 < min || n2 > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n2));
  }
}
function isOdd(n2) {
  var k2 = n2.c.length - 1;
  return bitFloor(n2.e / LOG_BASE) == k2 && n2.c[k2] % 2 != 0;
}
function toExponential(str, e2) {
  return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e2 < 0 ? "e" : "e+") + e2;
}
function toFixedPoint(str, e2, z2) {
  var len2, zs;
  if (e2 < 0) {
    for (zs = z2 + "."; ++e2; zs += z2) ;
    str = zs + str;
  } else {
    len2 = str.length;
    if (++e2 > len2) {
      for (zs = z2, e2 -= len2; --e2; zs += z2) ;
      str += zs;
    } else if (e2 < len2) {
      str = str.slice(0, e2) + "." + str.slice(e2);
    }
  }
  return str;
}
var BigNumber = clone();
class BaseDatasource {
  constructor({ network }) {
    __publicField(this, "network");
    this.network = network;
  }
}
class DatasourceUtility {
  /**
   * Parses an inscription.
   *
   * @param inscription Inscription
   * @param options Options
   * - `decodeMetadata` decodes the metadata object into [valid URI components](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent).
   * @returns Parsed inscription
   */
  static parseInscription(inscription, { decodeMetadata }) {
    return {
      ...inscription,
      meta: decodeMetadata && inscription.meta ? UNSTABLE_decodeObject(inscription.meta) : inscription.meta
    };
  }
  /**
   * Parses inscriptions.
   *
   * @param inscriptions Inscriptions
   * @param options Options
   * - `decodeMetadata` decodes the metadata object into [valid URI components](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent).
   * @returns Parsed inscriptions
   */
  static parseInscriptions(inscriptions, { decodeMetadata }) {
    return inscriptions.map(
      (inscription) => this.parseInscription(inscription, { decodeMetadata })
    );
  }
  static segregateUTXOsBySpendStatus({
    utxos
  }) {
    const { spendableUTXOs, unspendableUTXOs } = utxos.reduce(
      (acc, utxo) => {
        if (utxo.safeToSpend) {
          acc.spendableUTXOs.push(utxo);
        } else {
          acc.unspendableUTXOs.push(utxo);
        }
        return acc;
      },
      {
        spendableUTXOs: [],
        unspendableUTXOs: []
      }
    );
    return {
      totalUTXOs: utxos.length,
      spendableUTXOs,
      unspendableUTXOs
    };
  }
}
var browserPonyfill = { exports: {} };
(function(module, exports2) {
  var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof commonjsGlobal !== "undefined" && commonjsGlobal;
  var __globalThis__ = function() {
    function F2() {
      this.fetch = false;
      this.DOMException = __global__.DOMException;
    }
    F2.prototype = __global__;
    return new F2();
  }();
  (function(globalThis2) {
    (function(exports3) {
      var global2 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || typeof global2 !== "undefined" && global2;
      var support = {
        searchParams: "URLSearchParams" in global2,
        iterable: "Symbol" in global2 && "iterator" in Symbol,
        blob: "FileReader" in global2 && "Blob" in global2 && function() {
          try {
            new Blob();
            return true;
          } catch (e2) {
            return false;
          }
        }(),
        formData: "FormData" in global2,
        arrayBuffer: "ArrayBuffer" in global2
      };
      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj);
      }
      if (support.arrayBuffer) {
        var viewClasses = [
          "[object Int8Array]",
          "[object Uint8Array]",
          "[object Uint8ClampedArray]",
          "[object Int16Array]",
          "[object Uint16Array]",
          "[object Int32Array]",
          "[object Uint32Array]",
          "[object Float32Array]",
          "[object Float64Array]"
        ];
        var isArrayBufferView = ArrayBuffer.isView || function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
        };
      }
      function normalizeName(name2) {
        if (typeof name2 !== "string") {
          name2 = String(name2);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
          throw new TypeError('Invalid character in header field name: "' + name2 + '"');
        }
        return name2.toLowerCase();
      }
      function normalizeValue(value3) {
        if (typeof value3 !== "string") {
          value3 = String(value3);
        }
        return value3;
      }
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value3 = items.shift();
            return { done: value3 === void 0, value: value3 };
          }
        };
        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator;
          };
        }
        return iterator;
      }
      function Headers(headers) {
        this.map = {};
        if (headers instanceof Headers) {
          headers.forEach(function(value3, name2) {
            this.append(name2, value3);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name2) {
            this.append(name2, headers[name2]);
          }, this);
        }
      }
      Headers.prototype.append = function(name2, value3) {
        name2 = normalizeName(name2);
        value3 = normalizeValue(value3);
        var oldValue = this.map[name2];
        this.map[name2] = oldValue ? oldValue + ", " + value3 : value3;
      };
      Headers.prototype["delete"] = function(name2) {
        delete this.map[normalizeName(name2)];
      };
      Headers.prototype.get = function(name2) {
        name2 = normalizeName(name2);
        return this.has(name2) ? this.map[name2] : null;
      };
      Headers.prototype.has = function(name2) {
        return this.map.hasOwnProperty(normalizeName(name2));
      };
      Headers.prototype.set = function(name2, value3) {
        this.map[normalizeName(name2)] = normalizeValue(value3);
      };
      Headers.prototype.forEach = function(callback, thisArg) {
        for (var name2 in this.map) {
          if (this.map.hasOwnProperty(name2)) {
            callback.call(thisArg, this.map[name2], name2, this);
          }
        }
      };
      Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value3, name2) {
          items.push(name2);
        });
        return iteratorFor(items);
      };
      Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value3) {
          items.push(value3);
        });
        return iteratorFor(items);
      };
      Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value3, name2) {
          items.push([name2, value3]);
        });
        return iteratorFor(items);
      };
      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }
      function consumed(body) {
        if (body.bodyUsed) {
          return Promise.reject(new TypeError("Already read"));
        }
        body.bodyUsed = true;
      }
      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        });
      }
      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise;
      }
      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsText(blob);
        return promise;
      }
      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);
        for (var i2 = 0; i2 < view.length; i2++) {
          chars[i2] = String.fromCharCode(view[i2]);
        }
        return chars.join("");
      }
      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0);
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer;
        }
      }
      function Body() {
        this.bodyUsed = false;
        this._initBody = function(body) {
          this.bodyUsed = this.bodyUsed;
          this._bodyInit = body;
          if (!body) {
            this._bodyText = "";
          } else if (typeof body === "string") {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }
          if (!this.headers.get("content-type")) {
            if (typeof body === "string") {
              this.headers.set("content-type", "text/plain;charset=UTF-8");
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set("content-type", this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
            }
          }
        };
        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as blob");
            } else {
              return Promise.resolve(new Blob([this._bodyText]));
            }
          };
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              }
              if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else {
              return this.blob().then(readBlobAsArrayBuffer);
            }
          };
        }
        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected;
          }
          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
          } else if (this._bodyFormData) {
            throw new Error("could not read FormData body as text");
          } else {
            return Promise.resolve(this._bodyText);
          }
        };
        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode2);
          };
        }
        this.json = function() {
          return this.text().then(JSON.parse);
        };
        return this;
      }
      var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method;
      }
      function Request(input, options) {
        if (!(this instanceof Request)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        options = options || {};
        var body = options.body;
        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError("Already read");
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }
        this.credentials = options.credentials || this.credentials || "same-origin";
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || "GET");
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal;
        this.referrer = null;
        if ((this.method === "GET" || this.method === "HEAD") && body) {
          throw new TypeError("Body not allowed for GET or HEAD requests");
        }
        this._initBody(body);
        if (this.method === "GET" || this.method === "HEAD") {
          if (options.cache === "no-store" || options.cache === "no-cache") {
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) {
              this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
            } else {
              var reQueryString = /\?/;
              this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
            }
          }
        }
      }
      Request.prototype.clone = function() {
        return new Request(this, { body: this._bodyInit });
      };
      function decode2(body) {
        var form = new FormData();
        body.trim().split("&").forEach(function(bytes2) {
          if (bytes2) {
            var split2 = bytes2.split("=");
            var name2 = split2.shift().replace(/\+/g, " ");
            var value3 = split2.join("=").replace(/\+/g, " ");
            form.append(decodeURIComponent(name2), decodeURIComponent(value3));
          }
        });
        return form;
      }
      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
        preProcessedHeaders.split("\r").map(function(header) {
          return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
        }).forEach(function(line) {
          var parts = line.split(":");
          var key2 = parts.shift().trim();
          if (key2) {
            var value3 = parts.join(":").trim();
            headers.append(key2, value3);
          }
        });
        return headers;
      }
      Body.call(Request.prototype);
      function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
        }
        if (!options) {
          options = {};
        }
        this.type = "default";
        this.status = options.status === void 0 ? 200 : options.status;
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || "";
        this._initBody(bodyInit);
      }
      Body.call(Response.prototype);
      Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        });
      };
      Response.error = function() {
        var response = new Response(null, { status: 0, statusText: "" });
        response.type = "error";
        return response;
      };
      var redirectStatuses = [301, 302, 303, 307, 308];
      Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError("Invalid status code");
        }
        return new Response(null, { status, headers: { location: url } });
      };
      exports3.DOMException = global2.DOMException;
      try {
        new exports3.DOMException();
      } catch (err) {
        exports3.DOMException = function(message, name2) {
          this.message = message;
          this.name = name2;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports3.DOMException.prototype = Object.create(Error.prototype);
        exports3.DOMException.prototype.constructor = exports3.DOMException;
      }
      function fetch2(input, init) {
        return new Promise(function(resolve, reject) {
          var request = new Request(input, init);
          if (request.signal && request.signal.aborted) {
            return reject(new exports3.DOMException("Aborted", "AbortError"));
          }
          var xhr = new XMLHttpRequest();
          function abortXhr() {
            xhr.abort();
          }
          xhr.onload = function() {
            var options = {
              status: xhr.status,
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || "")
            };
            options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
            var body = "response" in xhr ? xhr.response : xhr.responseText;
            setTimeout(function() {
              resolve(new Response(body, options));
            }, 0);
          };
          xhr.onerror = function() {
            setTimeout(function() {
              reject(new TypeError("Network request failed"));
            }, 0);
          };
          xhr.ontimeout = function() {
            setTimeout(function() {
              reject(new TypeError("Network request failed"));
            }, 0);
          };
          xhr.onabort = function() {
            setTimeout(function() {
              reject(new exports3.DOMException("Aborted", "AbortError"));
            }, 0);
          };
          function fixUrl(url) {
            try {
              return url === "" && global2.location.href ? global2.location.href : url;
            } catch (e2) {
              return url;
            }
          }
          xhr.open(request.method, fixUrl(request.url), true);
          if (request.credentials === "include") {
            xhr.withCredentials = true;
          } else if (request.credentials === "omit") {
            xhr.withCredentials = false;
          }
          if ("responseType" in xhr) {
            if (support.blob) {
              xhr.responseType = "blob";
            } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
              xhr.responseType = "arraybuffer";
            }
          }
          if (init && typeof init.headers === "object" && !(init.headers instanceof Headers)) {
            Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
              xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
            });
          } else {
            request.headers.forEach(function(value3, name2) {
              xhr.setRequestHeader(name2, value3);
            });
          }
          if (request.signal) {
            request.signal.addEventListener("abort", abortXhr);
            xhr.onreadystatechange = function() {
              if (xhr.readyState === 4) {
                request.signal.removeEventListener("abort", abortXhr);
              }
            };
          }
          xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
        });
      }
      fetch2.polyfill = true;
      if (!global2.fetch) {
        global2.fetch = fetch2;
        global2.Headers = Headers;
        global2.Request = Request;
        global2.Response = Response;
      }
      exports3.Headers = Headers;
      exports3.Request = Request;
      exports3.Response = Response;
      exports3.fetch = fetch2;
      return exports3;
    })({});
  })(__globalThis__);
  __globalThis__.fetch.ponyfill = true;
  delete __globalThis__.fetch.polyfill;
  var ctx = __global__.fetch ? __global__ : __globalThis__;
  exports2 = ctx.fetch;
  exports2.default = ctx.fetch;
  exports2.fetch = ctx.fetch;
  exports2.Headers = ctx.Headers;
  exports2.Request = ctx.Request;
  exports2.Response = ctx.Response;
  module.exports = exports2;
})(browserPonyfill, browserPonyfill.exports);
var browserPonyfillExports = browserPonyfill.exports;
const fetch = /* @__PURE__ */ getDefaultExportFromCjs(browserPonyfillExports);
const API_CONFIG = {
  version: "0.0.0.10",
  apis: {
    mainnet: {
      batter: "https://mainnet.ordit.io/"
    },
    regtest: {
      batter: "https://regtest.ordit.io/"
    },
    testnet: {
      batter: "https://testnet.ordit.io/"
    },
    signet: {
      batter: "https://signet.ordit.io/"
    }
  }
};
function isNumber(value3) {
  return typeof value3 === "number" && value3 > Number.NEGATIVE_INFINITY && value3 < Number.POSITIVE_INFINITY;
}
function isInteger(value3) {
  return isNumber(value3) && value3 % 1 === 0;
}
function isString(value3) {
  return typeof value3 === "string";
}
function isJsonRpcId(value3) {
  return isString(value3) || isInteger(value3) || value3 === null;
}
function getRpcUrl(value3) {
  if (value3[value3.length - 1] === "/") {
    return value3.substring(0, value3.length - 1);
  }
  return value3;
}
class JsonRpc {
  constructor(url) {
    this.url = url;
  }
  /**
   * Send a JSON-RPC 2.0 notification to the connected Sado compliant server.
   *
   * @param method - Method to call.
   * @param params - JSON-RPC 2.0 parameters.
   */
  async notify(method, params) {
    await fetch(`${this.url}/rpc`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        jsonrpc: "2.0",
        method,
        params
      })
    });
  }
  async call(method, paramsOrId, id) {
    let params = {};
    let rpcId = id;
    if (isJsonRpcId(paramsOrId)) {
      rpcId = paramsOrId;
    } else {
      params = paramsOrId;
    }
    const response = await fetch(`${this.url}/rpc`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        jsonrpc: "2.0",
        method,
        params,
        id: rpcId
      })
    });
    if (response.status === 200) {
      const json = await response.json();
      if (json.error) {
        const error = typeof json.error.data === "string" ? json.error.data : json.error.message;
        throw new OrditSDKError(error);
      }
      return json.result;
    }
    throw new OrditSDKError(`Internal Server Error`);
  }
}
const rpc = {
  get id() {
    return Math.floor(Math.random() * 1e5);
  },
  mainnet: new JsonRpc(getRpcUrl(API_CONFIG.apis.mainnet.batter)),
  testnet: new JsonRpc(getRpcUrl(API_CONFIG.apis.testnet.batter)),
  signet: new JsonRpc(getRpcUrl(API_CONFIG.apis.signet.batter)),
  regtest: new JsonRpc(getRpcUrl(API_CONFIG.apis.regtest.batter))
};
class JsonRpcDatasource extends BaseDatasource {
  constructor({ network }) {
    super({ network });
  }
  async getBalance({ address: address2 }) {
    if (!address2) {
      throw new OrditSDKError("Invalid request");
    }
    return rpc[this.network].call(
      "Address.GetBalance",
      { address: address2 },
      rpc.id
    );
  }
  async getInscription({
    id: _id,
    decodeMetadata = false
  }) {
    if (!_id) {
      throw new OrditSDKError("Invalid request");
    }
    const id = outpointToIdFormat(_id);
    const inscription = await rpc[this.network].call(
      "Ordinals.GetInscription",
      { id },
      rpc.id
    );
    return DatasourceUtility.parseInscription(inscription, { decodeMetadata });
  }
  async getInscriptionUTXO({ id: _id }) {
    if (!_id) {
      throw new OrditSDKError("Invalid request");
    }
    const id = outpointToIdFormat(_id);
    return rpc[this.network].call(
      "Ordinals.GetInscriptionUtxo",
      { id },
      rpc.id
    );
  }
  async getInscriptions({
    creator,
    owner,
    mimeType,
    mimeSubType,
    outpoint,
    decodeMetadata = false,
    sort = "asc",
    limit = 25,
    next: _next = null
  }) {
    let inscriptions = [];
    let next = _next;
    do {
      const { inscriptions: _inscriptions, pagination } = await rpc[this.network].call(
        "Ordinals.GetInscriptions",
        {
          filter: { creator, owner, mimeType, mimeSubType, outpoint },
          sort: { number: sort },
          pagination: { limit, next }
        },
        rpc.id
      );
      inscriptions = inscriptions.concat(_inscriptions);
      next = pagination.next;
    } while (next !== null);
    return DatasourceUtility.parseInscriptions(inscriptions, {
      decodeMetadata
    });
  }
  async getSpendables({
    address: address2,
    value: value3,
    rarity = ["common"],
    filter = [],
    limit = 200,
    type: type2 = "spendable"
  }) {
    if (!address2 || Number.isNaN(value3) || !value3) {
      throw new OrditSDKError("Invalid request");
    }
    return rpc[this.network].call(
      "Address.GetSpendables",
      {
        address: address2,
        value: value3,
        safetospend: type2 === "spendable",
        allowedrarity: rarity,
        filter,
        limit
      },
      rpc.id
    );
  }
  async getTransaction({
    txId,
    ordinals = true,
    hex = false,
    witness = true,
    decodeMetadata = true
  }) {
    if (!txId) {
      throw new OrditSDKError("Invalid request");
    }
    const tx = await rpc[this.network].call(
      "Transactions.GetTransaction",
      {
        txid: txId,
        options: {
          ord: ordinals,
          hex,
          witness
        }
      },
      rpc.id
    );
    tx.vout = tx.vout.map((vout) => ({
      ...vout,
      inscriptions: DatasourceUtility.parseInscriptions(vout.inscriptions, {
        decodeMetadata
      })
    }));
    return {
      tx,
      rawTx: hex && tx.hex ? src$4.Transaction.fromHex(tx.hex) : void 0
    };
  }
  async getUnspents({
    address: address2,
    type: type2 = "spendable",
    rarity = ["common"],
    sort = "desc",
    limit = 50,
    next: _next = null
  }) {
    if (!address2) {
      throw new OrditSDKError("Invalid request");
    }
    let utxos = [];
    let next = _next;
    do {
      const { unspents, pagination } = await rpc[this.network].call(
        "Address.GetUnspents",
        {
          address: address2,
          options: {
            allowedrarity: rarity,
            safetospend: type2 === "spendable"
          },
          pagination: {
            limit,
            next
          },
          sort: { value: sort }
        },
        rpc.id
      );
      utxos = utxos.concat(unspents);
      next = pagination.next;
    } while (next !== null);
    return DatasourceUtility.segregateUTXOsBySpendStatus({ utxos });
  }
  async relay({ hex, maxFeeRate, validate = true }) {
    if (!hex) {
      throw new OrditSDKError("Invalid request");
    }
    if (maxFeeRate && (maxFeeRate < 0 || Number.isNaN(maxFeeRate))) {
      throw new OrditSDKError("Invalid max fee rate");
    }
    return rpc[this.network].call(
      "Transactions.Relay",
      { hex, maxFeeRate, validate },
      rpc.id
    );
  }
}
function useBalance() {
  const { network, publicKey, format } = useWallie();
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const getBalance = useCallback(async () => {
    setLoading(true);
    try {
      setError(null);
      if (!format || !format.payments || !publicKey || !publicKey.payments) {
        throw new Error("No wallet is connected");
      }
      const { address: address2 } = getAddressesFromPublicKey(
        publicKey.payments,
        network,
        ADDRESS_FORMAT_TO_TYPE[format.payments]
      )[0];
      const datasource = new JsonRpcDatasource({ network });
      const totalBalance = await datasource.getBalance({ address: address2 });
      const totalAmountInSats = Number(
        new BigNumber(totalBalance).multipliedBy(1e8).toFixed(0, BigNumber.ROUND_HALF_DOWN)
      );
      setLoading(false);
      return totalAmountInSats;
    } catch (err) {
      setError(err.message);
      setLoading(false);
      throw err;
    }
  }, [format, network, publicKey]);
  return { getBalance, error, loading };
}
function isInstalled() {
  if (typeof window === "undefined") {
    throw new OrditSDKError("Cannot call this function outside a browser");
  }
  return typeof window.okxwallet !== "undefined";
}
function getOKXWalletProvider(network = "mainnet") {
  if (!isInstalled()) {
    throw new BrowserWalletNotInstalledError("OKX Wallet not installed");
  }
  let provider;
  switch (network) {
    case "mainnet":
      provider = window.okxwallet.bitcoin;
      break;
    case "testnet":
      provider = window.okxwallet.bitcoinTestnet;
      break;
    case "signet":
      provider = window.okxwallet.bitcoinSignet;
      break;
    default:
      throw new OrditSDKError("Invalid network");
  }
  if (!provider) {
    throw new OrditSDKError("Failed to get OKX Wallet provider");
  }
  return provider;
}
async function signPsbt$1(psbt2, {
  finalize = true,
  extractTx = true,
  network,
  inputsToSign
} = { network: "mainnet", inputsToSign: [] }) {
  if (!isInstalled()) {
    throw new BrowserWalletNotInstalledError("OKX Wallet not installed");
  }
  if (extractTx && !finalize) {
    throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
  }
  const provider = getOKXWalletProvider(network);
  const psbtHex = psbt2.toHex();
  let signedPsbtHex = "";
  const toSignInputs = [];
  inputsToSign.forEach((input) => {
    const { address: address2, signingIndexes, sigHash } = input;
    signingIndexes.forEach((index) => {
      toSignInputs.push({
        index,
        address: address2,
        sighashTypes: sigHash ? [sigHash] : void 0
      });
    });
  });
  try {
    signedPsbtHex = await provider.signPsbt(psbtHex, {
      autoFinalized: finalize,
      toSignInputs
    });
  } catch (err) {
    const okxError = err;
    if (okxError.code === 4001) {
      throw new BrowserWalletRequestCancelledByUserError();
    }
    throw new OrditSDKError(okxError.message);
  }
  if (!signedPsbtHex) {
    throw new BrowserWalletSigningError(
      "Failed to sign psbt hex using OKX Wallet"
    );
  }
  const signedPsbt = src$4.Psbt.fromHex(signedPsbtHex);
  if (extractTx) {
    try {
      return {
        base64: null,
        hex: signedPsbt.extractTransaction().toHex()
      };
    } catch (error) {
      if (error instanceof Error && error.message === "Not finalized") {
        throw new BrowserWalletExtractTxFromNonFinalizedPsbtError();
      } else {
        throw new OrditSDKError("Failed to extract transaction from PSBT");
      }
    }
  } else {
    return {
      base64: signedPsbt.toBase64(),
      hex: signedPsbt.toHex()
    };
  }
}
async function signMessage$1(message, type2 = "ecdsa", network = "mainnet") {
  if (!isInstalled()) {
    throw new BrowserWalletNotInstalledError("OKX Wallet not installed");
  }
  const provider = getOKXWalletProvider(network);
  let signature2 = "";
  try {
    signature2 = await provider.signMessage(message, type2);
  } catch (err) {
    const okxError = err;
    if (okxError.code === 4001) {
      throw new BrowserWalletRequestCancelledByUserError();
    }
    throw new OrditSDKError(okxError.message);
  }
  if (!signature2) {
    throw new BrowserWalletSigningError(
      "Failed to sign message using OKX Wallet"
    );
  }
  return {
    base64: signature2,
    hex: Buffer$3.from(signature2, "base64").toString("hex")
  };
}
async function signPsbt({
  address: address2,
  wallet,
  network,
  psbt: psbt2,
  options
}) {
  var _a, _b;
  if (((_a = options == null ? void 0 : options.signingIndexes) == null ? void 0 : _a.length) && ((_b = options == null ? void 0 : options.inputsToSign) == null ? void 0 : _b.length)) {
    throw new Error("Cannot have both indexes and inputs to sign together");
  }
  const finalize = (options == null ? void 0 : options.finalize) ?? true;
  const extractTx = (options == null ? void 0 : options.extractTx) ?? true;
  const getAllInputIndices = () => psbt2.data.inputs.map((value3, index) => index);
  if (wallet === Wallet.MAGICEDEN) {
    const signedMagicEdenPsbt = await signPsbt$4(psbt2, {
      network,
      inputsToSign: (options == null ? void 0 : options.inputsToSign) ?? [
        {
          address: address2,
          signingIndexes: (options == null ? void 0 : options.signingIndexes) ?? getAllInputIndices(),
          sigHash: options == null ? void 0 : options.sigHash
        }
      ],
      finalize,
      extractTx
    });
    return signedMagicEdenPsbt;
  }
  if (wallet === Wallet.UNISAT) {
    const signedUnisatPsbt = await signPsbt$3(psbt2, {
      finalize,
      extractTx
    });
    return signedUnisatPsbt;
  }
  if (wallet === Wallet.XVERSE) {
    const signedXversePsbt = await signPsbt$2(psbt2, {
      network,
      inputsToSign: (options == null ? void 0 : options.inputsToSign) ?? [
        {
          address: address2,
          signingIndexes: (options == null ? void 0 : options.signingIndexes) ?? getAllInputIndices(),
          // If signingIndexes is not provided, just sign everything
          sigHash: options == null ? void 0 : options.sigHash
        }
      ],
      finalize,
      extractTx
    });
    return signedXversePsbt;
  }
  if (wallet === Wallet.LEATHER) {
    const signedLeatherPsbt = await signPsbt$5(psbt2, {
      network,
      finalize,
      extractTx,
      allowedSighash: (options == null ? void 0 : options.sigHash) ? [options == null ? void 0 : options.sigHash] : [],
      signAtIndexes: (options == null ? void 0 : options.signingIndexes) ?? getAllInputIndices()
      // If signingIndexes is not provided, just sign everything
    });
    return signedLeatherPsbt;
  }
  if (wallet === Wallet.OKX) {
    const signedOKXPsbt = await signPsbt$1(psbt2, {
      finalize,
      extractTx,
      network,
      inputsToSign: (options == null ? void 0 : options.inputsToSign) ?? [
        {
          address: address2,
          signingIndexes: (options == null ? void 0 : options.signingIndexes) ?? getAllInputIndices(),
          // If signingIndexes is not provided, just sign everything
          sigHash: options == null ? void 0 : options.sigHash
        }
      ]
    });
    return signedOKXPsbt;
  }
  throw new Error("Invalid wallet selected");
}
var bufferReverse = function reverse(src2) {
  var buffer2 = new Buffer$3(src2.length);
  for (var i2 = 0, j2 = src2.length - 1; i2 <= j2; ++i2, --j2) {
    buffer2[i2] = src2[j2];
    buffer2[j2] = src2[i2];
  }
  return buffer2;
};
const reverseBuffer = /* @__PURE__ */ getDefaultExportFromCjs(bufferReverse);
const TRANSACTION_HEADER_SIZE = 10.5;
function getBaseSizeByType(type2) {
  switch (type2) {
    case "taproot":
      return { input: 42, output: 43, witness: 66 };
    case "segwit":
      return { input: 41, output: 31, witness: 105 };
    case "p2sh-p2wpkh":
      return { input: 64, output: 32, witness: 105 };
    case "legacy":
      return { input: 148, output: 34, witness: 0 };
    default:
      throw new OrditSDKError("Invalid type");
  }
}
class FeeEstimator {
  constructor({ feeRate, network, psbt: psbt2, witness }) {
    /**
     * Fee in satoshis
     */
    __publicField(this, "fee", 0);
    /**
     * Fee rate in satoshis
     */
    __publicField(this, "feeRate");
    __publicField(this, "network");
    __publicField(this, "psbt");
    __publicField(this, "witness", []);
    __publicField(this, "virtualSize", 0);
    __publicField(this, "weight", 0);
    if (feeRate < 0 || !Number.isSafeInteger(feeRate)) {
      throw new OrditSDKError("Invalid feeRate");
    }
    this.feeRate = feeRate;
    this.network = network;
    this.witness = witness || [];
    this.psbt = psbt2 || new src$4.Psbt({ network: getNetwork(this.network) });
  }
  get data() {
    return {
      fee: this.fee,
      virtualSize: this.virtualSize,
      weight: this.weight
    };
  }
  /**
   * Calculates network fee based on virtual size of transaction and fee rate.
   *
   * @returns Estimated network fee
   * @throws {OrditSDKError} Fee is above MAXIMUM_FEE (5,000,000 satoshis)
   */
  calculateNetworkFee() {
    this.fee = this.calculateVirtualSize() * this.feeRate;
    if (this.fee > MAXIMUM_FEE) {
      throw new OrditSDKError("Error while calculating fees");
    }
    return this.fee;
  }
  getInputAndOutputScriptTypes() {
    const { inputs: inputs2 } = this.psbt.data;
    const outputs2 = this.psbt.txOutputs;
    if (inputs2.length === 0) {
      throw new OrditSDKError("PSBT must have at least one input");
    }
    if (outputs2.length === 0) {
      throw new OrditSDKError("PSBT must have at least one output");
    }
    return {
      inputTypes: inputs2.map((input) => {
        const script2 = input.witnessUtxo && input.witnessUtxo.script ? input.witnessUtxo.script : null;
        if (!script2) {
          throw new OrditSDKError("Invalid script");
        }
        return getScriptType(script2, this.network).format;
      }),
      outputTypes: outputs2.map(
        (output2) => getScriptType(output2.script, this.network).format
      )
    };
  }
  calculateScriptWitnessSize() {
    var _a;
    const { inputTypes } = this.getInputAndOutputScriptTypes();
    if (inputTypes.includes("taproot") && ((_a = this.witness) == null ? void 0 : _a.length)) {
      return this.witness.reduce((acc, witness) => acc + witness.byteLength, 0);
    }
    return 0;
  }
  getBaseSize() {
    var _a, _b;
    const { inputTypes, outputTypes } = this.getInputAndOutputScriptTypes();
    const witnessHeaderSize = 2;
    const inputVBytes = inputTypes.reduce(
      (acc, inputType) => {
        const { input, witness } = getBaseSizeByType(inputType);
        acc.input += input;
        acc.witness += witness;
        return acc;
      },
      {
        input: 0,
        witness: 0
      }
    );
    const outputVBytes = outputTypes.reduce((acc, outputType) => {
      const { output: output2 } = getBaseSizeByType(outputType);
      return acc + output2;
    }, 0);
    const witnessSize = inputVBytes.witness + (((_a = this.witness) == null ? void 0 : _a.length) ? this.calculateScriptWitnessSize() : 0);
    let totalWitnessSize = 0;
    if ((_b = this.witness) == null ? void 0 : _b.length) {
      totalWitnessSize = witnessSize;
    } else if (witnessSize > 0) {
      totalWitnessSize = witnessHeaderSize + witnessSize;
    }
    return {
      baseSize: inputVBytes.input + TRANSACTION_HEADER_SIZE + outputVBytes,
      witnessSize: totalWitnessSize
    };
  }
  calculateVirtualSize() {
    const { baseSize, witnessSize } = this.getBaseSize();
    this.weight = baseSize * 3 + (baseSize + witnessSize);
    this.virtualSize = Math.ceil(this.weight / 4);
    return this.virtualSize;
  }
}
function generateTaprootInput({
  utxo,
  pubKey,
  network,
  sighashType: sighashType2,
  witness
}) {
  const key2 = BIP32.fromPublicKey(
    Buffer$3.from(pubKey, "hex"),
    CHAIN_CODE,
    getNetwork(network)
  );
  const xOnlyPubKey = toXOnly(key2.publicKey);
  if (!utxo.scriptPubKey.hex) {
    throw new Error("Unable to process p2tr input");
  }
  return {
    type: "taproot",
    hash: utxo.txid,
    index: utxo.n,
    tapInternalKey: xOnlyPubKey,
    witnessUtxo: {
      script: Buffer$3.from(utxo.scriptPubKey.hex, "hex"),
      value: utxo.sats
    },
    witness,
    ...sighashType2 ? { sighashType: sighashType2 } : void 0
  };
}
function generateSegwitInput({
  utxo,
  sighashType: sighashType2
}) {
  if (!utxo.scriptPubKey.hex) {
    throw new Error("Unable to process Segwit input");
  }
  return {
    type: "segwit",
    hash: utxo.txid,
    index: utxo.n,
    witnessUtxo: {
      script: Buffer$3.from(utxo.scriptPubKey.hex, "hex"),
      value: utxo.sats
    },
    ...sighashType2 ? { sighashType: sighashType2 } : void 0
  };
}
function generateP2SHP2WPKHInput({
  utxo,
  pubKey,
  network,
  sighashType: sighashType2
}) {
  const p2sh2 = createPayment(Buffer$3.from(pubKey, "hex"), "p2sh", network);
  if (!p2sh2 || !p2sh2.output || !p2sh2.redeem) {
    throw new Error("Unable to process P2SH input");
  }
  return {
    type: "p2sh-p2wpkh",
    hash: utxo.txid,
    index: utxo.n,
    redeemScript: p2sh2.redeem.output,
    witnessUtxo: {
      script: Buffer$3.from(utxo.scriptPubKey.hex, "hex"),
      value: utxo.sats
    },
    ...sighashType2 ? { sighashType: sighashType2 } : void 0
  };
}
async function generateLegacyInput({
  utxo,
  sighashType: sighashType2,
  network,
  pubKey,
  datasource
}) {
  const { rawTx } = await datasource.getTransaction({
    txId: utxo.txid,
    hex: true
  });
  if (!rawTx) {
    throw new Error("Unable to process legacy input");
  }
  const p2pkh2 = createPayment(Buffer$3.from(pubKey, "hex"), "p2pkh", network);
  return {
    type: "legacy",
    hash: utxo.txid,
    index: utxo.n,
    nonWitnessUtxo: rawTx == null ? void 0 : rawTx.toBuffer(),
    witnessUtxo: {
      script: p2pkh2.output,
      value: utxo.sats
    },
    ...sighashType2 ? { sighashType: sighashType2 } : void 0
  };
}
async function processInput({
  utxo,
  pubKey,
  network,
  sighashType: sighashType2,
  witness,
  datasource: _datasource
}) {
  const datasource = _datasource || new JsonRpcDatasource({ network });
  switch (utxo.scriptPubKey.type) {
    case "witness_v1_taproot":
      return generateTaprootInput({
        utxo,
        pubKey,
        network,
        sighashType: sighashType2,
        witness
      });
    case "witness_v0_scripthash":
    case "witness_v0_keyhash":
      return generateSegwitInput({ utxo, sighashType: sighashType2 });
    case "scripthash":
      return generateP2SHP2WPKHInput({ utxo, pubKey, network, sighashType: sighashType2 });
    case "pubkeyhash":
      return generateLegacyInput({
        utxo,
        sighashType: sighashType2,
        network,
        pubKey,
        datasource
      });
    default:
      throw new Error("invalid script pub type");
  }
}
class PSBTBuilder extends FeeEstimator {
  constructor({
    address: address2,
    changeAddress,
    datasource,
    feeRate,
    network = "mainnet",
    publicKey,
    outputs: outputs2,
    autoAdjustment = true,
    instantTradeMode = false
  }) {
    super({
      feeRate,
      network
    });
    __publicField(this, "address");
    __publicField(this, "changeAddress");
    /**
     * Change amount in satoshis
     */
    __publicField(this, "changeAmount", 0);
    __publicField(this, "datasource");
    __publicField(this, "injectableInputs", []);
    __publicField(this, "injectableOutputs", []);
    /**
     * Input amount in satoshis
     */
    __publicField(this, "inputAmount", 0);
    __publicField(this, "inputs", []);
    /**
     * Output amount in satoshis
     */
    __publicField(this, "outputAmount", 0);
    __publicField(this, "outputs", []);
    __publicField(this, "psbt");
    __publicField(this, "publicKey");
    /**
     * Replace-by-fee (RBF) is a feature that allows users to replace one version of an unconfirmed transaction
     * with a different version of the transaction that pays a higher transaction fee.
     * This can be done multiple times while the transaction is unconfirmed.
     *
     * Reference: [BIP-125](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki)
     */
    __publicField(this, "rbf", true);
    __publicField(this, "utxos", []);
    __publicField(this, "usedUTXOs", []);
    /**
     * Enable auto adjustment.
     *
     * When `true`, change is calculated and UTXOs will be added as required to account for network fees.
     *
     * Otherwise, change is not calculated and no UTXOs will be added.
     */
    __publicField(this, "autoAdjustment");
    __publicField(this, "instantTradeMode");
    __publicField(this, "noMoreUTXOS", false);
    this.address = address2;
    this.changeAddress = changeAddress;
    this.datasource = datasource || new JsonRpcDatasource({ network: this.network });
    this.outputs = outputs2;
    this.publicKey = publicKey;
    this.autoAdjustment = autoAdjustment;
    this.instantTradeMode = instantTradeMode;
    this.psbt = new src$4.Psbt({ network: getNetwork(network) });
  }
  get data() {
    return {
      fee: this.fee,
      virtualSize: this.virtualSize,
      weight: this.weight,
      changeAmount: this.changeAmount,
      inputAmount: this.inputAmount,
      outputAmount: this.outputAmount
    };
  }
  toPSBT() {
    return this.psbt;
  }
  toHex() {
    return this.psbt.toHex();
  }
  toBase64() {
    return this.psbt.toBase64();
  }
  /**
   * Set Replace-by-fee (RBF) value
   *
   * Replace-by-fee (RBF) is a feature that allows users to replace one version of an unconfirmed transaction
   * with a different version of the transaction that pays a higher transaction fee.
   * This can be done multiple times while the transaction is unconfirmed.
   *
   * Reference: [BIP-125](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki)
   */
  setRBF(value3) {
    this.rbf = value3;
    this.addInputs();
  }
  /**
   * Gets the x-coordinate of the public key.
   */
  get xKey() {
    return toXOnly(Buffer$3.from(this.publicKey, "hex")).toString("hex");
  }
  get inputsToSign() {
    const instantTradeSellerFlow = this.instantTradeMode && !this.autoAdjustment;
    return this.psbt.txInputs.reduce(
      (acc, _2, index) => {
        if (!this.instantTradeMode || this.instantTradeMode && index !== INSTANT_BUY_SELLER_INPUT_INDEX) {
          acc.signingIndexes = acc.signingIndexes.concat(index);
        }
        if (instantTradeSellerFlow) {
          acc.sigHash = // eslint-disable-next-line no-bitwise
          src$4.Transaction.SIGHASH_SINGLE | src$4.Transaction.SIGHASH_ANYONECANPAY;
        }
        return acc;
      },
      {
        address: this.address,
        signingIndexes: []
      }
    );
  }
  initPSBT() {
    this.psbt = new src$4.Psbt({ network: getNetwork(this.network) });
    this.psbt.setMaximumFeeRate(this.feeRate);
  }
  getInputSequence() {
    return this.rbf ? 4294967293 : 4294967295;
  }
  injectInput(injectable) {
    this.psbt.data.globalMap.unsignedTx.tx.ins[injectable.injectionIndex] = injectable.txInput;
    this.psbt.data.inputs[injectable.injectionIndex] = injectable.standardInput;
  }
  injectOutput(injectable) {
    let potentialIndex = injectable.injectionIndex;
    do {
      const isReserved = !!this.psbt.data.globalMap.unsignedTx.tx.outs[potentialIndex];
      if (!isReserved) {
        this.psbt.data.globalMap.unsignedTx.tx.outs[potentialIndex] = injectable.txOutput;
        this.psbt.data.outputs[potentialIndex] = // TODO: remove hack
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        injectable.standardOutput;
        break;
      }
      potentialIndex += 1;
    } while (potentialIndex);
  }
  addInputs() {
    const reservedIndexes = this.injectableInputs.map(
      (input) => input.injectionIndex
    );
    const injectedIndexes = [];
    this.inputs.forEach((input, inputIndex) => {
      const indexReserved = reservedIndexes.includes(inputIndex);
      if (indexReserved) {
        const injectable = this.injectableInputs.find(
          (o3) => o3.injectionIndex === inputIndex
        );
        this.injectInput(injectable);
        injectedIndexes.push(injectable.injectionIndex);
      }
      const existingInputHashes = this.psbt.txInputs.map((txInput) => {
        const hash2 = reverseBuffer(txInput.hash);
        return generateTxUniqueIdentifier(hash2.toString("hex"), txInput.index);
      });
      if (existingInputHashes.includes(
        generateTxUniqueIdentifier(input.hash, input.index)
      )) {
        return;
      }
      this.psbt.addInput(input);
      this.psbt.setInputSequence(
        indexReserved ? inputIndex + 1 : inputIndex,
        this.getInputSequence()
      );
    });
    this.injectableInputs.forEach((injectable) => {
      if (injectedIndexes.includes(injectable.injectionIndex)) {
        return;
      }
      this.injectInput(injectable);
      injectedIndexes.push(injectable.injectionIndex);
    });
  }
  addOutputs() {
    const reservedIndexes = this.injectableOutputs.map((o3) => o3.injectionIndex);
    const injectedIndexes = [];
    this.outputs.forEach((output2, outputIndex) => {
      if (reservedIndexes.includes(outputIndex)) {
        const injectable = this.injectableOutputs.find(
          (o3) => o3.injectionIndex === outputIndex
        );
        this.injectOutput(injectable);
        injectedIndexes.push(injectable.injectionIndex);
      }
      this.psbt.addOutput({
        address: output2.address,
        value: output2.value
      });
    });
    this.injectableOutputs.forEach((injectable) => {
      if (injectedIndexes.includes(injectable.injectionIndex)) {
        return;
      }
      this.injectOutput(injectable);
      injectedIndexes.push(injectable.injectionIndex);
    });
    if (this.changeAmount >= MINIMUM_AMOUNT_IN_SATS) {
      this.psbt.addOutput({
        address: this.changeAddress || this.address,
        value: this.changeAmount
      });
    }
  }
  calculateOutputAmount() {
    this.outputAmount = Math.floor(
      this.outputs.reduce((acc, curr) => acc + curr.value, 0) + this.injectableOutputs.reduce((acc, curr) => acc + curr.sats, 0)
    );
    if (this.outputAmount < MINIMUM_AMOUNT_IN_SATS) {
      throw new Error(
        `Output amount too low. Minimum output amount needs to be ${MINIMUM_AMOUNT_IN_SATS} sats`
      );
    }
  }
  /**
   * Calculates change amount from transaction and fetches additional UTXOs as required to cover output and network fees, if change is negative.
   */
  async recursivelyCalculateChangeAmount() {
    if (!this.autoAdjustment) {
      return;
    }
    this.changeAmount = Math.floor(
      this.inputAmount - this.outputAmount - this.fee
    );
    if (this.changeAmount < 0) {
      await this.prepare();
      if (this.noMoreUTXOS) {
        throw new Error(
          `Insufficient balance. Decrease the output amount by ${this.changeAmount * -1} sats`
        );
      }
    }
  }
  getRetrievedUTXOsValue() {
    return this.utxos.reduce((acc, utxo) => acc + utxo.sats, 0);
  }
  getReservedUTXOs() {
    return this.utxos.map(
      (utxo) => generateTxUniqueIdentifier(utxo.txid, utxo.n)
    );
  }
  getUTXOAmountToRequestFromChangeAmount() {
    if (this.changeAmount < 0) {
      return Math.abs(this.changeAmount);
    }
    return this.outputAmount - this.getRetrievedUTXOsValue();
  }
  /**
   * Retrieves UTXOs using `getSpendables` RPC.
   *
   * @param address Address
   * @param amount Amount in satoshis
   */
  async retrieveUTXOs(address2, amount) {
    if (!this.autoAdjustment && !address2) {
      return;
    }
    const amountToRequest = amount && amount > 0 ? amount : this.getUTXOAmountToRequestFromChangeAmount();
    if (amount && this.getRetrievedUTXOsValue() >= amount || amountToRequest <= 0) {
      return;
    }
    const utxos = await this.datasource.getSpendables({
      address: address2 || this.address,
      value: convertSatoshisToBTC(amountToRequest),
      filter: this.getReservedUTXOs()
    });
    this.noMoreUTXOS = utxos.length === 0;
    this.utxos.push(...utxos);
  }
  async retrieveSelectedUTXOs(address2, amount) {
    await this.retrieveUTXOs(address2, amount);
    const selectedUTXOs = this.utxos.find((utxo) => utxo.sats >= amount);
    this.utxos = selectedUTXOs ? [selectedUTXOs] : [];
    return this.utxos;
  }
  /**
   * Prepares inputs from UTXOs.
   */
  async prepareInputs() {
    if (!this.autoAdjustment) {
      return;
    }
    const promises = [];
    this.utxos.forEach((utxo) => {
      if (this.usedUTXOs.includes(generateTxUniqueIdentifier(utxo.txid, utxo.n))) {
        return;
      }
      this.inputAmount += utxo.sats;
      const promise = processInput({
        utxo,
        pubKey: this.publicKey,
        network: this.network,
        datasource: this.datasource
      });
      promises.push(promise);
    });
    const response = await Promise.all(promises);
    this.inputAmount += this.injectableInputs.reduce(
      (acc, curr) => acc + curr.sats,
      0
    );
    response.forEach((input) => {
      const txUniqueIdentifier = generateTxUniqueIdentifier(
        input.hash,
        input.index
      );
      if (this.usedUTXOs.includes(txUniqueIdentifier)) {
        return;
      }
      this.usedUTXOs.push(txUniqueIdentifier);
    });
    this.inputs = this.inputs.concat(response);
  }
  /**
   * Prepares PSBT to be set to a network, calculating and validating both inputs and outputs.
   */
  async prepare() {
    this.calculateOutputAmount();
    await this.retrieveUTXOs();
    await this.prepareInputs();
    await this.recursivelyCalculateChangeAmount();
    this.process();
    await this.recursivelyCalculateChangeAmount();
    this.calculateOutputAmount();
    this.process();
  }
  /**
   * Initializes PSBT instance, adding all inputs and outputs and calculates network fees.
   *
   * @returns PSBTBuilder instance
   */
  process() {
    this.initPSBT();
    this.addInputs();
    this.addOutputs();
    this.calculateNetworkFee();
    return this;
  }
}
function useSend() {
  const { wallet, network, address: address2, publicKey } = useWallie();
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const send = useCallback(
    async (toAddress, satoshis, feeRate, relay = true) => {
      setLoading(true);
      try {
        setError(null);
        if (!address2 || !address2.payments || !publicKey || !publicKey.payments || !wallet) {
          throw new Error("No wallet is connected");
        }
        const psbtBuilder = new PSBTBuilder({
          address: address2.payments,
          feeRate,
          network,
          publicKey: publicKey.payments,
          outputs: [
            {
              address: toAddress,
              value: satoshis
            }
          ]
        });
        await psbtBuilder.prepare();
        const signedPsbt = await signPsbt({
          address: address2.payments,
          wallet,
          network,
          psbt: psbtBuilder.toPSBT()
        });
        if (relay) {
          const datasource = new JsonRpcDatasource({ network });
          const txId = await datasource.relay({ hex: signedPsbt.hex });
          setLoading(false);
          return txId;
        }
        setLoading(false);
        return signedPsbt.hex;
      } catch (err) {
        setError(err.message);
        setLoading(false);
        return null;
      }
    },
    [address2, network, publicKey, wallet]
  );
  return { send, error, loading };
}
async function leatherRequest(arg, params) {
  if (typeof window !== "undefined" && window.LeatherProvider) {
    try {
      const res = await window.LeatherProvider.request(
        arg,
        params
      );
      return res.result;
    } catch (err) {
      const leatherError = err;
      const { message } = leatherError.error;
      if (leatherError.error.code === 4001) {
        throw new Error(message);
      }
      throw new Error(`Leather error: ${message}`);
    }
  } else {
    throw new Error("LeatherProvider not found");
  }
}
async function walletProvider() {
  const { get: get2 } = getWallets();
  const wallets2 = get2();
  const meWallet = wallets2.find(
    (wallet) => {
      var _a, _b;
      return wallet.name === "Magic Eden" && ((_b = (_a = wallet.features["sats-connect:"]) == null ? void 0 : _a.provider) == null ? void 0 : _b.isMagicEden) === true;
    }
  );
  if (!meWallet) {
    throw new Error("Magic Eden wallet not found");
  }
  return meWallet.features["sats-connect:"].provider;
}
function useSendBtc() {
  const { wallet, network, address: address2, publicKey } = useWallie();
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const send = useCallback(
    async (toAddress, satoshis) => {
      setLoading(true);
      try {
        setError(null);
        if (!address2 || !address2.payments || !publicKey || !publicKey.payments || !wallet) {
          throw new Error("No wallet is connected");
        }
        if (wallet === "magiceden" || wallet === "xverse") {
          const wp = wallet === "magiceden" ? await walletProvider() : void 0;
          let txid = null;
          txid = await new Promise((resolve, reject) => {
            sendBtcTransaction({
              payload: {
                network: {
                  type: network === "mainnet" ? BitcoinNetworkType.Mainnet : BitcoinNetworkType.Testnet
                },
                message: "Sign Transaction",
                recipients: [
                  {
                    address: toAddress,
                    amountSats: BigInt(satoshis)
                  }
                ],
                senderAddress: address2.payments
              },
              getProvider: async () => wp,
              onFinish: (response) => {
                resolve(response);
              },
              onCancel: () => {
                reject(new Error("Transaction canceled"));
              }
            });
          });
          setLoading(false);
          return txid;
        }
        if (wallet === "unisat") {
          let txid = "";
          txid = await window.unisat.sendBitcoin(toAddress, satoshis, {});
          setLoading(false);
          return txid;
        }
        if (wallet === "leather") {
          let txid = "";
          const request = await leatherRequest(
            "sendTransfer",
            {
              recipients: [
                {
                  address: toAddress,
                  amount: satoshis
                }
              ],
              network
            }
          );
          txid = request.txid;
          setLoading(false);
          return txid;
        }
        if (wallet === "okx") {
          let txid = "";
          if (network === "mainnet") {
            txid = await window.okxwallet.bitcoin.sendBitcoin(
              toAddress,
              satoshis,
              {}
            );
            setLoading(false);
            return txid;
          }
          if (network === "testnet") {
            txid = await window.okxwallet.bitcoinTestnet.sendBitcoin(
              toAddress,
              satoshis,
              {}
            );
            setLoading(false);
            return txid;
          }
        }
        setLoading(false);
        return null;
      } catch (err) {
        setError(err.message);
        setLoading(false);
        return null;
      }
    },
    [address2, network, publicKey, wallet]
  );
  return { send, error, loading };
}
function useSendV2() {
  const { wallet, network, address: address2, publicKey } = useWallie();
  const [isLoading, setIsLoading] = useState(false);
  const send = useCallback(
    async ({
      toAddress,
      satoshis,
      feeRate,
      relay = true,
      rbf = false
    }) => {
      setIsLoading(true);
      try {
        if (!address2 || !address2.payments || !publicKey || !publicKey.payments || !wallet) {
          throw new Error("No wallet is connected");
        }
        const psbtBuilder = new PSBTBuilder({
          address: address2.payments,
          feeRate,
          network,
          publicKey: publicKey.payments,
          outputs: [
            {
              address: toAddress,
              value: satoshis
            }
          ]
        });
        psbtBuilder.setRBF(rbf);
        await psbtBuilder.prepare();
        const signedPsbt = await signPsbt({
          address: address2.payments,
          wallet,
          network,
          psbt: psbtBuilder.toPSBT()
        });
        if (relay) {
          const datasource = new JsonRpcDatasource({ network });
          const txId = await datasource.relay({ hex: signedPsbt.hex });
          setIsLoading(false);
          return {
            txId
          };
        }
        setIsLoading(false);
        return {
          signedPsbtHex: signedPsbt.hex
        };
      } catch (err) {
        setIsLoading(false);
        return {
          error: err.message
        };
      }
    },
    [address2, network, publicKey, wallet]
  );
  return { send, isLoading };
}
function useSign() {
  const { network, publicKey, format, wallet } = useWallie();
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const sign2 = useCallback(
    async (address2, unsignedPsbtBase64, options) => {
      setLoading(true);
      try {
        setError(null);
        if (!format || !publicKey || !wallet) {
          throw new Error("No wallet is connected");
        }
        const unsignedPsbt = src$4.Psbt.fromBase64(unsignedPsbtBase64);
        const signedPsbt = await signPsbt({
          address: address2,
          wallet,
          network,
          psbt: unsignedPsbt,
          options
        });
        setLoading(false);
        return signedPsbt;
      } catch (err) {
        setError(err.message);
        setLoading(false);
        throw err;
      }
    },
    [format, network, publicKey, wallet]
  );
  return { sign: sign2, error, loading };
}
function leatherPaymentTypeFromFormat(format) {
  if (format === "segwit") {
    return LeatherAddressType.P2WPKH;
  }
  if (format === "taproot") {
    return LeatherAddressType.P2TR;
  }
  throw new Error("Leather payment address format is not supported");
}
async function signMessage({
  message,
  wallet,
  address: address2,
  network,
  format
}) {
  if (wallet === Wallet.MAGICEDEN) {
    const { base64 } = await signMessage$4(message, address2, network);
    return base64;
  }
  if (wallet === Wallet.UNISAT) {
    const { base64 } = await signMessage$3(message, "bip322-simple");
    return base64;
  }
  if (wallet === Wallet.XVERSE) {
    const { base64 } = await signMessage$2(message, address2, network);
    return base64;
  }
  if (wallet === Wallet.LEATHER) {
    const paymentType = leatherPaymentTypeFromFormat(format);
    const { base64 } = await signMessage$6(message, {
      paymentType,
      network
    });
    return base64;
  }
  if (wallet === Wallet.OKX) {
    const { base64 } = await signMessage$1(message, "bip322-simple", network);
    return base64;
  }
  throw new Error("Invalid wallet selected");
}
function useSignMessage() {
  const {
    network,
    wallet,
    publicKey,
    format,
    address: walletAddresses
  } = useWallie();
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const signMsg = useCallback(
    async (address2, message) => {
      setIsLoading(true);
      try {
        setError(null);
        if (!format || !publicKey || !wallet) {
          throw new Error("No wallet is connected");
        }
        if (walletAddresses.ordinals !== address2 && walletAddresses.payments !== address2) {
          throw new Error("Address supplied is not connected address");
        }
        const signedMessage = await signMessage({
          address: address2,
          wallet,
          message,
          network,
          format: walletAddresses.ordinals === address2 ? format.ordinals : format.payments
        });
        setIsLoading(false);
        return signedMessage;
      } catch (err) {
        setError(err.message);
        setIsLoading(false);
        throw err;
      }
    },
    [format, network, publicKey, wallet, walletAddresses]
  );
  return { signMsg, error, isLoading };
}
export {
  Network,
  OrdConnectKit,
  SelectWalletModal,
  Wallet,
  WallieProvider,
  useBalance,
  useSend,
  useSendBtc,
  useSendV2,
  useSign,
  useSignMessage,
  useWallie
};
